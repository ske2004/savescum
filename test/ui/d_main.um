import (
  "window.um"
  "canvas.um"
  "rect.um"
  "th.um"
  "input.um"
  "../../src/d_util.um"
  "d_act.um"
  "d_layout.um"
)

actstatus := d_act.ActStatus{}

toollist := d_act.ToolList{}

width := 0.0

fn init*() {

  window.setup("UI test", 1920, 1080)

  window.onFrame.register({
    objects := []^d_layout.Object{
      &d_layout.Object{.row, {666+width, 400}, 5, {}},
      &d_layout.Object{.column, {412, 666}, 10+width, {&d_layout.Object{.row, {200, 300}, 20, {}}, &d_layout.Object{.row, {10, 40}, 5, {}}}},
      &d_layout.Object{.row, {200, 200}, -10, {}}
    }

    resolved := d_layout.resolve(objects)

    if len(toollist.tools) != len(resolved) {
      toollist.tools = resolved
    } else {
      for i, tool^ in toollist.tools {
        tool.r = resolved[i].r
      }
    }

    width += sin(th.time/1000.0)

    mouseact := d_act.ActViaMouse{
      mouse: input.getMousePos(),
      pressing: input.isPressed(.mouse1),
      tabbed: input.isPressedRepeat(.tab)
    }

    actstatus.update(&toollist, mouseact)

    for i, tool in toollist.tools {
      canvas.drawRect(0x00000044, tool.r)
    }

    d_act.renderDebugInfo(&actstatus)
  })
}
