import (
  "act.um"
  "th.um"
)

type Direction* = enum {
  row
  column
}

type Object* = struct {
  direction: Direction
  size: th::Vf2
  margin: real
  children: []Object
}

fn resolve*(o: Object, p: th::Vf2 = {0.0, 0.0}): []act:::Tool {
  var tools: []act::Tool

  p.x += o.margin
  p.y += o.margin
  
  tools = append(tools, act::Tool{"null", {p.x, p.y, o.size.x, o.size.y}})

  for i, c in o.children {
    switch o.direction {
    case Direction.row:
      tools = append(tools, resolve(c, {p.x, p.y}))
      p.x += c.size.x+c.margin
    case Direction.column:
      tools = append(tools, resolve(c, {p.x, p.y}))
      p.y += c.size.y+c.margin
    }
  }
  

  return tools
}
