import (
  "act.um"
  "rect.um"
  "input.um"
  "canvas.um"
)

type Ui* = struct {
  tools: act::ToolList
  actstatus: act::ActStatus
  toolstack: []^act::Tool
}

fn create*(): Ui {
  return {}
}

fn (ui: ^Ui) beginTool*(id: str, r: rect::Rect) {
  tool := ui.tools.get(id)
  tool.r = r
  ui.toolstack = append(ui.toolstack, tool)
}

fn (ui: ^Ui) endTool*() {
  ui.toolstack = delete(ui.toolstack, len(ui.toolstack)-1)
}

fn (ui: ^Ui) hovered*(): bool {
  return ui.toolstack[len(ui.toolstack)-1] == ui.actstatus.hover
}

fn (ui: ^Ui) pressed*(): bool {
  return ui.toolstack[len(ui.toolstack)-1] == ui.actstatus.press
}

fn (ui: ^Ui) active*(): bool {
  return ui.toolstack[len(ui.toolstack)-1] == ui.actstatus.active
}

fn (ui: ^Ui) begin*() {

}

fn (ui: ^Ui) end*() {
  mouseact := act::ActViaMouse{
    mouse: input::getMousePos(),
    pressing: input::isPressed(.mouse1),
    tabbed: input::isPressedRepeat(.tab)
  }

  ui.actstatus.update(&ui.tools, mouseact)

  for i, tool in ui.tools.tools {
    canvas::drawRect(0x00000044, tool.r)
  }

  act::renderDebugInfo(&ui.actstatus)
}
