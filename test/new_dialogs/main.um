//
// TODO(skejeton):
//  The way text is currently typed is really boring and has no expression at all.
//   
//  I want to be able to emphasize and make things go faster if the writer wants, but making it too manual would
//  make things hard to make.
//
//  I should experiment with what looks emotional enough, and of course reserve different typing styles for
//  certain types of moods. The current style, where letters just appear linearly, can be called "typewriter".
//  My charecters won't be typewriters :P
//
//  An idea of a typing style I have rn is when words are typed fast, then spaces wait for a bit, then commas wait for a bit longer,
//  and dots wait for even longer, in theory that could even work in other alphabetic languages like Russian, Ukrainian, Spanish, Portuguese, German etc
//     
// TODO(skejeton):
//  Allow foreign objects on screen, start with rectangles for example

import (
  "std.um"
  "window.um"
  "rect.um"
  "th.um"
  "canvas.um"
  "input.um"
  "load_poems.um"
  "speech_typing.um"
  "construct.um"
  "strings.um"
  m_layout = "layout.um"
  "draw_dialog.um"
  "../../src/d_test.um"
  "../../src/d_util.um"
  "../../src/d_mouseinput.um"
  th_font = "font.um"
  th_color = "color.um"
)

fn blockCursorSizeFromFont(font: th_font.Font): th.Vf2 {
  return font.measure(" ")
}

//wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww

type ContactPoint = struct {
  at: th.Vf2
  size: th.Vf2
  isContact: bool
}

fn handleResizableRectangle(mouseInput: d_mouseinput.MouseState, contact: ^ContactPoint, rectangle: ^rect.Rect) {
  motion := mouseInput.delta

  if d_util.rectVsPoint(rectangle^, mouseInput.lastPos) && !contact.isContact {
    contact.size = rectangle.getDims()
    contact.isContact = true;
    contact.at = mouseInput.lastPos
  }

  if contact.isContact {
    if mouseInput.lmb.isDown {
      rectangle.x += motion.x
      rectangle.y += motion.y
    } else if mouseInput.rmb.isDown {
      newSize := mouseInput.lastPos.sub(contact.at).add(contact.size)
      rectangle.w = newSize.x
      rectangle.h = newSize.y
    } else {
      // no key pressed, means no contact anymore
      contact.isContact = false;
    }
  }

  if rectangle.w < 10 {
    rectangle.w = 10
  }
  
  if rectangle.h < 10 {
    rectangle.h = 10
  } 
}

const poemNoFile = 
  "After error and trial\n"+
  "I couldn't find your poem file\n"+
  "(No poem file found)";

const poemBadId = 
  "Searching far and above\n"+
  "Poem up and below\n"+
  "I've came to realise\n"+
  "It will not materialise\n"+
  "(Invalid poem ID)";

fn loadPoemFromFile(file: str, poemId: int): str {
  if ok, poems := d_util.readFileStr(file); ok {
    if ok, poem := load_poems.getPoem(load_poems.loadPoems(poems), poemId); ok {
      return poem
    }
    return poemBadId
  }
  return poemNoFile
}

type PushObj = interface{}
type ForeignObject = struct{size: th.Vf2}
type NewLine = struct{}
type SwitchColor = struct{color: uint32}

fn makeObjectArrayFromSpeechNodes(nodes: []speech_typing.SpeechNode): []PushObj {
  appearingTexts := []PushObj{}

  for i, node in nodes {
    if node.word == "\n" {
      appearingTexts = append(appearingTexts, NewLine{})
    } else {
      appearingTexts = append(appearingTexts, draw_dialog.constructAppearingTextFromUnit(node.word, node.unit))
    }
  }

  return appearingTexts
}

fn drawTempDialogBackdrop(boundingBox: rect.Rect) {
  canvas.drawRect(th.black, d_util.rectShrink(boundingBox, -5))
  d_util.drawRectLines(th.white, d_util.rectShrink(boundingBox, -4), 1)
  canvas.drawRect(0xFF8888FF, d_util.rectShrink(boundingBox, -3))
}

fn drawTempDialog(words: []PushObj, font: th_font.Font, boundingBox: rect.Rect, scrollY: real): real {
  drawTempDialogBackdrop(boundingBox)
  window.beginScissorRect(boundingBox)
  layout := m_layout.makeWrappingLayoutFromBoundary(boundingBox.w)
  colour := th.black
  
  for i in words {
    if sc := ^SwitchColor(words[i]); sc != null {
      colour = sc.color
    } else if nl := ^NewLine(words[i]); nl != null {
      layout.wrapAtMin(font.measure(" ").y)
    } else if word := ^draw_dialog.AppearingText(words[i]); word != null {
      size := draw_dialog.measureAppearingText(word, font)
      full := font.measure(word.orig).x
      pos := layout.pushPartial(size, full).add(boundingBox.getPos())

      draw_dialog.drawAppearingText(word, font, pos.add(th.Vf2{0, -scrollY}), colour)
    } else if obj := ^ForeignObject(words[i]); obj != null {
      pos := layout.push(obj.size)
      canvas.drawRect(colour, rect.mk(pos.x, pos.y, obj.size.x, obj.size.y)) 
    }
  }

  window.endScissor()
  {
    cursorSize := blockCursorSizeFromFont(font)
    cursorPos := layout.push(cursorSize).add(boundingBox.getPos()).add(th.Vf2{0, -scrollY})
    pulse := sin(th.time/300.0)
    rectangle := d_util.rectShrink(rect.mk(cursorPos.x, cursorPos.y, cursorSize.x, cursorSize.y), pulse*2)

    canvas.drawRect(th_color.alpha(th.white, (pulse/2.0+1.0)/2.0+0.5), rectangle)
  }
  scrollY = layout.position.y+layout.lineHeight-boundingBox.h
  if scrollY < 0 {
    return 0
  }
  return scrollY 
}

fn controlTypingTime(typingTime: ^real) {
  if input.isPressed(input.key_left) || input.isPressed(input.key_backspace) {
    typingTime^ -= th.delta/1000.0
  }
  if input.isPressed(input.key_right) {
    typingTime^ += th.delta/1000.0
  }  
  if typingTime^ < 0 {
    typingTime^ = 0
  }      
}

type TransformedText = struct {
  objects: []PushObj
  seconds: real
}

fn transformTextNodesIntoObjectArray(textNodes: []construct.TextNode, typingTimeSeconds: real): TransformedText {
  objects := []PushObj{}
  offsetSeconds := 0.0
  speed := 1.0
  // TODO(skejeton): Ideally I shouldn't manually calculate offsets here as this should be done automatically
  //                 by the sequencer, for that I'll need to delay the speech typing pass or make it iterative (probably better?).
  //                 OTOH speech pass can be very context sensetive, so as much text as possible is desired.
  //                 I think I can request the speech in chunks maybe? The only real problem here is inserting
  //                 speech nodes in between SwitchColor calls. Maybe saving lengths at the end of each spoken text iteration?
  //                 idk seems like a hack to me. Ideally there shouldn't be speech nodes and spokenText should just manage
  //                 text and return us the index at which we are typing as well as the unit value for the next letter.
  //                 that's much simplier to analyze but I don't know the implications yet.
  for i, node in textNodes {
    spokenText := speech_typing.makeSpokenText(node.text, typingTimeSeconds - offsetSeconds, speed)
    offsetSeconds += spokenText.seconds

    speed = node.speed
    objects = append(objects, SwitchColor{node.color})
    objects = append(objects, makeObjectArrayFromSpeechNodes(spokenText.nodes))
  }  

  return TransformedText{objects, offsetSeconds}
}

fn rainbowInTextNodes(text: str): []construct.TextNode {
  // ngl tophat's deafult green is too hard to see
  colorCycle := []uint32{th.red, 0x55FF55FF, th.blue, th.yellow}
  nodes := []construct.TextNode{}
  lines := strings.intersperse(strings.splitBy(text, ' '), ' ')
  for i, line in lines {
    nodes = append(nodes, construct.TextNode{color: colorCycle[i%len(colorCycle)], text: line, speed: real(i/3.0+1)})
  }

  return nodes
}

fn booleanProperty(at: th.Vf2, name: str, isset: ^bool) {
  rectangle := rect.Rect{at.x, at.y, 10, 10}

  color := th.red
  if isset^ {
    color = th.green
  }

  canvas.drawRect(color, rectangle)

  if d_util.isMouseInRect(rectangle) {
    if input.isJustPressed(input.mouse1) {
      isset^ = !isset^
    }
    textSize := canvas.textSize(name, 2)
    canvas.drawRect(th.black, rect.mk(at.x, at.y+20, textSize.x, textSize.y))
    canvas.drawText(name, at.add(th.Vf2{0, 20}), th.white, 2)
  }
}

fn main() {
  autoplay := false
  slow5x := false

  d_test.isUnitTest(false)
  window.setup("New dialogs", 800, 600)

  font := th_font.load(d_test.pfx()+"FuzzyBubbles-Bold.ttf", 24)
  screen := rect.mk(0, 0, 800, 600)
  sampleText := loadPoemFromFile(d_test.pfx()+"poems.txt", 0)

  boundingBoxContactPoint := ContactPoint{}
  boundingBox := rect.mk(30, 30, 400, 300)
  mouseInput := d_mouseinput.MouseState{}

  typingTime := 0.0
  scrollY := 0.0
  
  lines := rainbowInTextNodes(sampleText)

  for window.cycle() {
    tt := typingTime
    screen.w = window.w
    screen.h = window.h
    mouseInput = mouseInput.updated()
    if input.isJustPressed(' ') {
      autoplay = !autoplay
    }
    if autoplay {
      multiplier := 1.0
      if input.isPressed(input.key_shift) {
        multiplier = 2.0
      }
      if slow5x {
        multiplier /= 5;
      }

      typingTime += th.delta/1000.0*multiplier
    }
    controlTypingTime(&typingTime)
  
    if input.isJustPressed(input.key_escape) {
      autoplay = false;
      typingTime = 0
    }
    transformedText := transformTextNodesIntoObjectArray(lines, tt)
    
    if typingTime > transformedText.seconds {
      autoplay = false
      typingTime = transformedText.seconds
    }

    handleResizableRectangle(mouseInput, &boundingBoxContactPoint, &boundingBox)

    scrollY += (drawTempDialog(transformedText.objects, font, boundingBox, scrollY)-scrollY)/2
    
    booleanProperty(th.Vf2{0, 0}, "autoplay (space)", &autoplay)
    booleanProperty(th.Vf2{10, 0}, "5x slower", &slow5x)
  }
}
