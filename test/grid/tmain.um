import (
  "../test.um"
  "../../src/gfx/rerp.um" 
  "../../src/editor/grid.um"
  "image.um"
  "window.um"
  "rect.um"
  "th.um"
  "canvas.um"
  "input.um"
)

var lastMousePos: th::Vf2
var targetScale: th::Vf2
var tileset: image::Image
var grid: grid::Grid
var screen: rect::Rect

fn init*() {
  test::isUnitTest(false)

  window::setup("title", 640, 480)
  screen = {0, 0, 640, 480}

  grid = grid::Grid{
    bb: {20, 20, 600, 440},
    o: {0.0, 0.0},
    s: {64, 64},
    p: {0, 0}
  }

  lastMousePos = input::getMousePos()
  targetScale = grid.s
  tileset = image::load("data/img/ts_sky.png").item0
  tileset.setfilter(.linear)

  window::onFrame.register({
    window::setViewport(screen.getDims())

    targetScale = targetScale.addf(input::getMouseScroll().y)

		grid::gridZoomInto(&grid, rerp::iVf2(grid.s, targetScale, 0.2), input::getMousePos())

  	if input::isPressed(.mouse2) {
  		mouseDelta := input::getMousePos().sub(lastMousePos)
  		grid.p = grid.p.add(mouseDelta.div(grid.s))
  	}

  	mp := grid.toGrid(input::getMousePos())
  	p1, p2 := grid.toScreen(mp.floor()), grid.toScreen(mp.ceil())

  	canvas::drawRect(th::black, screen)

    tileset.draw(th::Transform{p: grid.toScreen(th::Vf2{0, 0}), s: grid.s.divf(64)})

  	guide := grid::mkRenderGuideFromBoundingBox(grid)
  	grid::drawRenderGuide(guide, th::white&0xFFFFFF55, 1)
    canvas::drawRect(th::red&0xFFFFFF55, {p1.x, p1.y, p2.x-p1.x, p2.y-p1.y})

    if grid.s.x >= 64 {
    	for v := 0; v < guide.nv; v++ {
	    	for h := 0; h < guide.nh; h++ {
	    		pos := th::Vf2{v, h}.sub(grid.p.floor())
	    		canvas::drawText(sprintf("(%d, %d)", trunc(pos.x), trunc(pos.y)), grid.toScreen(pos), th::white, 1.0)
	    	}
    	}
  	}	

  	lastMousePos = input::getMousePos()
  })
}
