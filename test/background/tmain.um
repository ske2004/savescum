import (
  "window.um"
  "rect.um"
  "th.um"
  "canvas.um"
  "input.um"
  "../test.um"
  "../../src/gfx/background.um"
  "../../src/misc/util.um"
  "../../src/data/resources.um"
  "../../src/data/problem_screen.um"
)

var screen: rect::Rect
var scale: real
var offset: th::Vf2
var oldMousePos: th::Vf2

fn init*() {
  test::isUnitTest(false)

  window::setup("Bg test", 800, 600)

  rl := resources::initResourceLoader()
  background::init(&rl)

  if resources::hasErrors(&rl) {
    problem_screen::showResourceLoadingError(&rl)
    exit(1)
  }

  screen = {0, 0, 800, 600}
  scale = 1.0
  offset = th::Vf2{0, 0}
  oldMousePos = input::getMousePos()

  window::onFrame.register({
    if input::isPressed(.mouse2) {
      offset = offset.add(input::getMousePos().sub(oldMousePos))
    }
    if input::isPressedc('=') {
      scale += th::delta/1000.0
    } 
    if input::isPressedc('-') {
      scale -= th::delta/1000.0
    }

    oldMousePos = input::getMousePos()

    canvas::drawRect(th::black, screen)
    content := util::rectCenterWithinRect({0, 0, 640, 480}, screen)
    background::drawCave(content, offset.mulf(-1), th::Vf2{scale, scale})
    util::drawRectLines(th::red, content)
  })
}
