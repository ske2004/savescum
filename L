#!/bin/bash

if [[ ! -f data/img/test.png ]]; then
  echo -e "There's asset files missing. You probably need to install Git LFS.\nAfter installing do \`git lfs install\` and \`git lfs pull\` while in the repo's root folder.\nOtherwise, this shouldn't happen really, I recommend to check if all files are in place."
  exit -1
fi


ARGS=( $@ )
SILENT=""
PROF=""
TESTTYPE="any"
NARG=0
PROG_NAME=$0
TOPHAT=./tophat
COMPILER=no_compiler_lol

# Probe if we are running WSL.
if grep -qi microsoft /proc/version; then
  TOPHAT=./tophat.exe
fi

# Probe if we are running some bash emulator on Windows
if [[ "`uname`" == "WindowsNT" ]]; then
  TOPHAT=./tophat.exe
fi

if [ -x "$(command -v gcc)" ]; then
  COMPILER=gcc
fi

if [ -x "$(command -v clang)" ]; then
  COMPILER=clang
fi

# TODO: cl compiler support, because windows doesn't have the same cli

no_compiler_lol() {
  echo "WARNING: NO COMPILER, RUNNING AS IS"
}

# $1 offset
getarg() {
  echo ${ARGS[$NARG + $1]}
}

engage() {
  if [ -z "$PROF" ]; then
    $TOPHAT $SILENT $@
  else
    # https://github.com/colrdavidson/spall
    # https://skejeton.github.io/spall
    $TOPHAT $PROF trace.json $SILENT $@
  fi
}

# $1 test name
target_test() {
  if [ -z "$1" ]; then
    echo -e "What am I gonna test? \n$PROG_NAME test test_name" 
    exit 1
  elif [[ -d "test/$1" && -f "test/$1/main.um" ]]; then 
    TESTTYPE=$TESTTYPE TEST_PFX="test/$1/" engage main "test/$1/main.um"
  else
    echo -e "I don't know test \"$1\".\nTests are in ./test directory, you must make a folder named \"$1\" inside it, and put a main.um file in it. That's the way it is!" 
    exit 2
  fi
}

# Compiles external C code
target_compile_extern() {
  $COMPILER external/jumbo.c -shared -o src/d_extern.umi
}

hasargs=1

# Fetch all sparse args
while [ $hasargs -eq 1 ]
do
  case `getarg 0` in
    prof)
      PROF=xprof
      NARG=$(( $NARG + 1 ))
    ;; 
    silent)
      NARG=$(( $NARG + 1 ))
      SILENT=silent
    ;; 
    testbed)
      NARG=$(( $NARG + 1 ))
      TESTTYPE="testbed"
    ;; 
    unit)
      NARG=$(( $NARG + 1 ))
      TESTTYPE="unit"
    ;; 
    *)
      hasargs=0
    ;;
  esac
done

target_compile_extern
# user data
mkdir -p user

case `getarg 0` in
  play)
    engage main src/main.um
  ;;
  check)
    engage check main src/main.um
    
    for d in test/*; do
      TEST_PFX="%d/" $TOPHAT $SILENT check main "$d/main.um"
    done
  ;;
  testall)
    for d in test/*; do
      echo "Testing ---" `basename $d`
      target_test `basename $d`
    done
  ;;
  test)
    target_test `getarg 1`
  ;;
  *)
    echo "You can do: test, check, play"
    exit 3
  ;;
esac

