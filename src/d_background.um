import (
  "rect.um"
  "image.um"
  "canvas.um"
  "th.um"
  th_color = "color.um"
  "d_util.um"
  "d_global.um"
  "d_resources.um"
  "d_partition.um"
)

const (
  backgroundDebug  = 0
  backgroundClouds = 1
  backgroundAdvent = 2
  backgroundJazz   = 3
  backgroundCave   = 4
  backgroundBlack  = 0
)

var (
  imgClouds: image.Image
  imgRocks: image.Image
  width: real
)

fn init*(rl: ^d_resources.ResourceLoader) {
  imgClouds = d_resources.loadImage(rl, "data/img/bg_sky.png")
  imgRocks = d_resources.loadImage(rl, "data/img/bg_pit.png")

  width = imgClouds.getDims().x
}

fn drawCloudStrip(scroll: real, y: real, colorMod: uint32, scale: real) {
  scroll = d_util.fmod(scroll, -width)

  times := trunc(d_global.screen.w/width)+2

  for i := 0; i < times; i++ {
    imgClouds.draw({p: {scroll+i*width, y}, s: {scale, scale}}, colorMod)
  }
}

fn drawClouds*(screen: rect.Rect, tint: uint32, bg: uint32, scale: real) {
  const (
    stripeCount = 5
  )
  step := scale * 60

  origin := d_global.screen.h - 480 * scale - (stripeCount - 1) * step

  width = imgClouds.getDims().x
  width *= scale

  canvas.drawRect(bg, d_global.screen)

  for i := 0; i < stripeCount; i++ {
    yOffset := origin+i*step
    scroll := (i + 1) * (i + 1) * th.time/5000.0 * -120/stripeCount
    color := tint | (trunc(((i + 1.0) / stripeCount) * 0xFF) & 0xFF)

    drawCloudStrip(scroll, yOffset, color, scale)
  }
}

fn jazzColor(time: real): uint32 {
  phase := trunc(time)%6
  
  color := th_color.hsv(real(phase)/6.0, 1.0, 0.1, 1.0)

  return color
}

fn extrudeSquareFromCenter(center: th.Vf2, diameter: real): rect.Rect {
  radius := diameter/2
  return rect.Rect{center.x-radius, center.y-radius, diameter, diameter}
}

fn rectCenter(rect: rect.Rect): th.Vf2 {
  return th.Vf2{rect.x+rect.w/2, rect.y+rect.h/2}
}

// Draws a background with a square extending from the center
fn drawBackgroundSquare*(bound: rect.Rect, time: real, color1, color2: uint32, scalexy: th.Vf2) {
  scale := scalexy.x
  // Amount of pixels to wait until a new rectangle appears

  frequency := trunc(64*scale)
  rectCount := trunc(d_util.max(bound.w, bound.h)/frequency)+2
  center := rectCenter(bound)
  
  canvas.beginScissorRect(bound)
  
  time *= frequency
 
  for i := 0; i < rectCount; i++ {
    color := color1
    if (i + (trunc(time) / frequency)) % 2 == 0 {
      color = color2
    }

    diameter := (rectCount-i) * frequency + (trunc(time) % frequency) - frequency
    square := extrudeSquareFromCenter(center, diameter)

    canvas.drawRect(color, square)
  }

  canvas.endScissor()
}

fn drawJazz*(screen: rect.Rect, position: th.Vf2, scale: th.Vf2) {
  color1 := jazzColor(th.time/1000.0)
  color2 := color1 + 0x11111100

  drawBackgroundSquare(d_global.screen, th.time/1000.0, color1, color2, scale)
}

fn drawCave*(screen: rect.Rect, position: th.Vf2, scale: th.Vf2) {
  tileSize := imgRocks.getDims()
  scr := rect.Rect{position.x, position.y, screen.w/scale.x, screen.h/scale.y}
  tileRepeat := d_partition.calculateTileSpanOnScreen(tileSize, scr)

  for x := 0; x < tileRepeat.w; x++ {
    for y := 0; y < tileRepeat.h; y++ {
      tilePos := th.Vf2{x*tileSize.x, y*tileSize.y}.add(tileRepeat.pos).mul(scale).add(screen.getPos())

      imgRocks.draw(th.Transform{p: tilePos, s: scale})
    }
  }
}

fn drawBg*(screen: rect.Rect, which: int) {
  screenScale := th.Vf2{d_global.screen.w/screen.w, d_global.screen.h/screen.h}

  switch which {
    case backgroundBlack: drawBackgroundSquare(d_global.screen, th.time/1000.0, 0x000000FF, 0x040408FF, screenScale) 
    case backgroundDebug: drawClouds(screen, 0x99994400, 0x555555FF, d_global.screen.w/screen.w*0.5)
    case backgroundClouds: drawClouds(screen, 0x7777FF00, 0xEEEEEEFF, d_global.screen.w/screen.w*0.5)
    case backgroundAdvent: drawClouds(screen, 0x4444AA00, 0x000022FF, d_global.screen.w/screen.w*0.5); 
    case backgroundJazz: drawJazz(screen, th.Vf2{screen.x, screen.y}, screenScale)
    case backgroundCave: drawCave(d_global.screen, th.Vf2{screen.x, screen.y}, screenScale)
  }
}

fn draw*(screen: rect.Rect) {
  drawBg(screen, backgroundBlack)
}

