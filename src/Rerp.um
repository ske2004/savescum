/**
 * Ratio-based interpolation for different types.
 */

import (
  "rect.um"
  "th.um"
)

fn iReal*(s, t, f: real): real {
  if f > 1 {
    f = 1
  } else if f < 0 {
    f = 0;
  }
  return s + (t-s)*f
}

fn iVf2*(s, t: th.Vf2, f: real): th.Vf2 {
  if f > 1 {
    f = 1
  } else if f < 0 {
    f = 0;
  }
  s.x += (t.x-s.x)*f
  s.y += (t.y-s.y)*f
  return s
}

fn iRect*(s, t: rect.Rect, f: real): rect.Rect {
  if f > 1 {
    f = 1
  } else if f < 0 {
    f = 0;
  }
  s.x += (t.x-s.x)*f
  s.y += (t.y-s.y)*f
  s.w += (t.w-s.w)*f
  s.h += (t.h-s.h)*f
  return s
}

