import (
  "utf8.um"
  "../misc/strings.um"
)

type Buffer* = struct {
  lines: []str
}

type Cursor* = struct {
  line, column: int
}

fn mk*(string: str): Buffer {
  return Buffer{lines: strings::splitBy(string, '\n')}
}

fn (buf: ^Buffer) toString*(): str {
  return strings::joinBy(buf.lines, "\n")
}

fn (buf: ^Buffer) splitLine*(cursor: ^Cursor) {
  firstHalf, secondHalf := strings::uniSlice(buf.lines[cursor.line], 0, cursor.column), strings::uniSliceFrom(buf.lines[cursor.line], cursor.column)

  buf.lines[cursor.line] = firstHalf

  newLines := slice(buf.lines, 0, cursor.line+1)
  newLines = append(newLines, secondHalf)
  newLines = append(newLines, slice(buf.lines, cursor.line+1))
  buf.lines = newLines

  cursor.column = 0
  cursor.line += 1
}

fn (buf: ^Buffer) erase*(cursor: ^Cursor) {
  cursor.column -= 1
  if cursor.column < 0 {
    // Join lines strategy.
    cursor.line -= 1
    if cursor.line >= 0 {
      cursor.column = utf8::runeCount(buf.lines[cursor.line])
      buf.lines[cursor.line] += buf.lines[cursor.line+1]
      buf.lines = delete(buf.lines, cursor.line+1)
    } else {
      cursor.line = 0
      cursor.column = 0
    }
  } else {
    // Remove char strategy.
    buf.lines[cursor.line] = strings::uniRemove(buf.lines[cursor.line], cursor.column, 1)
  }
}

fn (buf: ^Buffer) eraseRange*(a: Cursor, b: ^Cursor) {
  if a.line == b.line && a.column == b.column {
    buf.erase(b)
    return
  }

  if a.line > b.line || (a.line == b.line && a.column > b.column) {
    a, b^ = b^, a
  }

  for a.line < b.line || (a.line == b.line && a.column < b.column) {
    buf.erase(b)
  }
}

fn (buf: ^Buffer) getRange*(a: Cursor, b: Cursor): str {
  if a.line > b.line {
    a, b = b, a
  }

  result := ""

  for a.line < b.line {
    result += strings::uniSliceFrom(buf.lines[a.line], a.column)+"\n"
    a.line++
    a.column = 0
  }

  if a.column > b.column {
    a, b = b, a
  }

  result += strings::uniSlice(buf.lines[a.line], a.column, b.column-a.column)

  return result
}

fn (buf: ^Buffer) insert*(cursor: ^Cursor, text: str) {
  linesToInsert := strings::splitBy(text, '\n')
  for index, line in linesToInsert {
    // Reset the column if we're on a new line.
    if index != 0 { 
      buf.splitLine(cursor)
    }
    buf.lines[cursor.line] = strings::uniInsert(buf.lines[cursor.line], cursor.column, line)
    cursor.column += utf8::runeCount(line)
  }
}

fn (buf: ^Buffer) update*(cursor: ^Cursor, text: str) {
  runes := utf8::decode(text)

  for index, rune in runes {
    // Transform character to a buffer operation.
    switch int(rune) {
      case 13: // Enter key.
        buf.insert(cursor, "\n")
      case 127, 8, 27: // Junk?
      default: // Printable character.
        buf.insert(cursor, rune.encode())
    }
  }
}

fn (buf: ^Buffer) sanitizeCursor*(cursor: Cursor): Cursor {
  if cursor.line < 0 {
    cursor.line = 0
  }
  if cursor.line > len(buf.lines)-1 {
    cursor.line = len(buf.lines)-1
  }

  realLength := utf8::runeCount(buf.lines[cursor.line])
  
  if cursor.column < 0 {
    cursor.column = 0
  }
  for cursor.column > realLength {
    cursor.column = realLength
  }
  
  return cursor
}

fn (buf: ^Buffer) moveCursor*(cursor: Cursor, dx, dy: int): Cursor {
  cursor.line += dy

  cursor = buf.sanitizeCursor(cursor)

  if dx < 0 {
    for dx != 0 {
      dx += 1

      if cursor.column == 0 {
        cursor.line -= 1
        if cursor.line > 0 {
          cursor.column = utf8::runeCount(buf.lines[cursor.line])
        } else {
          cursor.line = 0
        }
      } else {
        cursor.column -= 1
      }
    }
  } else {
    for dx != 0 {
      dx -= 1

      if cursor.column == utf8::runeCount(buf.lines[cursor.line]) {
        if cursor.line < len(buf.lines)-1 {
          cursor.column = 0
          cursor.line += 1
        }
      } else {
        cursor.column += 1
      }
    }
  }

  return cursor
}
