import (
  "console/console.um"
  "editor/drawcmd.um"
  "rect.um"
  font = "gfx/font.um"
)

var (
  console: console::Console
  visualConsole: console::VisualConsole
)

type ConsoleDrawCmd* = struct {
  r: rect::Rect
  font: font::Font
}


fn initConsole*() {
  console = console::Console{}
}

fn logt*(text: str) {
  console.write(text)
}

// don't use it unless you want to render the console in a special 
// way or something.
fn getConsole*(): ^console::Console {
  return &console
}

fn scrollConsole*(by: real) {
  visualConsole.scrollBy(by*64)
}

// draws fullscreen console.
fn drawConsole*(r: rect::Rect, font: font::Font) {
  console::render(&console, &visualConsole, font, r) 
}

fn (c: ^ConsoleDrawCmd) draw*(props: drawcmd::DrawProperties) {
  drawConsole(c.r, c.font)
}
