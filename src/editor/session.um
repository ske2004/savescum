// Editor sessions

import (
  "th.um"
  "rect.um"

  "../../umbox/jsonenc/jsonenc.um"
  "../../umbox/json/json.um"
)

type Window* = struct {
  name: str
  visible: bool
  rect: rect::Rect
}

type Session* = struct {
  pan: th::Vf2
  scale: real
  room: str
  allLayers: bool
  entityBypass: bool
  layerSelected: int
  tileSelected: th::Vf2
  plainBiscuit: bool
  windows: []Window
}

fn encVf2*(enc: ^jsonenc::Encoder, value: th::Vf2) {
  enc.startArray()
  {
    enc.putVal(value.x)
    enc.putVal(value.y)
  }
  enc.endArray()
}

fn decNumber*(v: any): real {
  if r := ^real(v); r != null {
    return r^
  }

  return int(v)
}

fn decVf2*(v: any): th::Vf2 {
  a := []any(v)

  return th::Vf2{decNumber(a[0]), decNumber(a[1])}
}

fn decRect*(v: any): rect::Rect {
  a := ^[]any(v)

  return rect::Rect{decNumber(a[0]), decNumber(a[1]), decNumber(a[2]), decNumber(a[3])}
}

fn save*(session: Session): str {
  enc := jsonenc::mk(false) 
  enc.startObject()
  {
    enc.putKey("pan")
    encVf2(&enc, session.pan)
    enc.putKey("scale")
    enc.putVal(session.scale)
    enc.putKey("room")
    enc.putVal(session.room)
    enc.putKey("all_layers")
    enc.putVal(session.allLayers)
    enc.putKey("entity_bypass")
    enc.putVal(session.entityBypass)
    enc.putKey("layer_selected")
    enc.putVal(session.layerSelected)
    enc.putKey("tile_selected")
    encVf2(&enc, session.tileSelected)
    enc.putKey("plain_biscuit")
    enc.putVal(session.plainBiscuit)
    enc.putKey("windows")
    enc.startArray()
    {
      for i, window in session.windows {
        enc.startObject()
        {
          enc.putKey("name")
          enc.putVal(window.name)
          enc.putKey("visible")
          enc.putVal(window.visible)
          enc.putKey("rect")
          enc.startArray()
          {
            enc.putVal(window.rect.x)
            enc.putVal(window.rect.y)
            enc.putVal(window.rect.w)
            enc.putVal(window.rect.h)
          }
          enc.endArray()
        }
        enc.endObject()
      }
    }
    enc.endArray()
  }
  enc.endObject()

  return enc.toStr()
}

fn load*(sourceStr: str): Session {
  data := json::parse(sourceStr)

  if errors := ^[]json::Error(data); errors != null {
    for _, err in errors {
      printf("Invalid session file: (%d) %s", err.lno, err.message)
    }
    exit(-1)
  }

  main := map[str]any(data)

  session := Session{}
  session.pan = decVf2(main["pan"])
  session.scale = decNumber(main["scale"])
  session.room = str(main["room"])
  session.allLayers = bool(main["all_layers"])
  session.entityBypass = bool(main["entity_bypass"])
  session.layerSelected = int(main["layer_selected"])
  session.tileSelected = decVf2(main["tile_selected"])
  session.plainBiscuit = bool(main["plain_biscuit"])

  windows := []any(main["windows"])
  for _, window_ in windows  {
    window := map[str]any(window_)

    win := Window{}
    win.name = str(window["name"])
    win.visible = bool(window["visible"])
    win.rect = decRect(window["rect"])
    session.windows = append(session.windows, win)
  }

  return session
}


