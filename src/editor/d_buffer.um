import (
  "utf8.um"
  "../misc/d_strings.um"
)

type Buffer* = struct {
  lines: []str
}

type Cursor* = struct {
  line, column: int
}

// Creates a new buffer with the provided text.
fn newBuffer*(text: str): Buffer {
  // Normalize line endings.
  text = d_strings.join(d_strings.splitBy(text, '\r'))
  return Buffer{lines: d_strings.splitBy(text, '\n')}
}

// Converts buffer to string
fn bufferToString*(buffer: Buffer): str {
  return d_strings.joinBy(buffer.lines, '\n')
}

// Splits line at the cursor, equivalent to inserting a newline.
fn splitLine*(buffer: ^Buffer, cursor: ^Cursor) {
  firstHalf, secondHalf := d_strings.uniSlice(buffer.lines[cursor.line], 0, cursor.column), d_strings.uniSliceFrom(buffer.lines[cursor.line], cursor.column)

  buffer.lines[cursor.line] = firstHalf

  newLines := slice(buffer.lines, 0, cursor.line+1)
  newLines = append(newLines, secondHalf)
  newLines = append(newLines, slice(buffer.lines, cursor.line+1))
  buffer.lines = newLines

  cursor.column = 0
  cursor.line += 1
}


// Erases character under cursor.
// Joins the two lines if at the start of a line.
fn erase*(buffer: ^Buffer, cursor: ^Cursor) {
  cursor.column -= 1
  if cursor.column < 0 {
    // Join lines strategy.
    cursor.line -= 1
    if cursor.line >= 0 {
      cursor.column = utf8.runeCount(buffer.lines[cursor.line])
      buffer.lines[cursor.line] += buffer.lines[cursor.line+1]
      buffer.lines = delete(buffer.lines, cursor.line+1)
    } else {
      cursor.column = 0
      cursor.line = 0
    }
  } else {
    // Remove char strategy.
    buffer.lines[cursor.line] = d_strings.uniRemove(buffer.lines[cursor.line], cursor.column, 1)
  }
}

// Inserts provided text into buffer. 
fn insertAt*(buffer: ^Buffer, cursor: ^Cursor, text: str) {
  linesToInsert := d_strings.splitBy(text, '\n')
  for index, line in linesToInsert {
    // Reset the column if we're on a new line.
    if index != 0 { 
      splitLine(buffer, cursor)
    }
    buffer.lines[cursor.line] = d_strings.uniInsert(buffer.lines[cursor.line], cursor.column, line)
    cursor.column += utf8.runeCount(line)
  }
}

fn eraseRange*(buffer: ^Buffer, cursor: ^Cursor, start, end: Cursor) {
  if start.line == end.line {
    buffer.lines[start.line] = d_strings.uniRemove(buffer.lines[start.line], start.column, end.column-start.column)
  } else {
    // Remove the first line.
    buffer.lines[start.line] = d_strings.uniSliceFrom(buffer.lines[start.line], start.column)
    // Remove the last line.
    buffer.lines[end.line] = d_strings.uniRemove(buffer.lines[end.line], 0, end.column)
    // Join the two lines.
    buffer.lines[start.line] += buffer.lines[end.line]
    // Remove the lines in between.
    for i := start.line+1; i < end.line-1; i++ {
      buffer.lines = delete(buffer.lines, i)
    }
  }
  cursor.line = start.line
  cursor.column = start.column
}

// Sanitizes the `cursor` so it doesn't go outside bounds of `buffer`.
fn sanitizeCursor*(buffer: ^Buffer, cursor: Cursor): Cursor {
  if cursor.line < 0 {
    cursor.line = 0
  }
  if cursor.line > len(buffer.lines)-1 {
    cursor.line = len(buffer.lines)-1
  }

  realLength := utf8.runeCount(buffer.lines[cursor.line])
  
  if cursor.column < 0 {
    cursor.column = 0
  }
  for cursor.column > realLength {
    cursor.column = realLength
  }
  
  return cursor
}

// Moves cursor within buffer by dx columns, dy rows.
// Rows grow downwards.
fn moveCursor*(buffer: ^Buffer, cursor: Cursor, dx, dy: int): Cursor {
  cursor.line += dy

  cursor = sanitizeCursor(buffer, cursor)

  if dx < 0 {
    for dx != 0 {
      dx += 1

      if cursor.column == 0 {
        cursor.line -= 1
        if cursor.line > 0 {
          cursor.column = utf8.runeCount(buffer.lines[cursor.line])
        } else {
          cursor.line = 0
        }
      } else {
        cursor.column -= 1
      }
    }
  } else {
    for dx != 0 {
      dx -= 1

      if cursor.column == utf8.runeCount(buffer.lines[cursor.line]) {
        if cursor.line < len(buffer.lines)-1 {
          cursor.column = 0
          cursor.line += 1
        }
      } else {
        cursor.column += 1
      }
    }
  }

  return cursor
}

