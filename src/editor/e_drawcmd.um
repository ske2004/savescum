/*
 * Draw commands.
 * TODO: Check if callbacks/closures are faster than interfaces and use them instead.
 */

import ("th.um"; "window.um"; "rect.um"; "image.um"; "font.um"; "canvas.um"; "../d_util.um")

type (
  DrawProperties* = struct{}

  CustomCommand* = interface {
    draw(props: DrawProperties): void
  }

  Command = struct {
    attr: real
    kind: int
    rect: rect.Rect
    color: uint32
    custom: CustomCommand
  }

  Layer = []Command

  DrawContext* = struct {
    scissorRectStack: []rect.Rect
    currentLayerId: int
    currentLayer: ^Layer
    layerOrder: []int
    layers: map[int]Layer
  }
)

const (
  commandRect   = 0
  commandRectLines = 1
  commandBeginScissorRect = 2
  commandEndScissor = 3
  commandCustom = 255
)

fn (lay: ^Layer) appendCommand(cmd: Command) {
  lay ^= Layer(append([]Command(lay^), cmd))
}

fn (ctx: ^DrawContext) acquireLayer(layer: int) {
  // Insert the layer ordering at the correct spot.

  if (validkey(ctx.layers, layer)) {
    return
  }

  insertIndex := 0
  for i in ctx.layerOrder {
    if ctx.layerOrder[i] > layer {
      insertIndex = i
      break
    } else {
      insertIndex = i+1
    }
  }

  ctx.layers[layer] = Layer(make([]Command, 0))
  ctx.layerOrder = insert(ctx.layerOrder, insertIndex, layer)
}


fn init*(): DrawContext {
  ctx := DrawContext{}
  ctx.acquireLayer(0)
  ctx.currentLayer = &ctx.layers[0]
  return ctx
}

fn (ctx: ^DrawContext) setLayer*(layer: int) {
  ctx.acquireLayer(layer)
  ctx.currentLayerId = layer
  ctx.currentLayer = &ctx.layers[layer]
}

fn (ctx: ^DrawContext) moveLayer*(layerBy: int) {
  ctx.setLayer(ctx.currentLayerId+layerBy)
}

fn (ctx: ^DrawContext) getCurrentScissorRect*(): (bool, rect.Rect) {
  if len(ctx.scissorRectStack) > 0 {
    return true, ctx.scissorRectStack[len(ctx.scissorRectStack)-1]
  }
  return false, rect.Rect{}
}

/*
// DrawContext.Flush()
//
// Flushes all the layers and commands, outputting them onto the screen.
*/
fn (ctx: ^DrawContext) flush*() {
  scissorCounter := 0

  for _, i in ctx.layerOrder {
    layer := ctx.layers[i]

    for j, command in layer {
      command.rect.x = floor(command.rect.x)
      command.rect.y = floor(command.rect.y)
      switch command.kind {
        case commandRect:
          canvas.drawRect(command.color, command.rect)
        case commandRectLines:
          d_util.drawRectLines(command.color, command.rect, command.attr)
        case commandBeginScissorRect:
          canvas.beginScissorRect(command.rect)
          scissorCounter += 1
        case commandEndScissor:
          canvas.endScissor()
          scissorCounter -= 1
          if scissorCounter < 0 {
            error("Scissor mismatch")
          }
        case commandCustom:
          command.custom.draw(DrawProperties{})
      }
    } 
  }

  if scissorCounter != 0 {
    error(sprintf("Scissor mismatch: %d", scissorCounter))
  }

  ctx ^= init()
}

type TextCmd = struct {
  font: font.Font
  text: str
  pos: th.Vf2
  color: uint32
  size: real
}

fn (d: ^TextCmd) draw(props: DrawProperties) {
  d.font.draw(d.text, d.pos, d.color, d.size)
}

fn (ctx: ^DrawContext) drawText*(f: font.Font, text: str, position: th.Vf2, color: uint32, size: th.fu = 1.0) {
  ctx.currentLayer.appendCommand(Command{kind: commandCustom, custom: TextCmd{f, text, position, color, size}})
}

fn (ctx: ^DrawContext) drawRect*(color: uint32, r: rect.Rect) {
  ctx.currentLayer.appendCommand(Command{kind: commandRect, color: color, rect: r})
}

fn (ctx: ^DrawContext) drawRectLines*(color: uint32, r: rect.Rect, thicc: real = 1.0) {
  ctx.currentLayer.appendCommand(Command{kind: commandRectLines, color: color, rect: r, attr: thicc})
}

fn (ctx: ^DrawContext) beginScissorRectRaw*(r: rect.Rect) {
  ctx.scissorRectStack = append(ctx.scissorRectStack, r)
  ctx.currentLayer.appendCommand(Command{kind: commandBeginScissorRect, rect: r})
}

fn mergeScissorRects(child, parent: rect.Rect): rect.Rect {
  if d_util.rectVsRect(child, parent) == false {
    // At this point we just need to disable rendering since child isn't even inside the parent,
    //  so it shouldn't be visible. 
    //
    // In this case I return a scissor rect that will remove all rendering for once.
    return rect.mk(0, 0, 0, 0)
  }

  // Otherwise return the intersection rect.
  return d_util.rectDiff(child, parent)
}

fn (ctx: ^DrawContext) beginScissorRect*(r: rect.Rect) {
  // Merge scissor rects to make sure the rect `r` doesn't show content
  // outside of the parent scissor rect too. 
  // 
  // This is needed for cases like
  // scroll containers, where you don't want text to overflow outside of scroll buffer
  // AND the text box. 
  if len(ctx.scissorRectStack) > 0 {
    r = mergeScissorRects(r, ctx.scissorRectStack[len(ctx.scissorRectStack)-1])
  }

  ctx.beginScissorRectRaw(r)
}

fn (ctx: ^DrawContext) endScissor*() {
  if len(ctx.scissorRectStack) == 0 {
    error("Mismatched beginScissor/endScissor")
  }

  ctx.scissorRectStack = delete(ctx.scissorRectStack, len(ctx.scissorRectStack)-1)

  ctx.currentLayer.appendCommand(Command{kind: commandEndScissor})
}

type ImageCmd = struct {
  image: image.Image
  transform: th.Transform
  quadCrop: th.Quad
  tint: uint32
}

fn (d: ^ImageCmd) draw(props: DrawProperties) {
  d.image.cropQuad(d.quadCrop)
  d.image.draw(d.transform, d.tint)
}

fn (ctx: ^DrawContext) drawImage*(img: image.Image, transform: th.Transform, color: uint32 = 0xFFFFFFFF) {
  ctx.currentLayer.appendCommand(Command{kind: commandCustom, custom: ImageCmd{img, transform, img.getCropQuad(), color}})
}

type NinepatchCmd = struct {
  image: image.Image
  outer, inner, dest: rect.Rect
  quadCrop: th.Quad
  tint: uint32
}

fn (d: ^NinepatchCmd) draw(props: DrawProperties) {
  d.image.cropQuad(d.quadCrop)
  d.image.drawNinepatch(d.outer, d.inner, d.dest, d.tint)
}

fn (ctx: ^DrawContext) drawNinepatch*(img: image.Image, outer, inner, dest: rect.Rect, tint: uint32 = th.white) {
  ctx.currentLayer.appendCommand(Command{kind: commandCustom, custom: NinepatchCmd{img, outer, inner, dest, img.getCropQuad(), tint}})
}

fn (ctx: ^DrawContext) drawCustom*(custom: CustomCommand) {
  ctx.currentLayer.appendCommand(Command{kind: commandCustom, custom: custom})
}
