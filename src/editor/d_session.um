// Editor sessions

import (
  "th.um"
  "rect.um"
  "csv.um"

  ut = "../d_csvutil.um"
)

type Window* = struct {
  name: str
  visible: bool
  rect: rect.Rect
}

type Session* = struct {
  pan: th.Vf2
  scale: real
  portal: str
  allLayers: bool
  entityBypass: bool
  layerSelected: int
  tileSelected: th.Vf2
  windows: []Window
}

fn save*(session: Session): str {
  result := [][]str{}
  result = append(result, ut.saveVf2(session.pan))
  result = append(result, ut.saveReal(session.scale))
  result = append(result, []str{session.portal})
  result = append(result, ut.saveBool(session.allLayers))
  result = append(result, ut.saveBool(session.entityBypass))
  result = append(result, ut.saveInt(session.layerSelected))
  result = append(result, ut.saveVf2(session.tileSelected))
  
  result = append(result, ut.saveReal(len(session.windows)))
  for i, window in session.windows {
    result = append(result, []str{window.name})
    result = append(result, ut.saveBool(window.visible))
    result = append(result, ut.saveRect(window.rect))
  }

  return csv.encode(result)
}

fn load*(sourceStr: str): Session {
  source := csv.parse(sourceStr)
  session := Session{}
  session.pan = ut.loadVf2(source[0])
  session.scale = ut.loadReal(source[1])
  session.portal = source[2][0]
  session.allLayers = ut.loadBool(source[3])
  session.entityBypass = ut.loadBool(source[4])
  session.layerSelected = trunc(ut.loadInt(source[5]))
  session.tileSelected = ut.loadVf2(source[6])

  count := trunc(ut.loadReal(source[7]))

  for i := 0; i < count; i++ {
    window := Window{}

    window.name = source[8+i*3][0]
    window.visible = ut.loadBool(source[9+i*3])
    window.rect = ut.loadRect(source[10+i*3])

    session.windows = append(session.windows, window)
  }

  return session
}


