// Entry point for the editor.
// TODO: UI HiDPI support
// TODO: Refactor
// (C) skejeton

import (
  "d_drawcmd.um"
  "d_buffer.um" 
  "d_grid.um"
  "../ui/d_debug.um"
  "../ui/d_atoms.um"
  "d_session.um"

  "../d_dbg.um"
  "../d_shortcuts.um"
  "../d_hashname.um"
  "../d_fps.um"
  "../d_world_data.um"
  "../d_global.um"
  "../d_resources.um"
  "../d_problem_screen.um"
  "../d_background.um"
  "../d_world.um"
  "../d_tileset.um"
  "../d_util.um"
  "../d_mouseinput.um"
  "../d_game.um"
  "../d_script.um"
  "../d_immcursor.um"
  "../d_payload_trigger.um"
  "../ui/d_core.um"

  th_font = "font.um"
  th_color = "color.um"
  "../misc/d_strings.um" 

  "window.um"
  "rect.um"
  "th.um"
  "image.um"
  "canvas.um"
  "input.um"
  "signal.um"

  "utf8.um"
  "std.um"
)



type (
  EditorGrid = struct {
    rect: rect.Rect
    scaling: real
    panning: th.Vf2
  }

  ButtonState = struct {
    isOver: bool
    isDown: bool
    isPressed: bool
    isReleased: bool
  }

  Window = struct {
    lastFrameTouched: int
    rect: rect.Rect
    layer: int
  }

  WindowManager = struct {
    topmostWindowLayer: int
    frameNumber: int
    windowCount: int
    windowVisibility: map[str]bool
    windows: map[str]Window
  }

  ScrollAreaInfo = struct {
    areaRect: rect.Rect
    contentRect: rect.Rect
  }

  WindowInfo = struct {
    contentRect: rect.Rect
    titlebarRect: rect.Rect
  }

  EntityListAction = int

  EditorResources = struct {
    toolbarIcons: image.Image
    bevelImage: image.Image
    tilesetImage: image.Image
    superHotFire: image.Image
    mainFont: th_font.Font
  }

  ToolState = struct {
    active: bool
    hovered: bool
  }

  EditorEntities = struct {
    entitySelected: int
    list: []d_world_data.EntityDesc
  }



  Editor = struct {
    // Misc
    isDebugOverlayShown: bool

    // Visual data
    resources: EditorResources

    // Editors
    tilemapGrid: EditorGrid
    tilesetGrid: EditorGrid
    tilemapLayer: int
    tilemapShowAllLayers: bool
    tileSelected: th.Vf2
    tileset: d_tileset.Tileset
    world: d_world.World
    isPlaying: bool
    isRelocatingPlayer: bool
    entityBypass: bool
    entities: EditorEntities
    potentialPortal: str // the portal which is in the text box
    currentPortal: str
    dirty: bool
    enabled: bool
    preChangeWorldData: d_world_data.WorldData

    // UI misc.
    currentWindow: str
    currentWindowLayer: int
    wm: WindowManager
    keepActive: bool

    // UI state
    ui: d_core.Core
  }
)

const (
  entityListActionNone = EntityListAction(0)
  entityListActionRemove = EntityListAction(1)
  entityListActionEdit = EntityListAction(2)
  entityListActionDuplicate = EntityListAction(3)
  entityListActionMoveUp = EntityListAction(4)
  entityListActionMoveDown = EntityListAction(5)
)

fn initWindowManager(): WindowManager {
  return WindowManager{windows: map[str]Window{}}
}

fn (wm: ^WindowManager) isWindowVisible(name: str): bool {
  return validkey(wm.windows, name) && wm.windows[name].lastFrameTouched == wm.frameNumber && wm.windowVisibility[name]
}

fn (wm: ^WindowManager) getWindowRect(name: str, fallback: rect.Rect): ^rect.Rect {
  if validkey(wm.windows, name) {
    wm.windows[name].lastFrameTouched = wm.frameNumber
    return &wm.windows[name].rect
  }
  
  // Create window.
  wm.windowCount += 1
  wm.windows[name] = Window{layer: wm.topmostWindowLayer, rect: fallback, lastFrameTouched: wm.frameNumber}
  wm.topmostWindowLayer++
  return &wm.windows[name].rect
}

fn (wm: ^WindowManager) getWindowLayer(name: str): int {
  if validkey(wm.windows, name) {
    return wm.windows[name].layer 
  } 
  return -1
}

fn (wm: ^WindowManager) putWindowOnFront(name: str) {
  if validkey(wm.windows, name) {
    wm.topmostWindowLayer += 1
    wm.windows[name].layer = wm.topmostWindowLayer
  }
}

fn (wm: ^WindowManager) setWindowVisible(name: str, to: bool) {
  wm.windowVisibility[name] = to
}

// Draw bevel rect(
//   Rectangle to draw,
//   Does rectangle look pushed in,
//   Color tint, the iconic gray is the default
// )
//
// Draws a beveled rectangle in Windows 3.11 style.
// It may have a problem with displaying colors somewhat incorrectly,
//   because the middle of the rectangle is tinted gray slightly.
fn drawBevelRect(editor: ^Editor, r: rect.Rect, pushed: bool = false, color: uint32 = th.white) {
  if (d_payload_trigger.aprilFools()) {
    color = th_color.hsv(th.time/5000.0, 0.9, 1.0)  
  }

  const (
    bevelOuterRect = rect.Rect{0, 0, 32, 32}
    bevelInnerRect = rect.Rect{5, 5, 32-10, 32-10}
   
    bevelPushedOuterRect = rect.Rect{0, 0, 32, 32}
    bevelPushedInnerRect = rect.Rect{5, 5, 32-10, 32-10}
  )

  if pushed {
    editor.ui.ctx.drawNinepatch(editor.resources.bevelImage, bevelPushedOuterRect, bevelPushedInnerRect, r, color)
  } else {
    editor.ui.ctx.drawNinepatch(editor.resources.bevelImage, bevelOuterRect, bevelInnerRect, r, color)
  }
}

fn drawBackdropRect(editor: ^Editor, r: rect.Rect, color: uint32 = 0xFFFFFFFF) {
  editor.ui.ctx.drawRect(color, r)
  editor.ui.ctx.drawRectLines(0x000000FF, r)
}

fn centerTextWithinRect(font: th_font.Font, text: str, r: rect.Rect): th.Vf2 {
  return r.getDims().sub(font.measure(text)).divf(2.0).add(r.getPos()).subf(1)
}

// TODO: Ability to pass colour
fn drawButton(editor: ^Editor, r: rect.Rect, buttonState: ButtonState, revert: bool = false) {
  pushed := buttonState.isDown != revert

  colorMod := 0xFFFFFFFF
  if pushed {
    colorMod = 0xCCCCCCFF
  }

  drawBevelRect(editor, r, pushed, colorMod)
}

fn drawButtonInactive(editor: ^Editor, r: rect.Rect, text: str) {
  editor.ui.ctx.drawRect(0x999999FF, r)
  editor.ui.ctx.drawText(editor.resources.mainFont, text, centerTextWithinRect(editor.resources.mainFont, text, r), 0x000000FF)
}

fn putButton(editor: ^Editor, r: rect.Rect, name: str): ButtonState {
  editor.ui.beginTool(name,  r)

  buttonState := ButtonState{}
  toolState := editor.ui.getCurrentToolState()
  events := editor.ui.endTool()

  if (toolState.active) {
    buttonState.isOver = true
    buttonState.isDown = events.queryMouse(0, d_mouseinput.down) || events.queryMouse(0, d_mouseinput.released)
    buttonState.isPressed = events.queryMouse(0, d_mouseinput.pressed)
    buttonState.isReleased = events.queryMouse(0, d_mouseinput.released) && toolState.hovered
    
    d_immcursor.setCursor(window.cursorFinger)
  }

  return buttonState
}

fn putButtonBase(editor: ^Editor, r: rect.Rect, name: str, revert: bool = false): ButtonState {
  bs := putButton(editor, r, name)
  drawButton(editor, r, bs, revert)
  return bs
}

fn uiBeginWindow(editor: ^Editor, title: str, r: rect.Rect): (WindowInfo, bool) {
  const (
    padding = 0
    titlebarHeight = 20
  )

  var (
    contentRect: rect.Rect
    titlebarRect: rect.Rect
    movement: th.Vf2
  )

  windowRect := editor.wm.getWindowRect(title, r)
  
  if windowRect.x >= d_global.screen.w-25 {
    windowRect.x = d_global.screen.w-25
  }

  if windowRect.x < -windowRect.w+10 {
    windowRect.x = -windowRect.w+10
  }

  if windowRect.y >= d_global.screen.h-25 {
    windowRect.y = d_global.screen.h-25
  }

  if windowRect.y < -10 {
    windowRect.y = -10
  }

  if (d_payload_trigger.aprilFools()) {
    windowRect.x += cos(th.time/100.0)
    windowRect.y += sin(th.time/100.0)
  }

  if !editor.wm.isWindowVisible(title) {
    // Prevent from getting pruned
    editor.ui.freezeTool(title)

    return WindowInfo{}, false
  }
  if editor.currentWindow != "" {
    error("BeginWindow is called before EndWindow")
  }

  editor.currentWindow = title
  // FIXME: This is a hack around windows being able to change their layers mid drawing.
  //        Which would de-sync the results from getWindowLayer.
  editor.currentWindowLayer = editor.wm.getWindowLayer(title)

  position := th.Vf2{padding, padding}

  editor.ui.ctx.moveLayer(1000*editor.currentWindowLayer)
  // Frame tool.
  editor.ui.beginTool(title, windowRect^)
  {
    drawBackdropRect(editor, d_util.rectShrink(windowRect^, -3), 0xCCCCCCFF)
    drawBackdropRect(editor, windowRect^)

    buttonSize := th.Vf2{titlebarHeight, titlebarHeight}
    buttonRect := rect.mk(position.x+windowRect.x, position.y+windowRect.y, buttonSize.x, buttonSize.y)

    {
      if (putButtonBase(editor, buttonRect, "Close").isReleased) {
        editor.wm.setWindowVisible(title, false)
      }
  
      editor.ui.ctx.drawRect(th.black, rect.mk(position.x+windowRect.x+5, position.y+windowRect.y+titlebarHeight/2-1, buttonSize.x-10, 2))
      position.x += buttonSize.x + padding
    }
    
    {
      handleSize := th.Vf2{windowRect.w - position.x - padding, titlebarHeight}
      titlebarRect = rect.mk(position.x+windowRect.x, position.y+windowRect.y, handleSize.x-1, handleSize.y)

      // Titlebar tool.
      {
        editor.ui.beginTool("Titlebar", titlebarRect)
        events := editor.ui.endTool()

        if (events.queryMouse(0, d_mouseinput.pressed)) {
          editor.wm.putWindowOnFront(title)
        }
        if (events.queryMouse(0, d_mouseinput.down)) {
          movement = events.mouseState.delta
        }
      }

      editor.ui.ctx.drawRect(0x000077FF, titlebarRect)
      editor.ui.ctx.beginScissorRect(titlebarRect)
        editor.ui.ctx.drawText(editor.resources.mainFont, title, centerTextWithinRect(editor.resources.mainFont, title, titlebarRect), th.white)
        titlebarRect.x += 1
        editor.ui.ctx.drawText(editor.resources.mainFont, title, centerTextWithinRect(editor.resources.mainFont, title, titlebarRect), th.white)
      editor.ui.ctx.endScissor()
    
      position.x += handleSize.x + padding
    }

    position.x = 0
    position.y += titlebarHeight

    contentSize := th.Vf2{windowRect.w - position.x - padding, windowRect.h - position.y - padding}
    contentRect = rect.mk(position.x+windowRect.x, position.y+windowRect.y, contentSize.x-1, contentSize.y-1)

    editor.ui.beginTool("Body", contentRect)
  }

  windowRect ^= d_util.rectMove(windowRect^, movement)

  return WindowInfo{contentRect: contentRect, titlebarRect: titlebarRect}, true
}

fn uiEndWindow(editor: ^Editor) {
  if editor.currentWindow == "" {
    error("EndWindow has no match with BeginWindow")
  }

  title := editor.currentWindow
  movement := th.Vf2{0, 0} // Same as movement but changes the window size
  squishing := th.Vf2{0, 0} // Same as movement but changes the window size
  windowRect := editor.wm.getWindowRect(title, rect.mk(0, 0, 0, 0))

  // Finish ui tools.
  {
      events := editor.ui.endTool()

      if (events.queryMouse(0, d_mouseinput.pressed)) {
        editor.wm.putWindowOnFront(title)
      }
      if (events.queryMouse(0, d_mouseinput.down)) {
        movement = events.mouseState.delta
      }

      gripSize := th.Vf2{10, 10}
      gripRect := rect.mk(windowRect.x+windowRect.w-gripSize.x, windowRect.y+windowRect.h-gripSize.y, gripSize.x, gripSize.y)

      {
        editor.ui.beginTool("Grip", gripRect)
        if editor.ui.isCurrentToolActive() {
          d_immcursor.setCursor(window.cursorSizeNWSE)
        }
        events := editor.ui.endTool()
        
        if events.queryMouse(0, d_mouseinput.down) {
          squishing = editor.ui.mouseState.delta
        }
      }

    editor.ui.endTool()
  }
  editor.ui.ctx.moveLayer(-1000*editor.currentWindowLayer)

  windowRect ^= d_util.rectMove(windowRect^, movement)
  windowRect.w += squishing.x; windowRect.h += squishing.y
  // Clamp
  if windowRect.w < 100 {
    windowRect.w = 100
  }
  if windowRect.h < 100 {
    windowRect.h = 100
  }

  editor.currentWindow = ""
}

fn makeGrid(ge: ^EditorGrid): d_grid.Grid {
  return d_grid.Grid{p: ge.panning.add(ge.rect.getDims().divf(2*ge.scaling)).divf(32.0), s: th.Vf2{ge.scaling*32, ge.scaling*32}, bb: ge.rect}
}

fn (ge: ^EditorGrid) mapGrid(pos: th.Vf2): th.Vf2 {
  return makeGrid(ge).toGrid(pos).mulf(32)
}

fn (ge: ^EditorGrid) mapPos(pos: th.Vf2): th.Vf2 {
  return makeGrid(ge).toScreen(pos)
}

type DrawGridRenderGuideCommand = struct {
  guide: d_grid.RenderGuide
  color: uint32
  thickness: real
}

fn (cmd: ^DrawGridRenderGuideCommand) draw(_: d_drawcmd.DrawProperties) {
  d_grid.drawRenderGuide(cmd.guide, cmd.color, cmd.thickness)
}

fn (ge: ^EditorGrid) zoomInto(newScale: real, point: th.Vf2) {
  start := ge.mapGrid(point)
  ge.scaling = newScale
  end := ge.mapGrid(point)

  ge.panning = ge.panning.add(end.sub(start))
}

// Puts editor grid spanning the entire screen
// TODO: Fix scaling
fn (ge: ^EditorGrid) put(editor: ^Editor, rectangle: rect.Rect): th.Vf2 {
  ge.rect = rectangle

  // TODO: Create a new tool instead of quering the state of existing tool. 
  // Then I can use events.queryMouse()
  if editor.ui.isCurrentToolActive() {
    // Handle input
    if editor.ui.mouseState.mmb.isDown || input.isPressed(input.key_space) {
      editor.keepActive = true
      ge.panning = ge.panning.add(editor.ui.mouseState.delta.divf(ge.scaling))
    }
  }

  grid := makeGrid(ge)
  var highlightedTile: th.Vf2

  editor.ui.ctx.beginScissorRect(rectangle)
  {
    editor.ui.ctx.drawCustom(DrawGridRenderGuideCommand{d_grid.mkRenderGuideFromBoundingBox(grid), 0xFFFFFF11, 1})
    highlightedTile = grid.toGrid(editor.ui.mouseState.pos).floor()

    if editor.ui.isCurrentToolActive() {
      p1, p2 := grid.toScreen(highlightedTile), grid.toScreen(highlightedTile.addf(1))
      editor.ui.ctx.drawRect(0xFFFFFF33, rect.mk(p1.x, p1.y, p2.x-p1.x, p2.y-p1.y))
      // Draw highlighted tile
    }

    coordinate := grid.toGridRel(rectangle.getDims().divf(2)).floor()
    coordinateString := sprintf("%+-4g %+-4g", coordinate.x, coordinate.y)

    bottomLeft := th.Vf2{rectangle.x, rectangle.y+rectangle.h}
    bottomLeft.y -= editor.resources.mainFont.measure(coordinateString).y
    editor.ui.ctx.moveLayer(1)
    editor.ui.ctx.drawText(editor.resources.mainFont, coordinateString, bottomLeft, th.white)
    editor.ui.ctx.moveLayer(-1)
  }
  editor.ui.ctx.endScissor()

  return highlightedTile
}

fn putIconButton(editor: ^Editor, name: str, r: rect.Rect, img: image.Image, revert: bool = false): ButtonState {
  bs := putButtonBase(editor, r, name, revert)
  editor.ui.ctx.drawImage(img, th.Transform{p: th.Vf2{r.x, r.y}, s: th.Vf2{1, 1}})
  return bs
}

fn putRadioButton(editor: ^Editor, r: rect.Rect, text: str, revert: bool = false): ButtonState {
  if revert {
    editor.ui.beginTool(text, r)
    if (editor.ui.isCurrentToolActive()) {
      d_immcursor.setCursor(window.cursorNo)
    }
    editor.ui.endTool()
    drawButtonInactive(editor, r, text)
  } else {
    bs := putButtonBase(editor, r, text, revert)
    editor.ui.ctx.drawText(editor.resources.mainFont, text, centerTextWithinRect(editor.resources.mainFont, text, r), th.black)
    return bs
  }
  return ButtonState{}
}

fn putSimpleButton(editor: ^Editor, r: rect.Rect, text: str, revert: bool = false): ButtonState {
  bs := putButtonBase(editor, r, text, revert)
  editor.ui.ctx.drawText(editor.resources.mainFont, d_strings.splitBy(text, '#')[0], centerTextWithinRect(editor.resources.mainFont, text, r), th.black)
  return bs
}

fn insertInputTextIntoOneLineBuffer(buffer: ^d_buffer.Buffer, cursor: ^d_buffer.Cursor, text: str): bool {
  runes := utf8.decode(text)
  dirty := false

  for index, rune in runes {
    
    // Ignore non printable characters.
    if d_util.isprint(uint32(rune)) {
      d_buffer.insertAt(buffer, cursor, rune.encode())
      dirty = true
    }
  }
  
  return dirty
}

fn getFirstLineOfBuffer(buffer: ^d_buffer.Buffer): str {
  if len(buffer.lines) == 0 {
    return ""
  }

  return buffer.lines[0]
}

type SingleLineEdit = struct {
  scrollX: real
  buffer: d_buffer.Buffer
  cursor: d_buffer.Cursor
}

fn initSingleLineEdit(from: str): SingleLineEdit {
  buf :=  d_buffer.Buffer{lines: []str{from}}
  // NOTE: Maxout cursor
  cursor := d_buffer.sanitizeCursor(&buf, d_buffer.Cursor{10000, 10000})

  return SingleLineEdit{0, buf, cursor}
}

fn initBufferFromString(s: str): d_buffer.Buffer {
  return d_buffer.Buffer{lines: []str{s}}
}

fn drawSingleLineEdit(editor: ^Editor, edit: ^SingleLineEdit, r: rect.Rect, drawCursor: bool) {

  editor.ui.ctx.beginScissorRect(r)
  firstLine := getFirstLineOfBuffer(&edit.buffer)
  precursor := d_strings.uniSlice(firstLine, 0, edit.cursor.column)
  precursorMeasured := editor.resources.mainFont.measure(precursor)
  cursorRect := rect.mk(precursorMeasured.x, 0, 1, precursorMeasured.y)
 
  // Make sure the cursor is visible on the screen
  // NOTE: Maybe I shouldn't modify the editor state while drawing eh?
  if (cursorRect.x+cursorRect.w) > (r.w-edit.scrollX) {
    edit.scrollX = -(cursorRect.x+cursorRect.w-r.w)
  }
  if cursorRect.x < -edit.scrollX {
    edit.scrollX = -cursorRect.x
  }

  if r.w > cursorRect.x {
    edit.scrollX = 0
  }

  cursorRect.x += r.x+edit.scrollX
  cursorRect.y += r.y

  if drawCursor {
    editor.ui.ctx.drawRect(th.black, cursorRect)
  }
  editor.ui.ctx.drawText(editor.resources.mainFont, firstLine, r.getPos().add(th.Vf2{edit.scrollX, 0}), th.black)
  editor.ui.ctx.endScissor()
}

// @returns Is dirty
fn putTextEditOneLine(editor: ^Editor, r: rect.Rect, name: str, value: ^str): bool {
  dirty := false
  editor.ui.beginTool(name, r)
    edit := ^SingleLineEdit(editor.ui.getPropertyLazy("Editor", |value| { return initSingleLineEdit(value^) }))
    edit.buffer = initBufferFromString(value^)
    edit.cursor = d_buffer.sanitizeCursor(&edit.buffer, edit.cursor)

    // Handle input.
    if (editor.ui.isCurrentToolActive()) {
      d_immcursor.setCursor(window.cursorIBeam)
      dirty = insertInputTextIntoOneLineBuffer(&edit.buffer, &edit.cursor, input.getStr())
      if input.isJustPressed(input.key_backspace) {
        d_buffer.erase(&edit.buffer, &edit.cursor)
        dirty = true
      }
      // TODO: key_delete doesn't work, why
      if input.isJustPressed(input.key_delete) {
        cursorNext := edit.cursor
        cursorNext.column += 1
        cursorNext = d_buffer.sanitizeCursor(&edit.buffer, cursorNext)
        d_buffer.erase(&edit.buffer, &cursorNext)
        dirty = true
      }
      if input.isJustPressed(input.key_left) {
        edit.cursor = d_buffer.moveCursor(&edit.buffer, edit.cursor, -1, 0)
      }
      if input.isJustPressed(input.key_right) {
        edit.cursor = d_buffer.moveCursor(&edit.buffer, edit.cursor, 1, 0)
      }
    }

    // Draw.
    {
      drawBevelRect(editor, r, true)
      // Draw the inside white
      editor.ui.ctx.drawRect(th.white, d_util.rectShrink(r, 2))

      fontHeight := editor.resources.mainFont.measure(" ").y
      textRect := rect.mk(r.x+5, r.y+(r.h-fontHeight)/2.0, r.w-10, fontHeight)
      drawSingleLineEdit(editor, edit, textRect, editor.ui.isCurrentToolActive())
    }

    // Sync buffer up with the value.
    value ^= getFirstLineOfBuffer(&edit.buffer)
  editor.ui.endTool()

  return dirty
}

fn beginScrollArea(editor: ^Editor, areaRect: rect.Rect, contentSize: th.Vf2): (bool, ScrollAreaInfo) {
  const (
    handleSize = 18
  )

  editor.ui.beginTool("ScrollArea", areaRect)

  scroll := ^real(editor.ui.getProperty("ScrollAreaScroll", 0.0))
  overflow := d_util.clamp(contentSize.y-areaRect.h, 0, contentSize.y)
  scrollValue := d_util.clamp(scroll^, 0, overflow)
  yScrollOverflowFactor := 0.0
  if areaRect.h != 0 {
    yScrollOverflowFactor = contentSize.y/areaRect.h
  }
  doNotTruncateScroll := false

  rightHandleRect := d_util.rectCutRight(areaRect, handleSize)
  editor.ui.ctx.drawRect(0x777777FF, rightHandleRect)

  // If there's yknow, some overflow..
  if yScrollOverflowFactor > 1 {
    thumbHeight := rightHandleRect.h/yScrollOverflowFactor
    thumbGap := (rightHandleRect.h-thumbHeight)
    thumbOffset := thumbGap*(scrollValue/overflow)
    thumbRect := rightHandleRect
    thumbRect.h = thumbHeight
    thumbRect.y += thumbOffset

    thumbState := putButtonBase(editor, d_util.rectShrink(thumbRect, 1), "ScrollbarThumb")
    if thumbState.isDown {
      doNotTruncateScroll = true
      scroll ^+= editor.ui.mouseState.delta.y*yScrollOverflowFactor
    }

  }

  if editor.isDebugOverlayShown {
    // Show where the content ends.
    editor.ui.ctx.moveLayer(1)
    editor.ui.ctx.drawRect(th.magenta, rect.mk(areaRect.x, areaRect.y+contentSize.y, contentSize.x, 1))
    editor.ui.ctx.moveLayer(-1)
  }

  if !doNotTruncateScroll {
    // Clamp the scroll to the valid scroll range.
    scroll^ = d_util.clamp(scroll^, 0, overflow)
  }

  areaRect.w -= handleSize
  areaRect.w += 1 // Account for uneven padding between content and border
  contentRect := areaRect
  contentRect.w -= 1
  contentRect.y -= scrollValue


  return true, ScrollAreaInfo{areaRect: areaRect, contentRect: contentRect}
}

fn endScrollArea(editor: ^Editor) {
  scroll := ^real(editor.ui.getProperty("ScrollAreaScroll", 0.0))
  
  events := editor.ui.endTool()

  scroll ^-= events.queryScroll()*20.0
}

fn portalToPath(portal: str): str {
  return "data/spiel/sc_"+portal+".csv"
}

fn createEditorEntities(): EditorEntities {
  return EditorEntities{list: []d_world_data.EntityDesc{}, entitySelected: -1}
}


fn editorLoadWorld(editor: ^Editor, portal: str): bool {
  d_dbg.logt("ed: loading world")
  if ok, data := d_util.readFileStr(portalToPath(portal)); ok {
    worldData := d_world_data.load(editor.world, data)

    editor.world = worldData.world
    editor.entities.list = worldData.entities
    return true
  } else {
    // TODO(skejeton): maybe I shouldn't initialize empty world like that??!
    editor.world = d_world.fromTileset(editor.world.tileset)
    editor.entities = createEditorEntities()
  }
  return false
}

fn editorSaveWorld(editor: ^Editor) {
  d_dbg.logt("ed: saving world")
  if !d_util.writeFileStr(portalToPath(editor.currentPortal), d_world_data.save(d_world_data.WorldData{editor.world, editor.entities.list})) {
    d_dbg.logt("ed: save failed")
  }
  editor.dirty = false
}

fn editorToggleGame(editor: ^Editor) {
  if (!editor.isPlaying) {
    d_game.start(d_world_data.WorldData{editor.world, editor.entities.list})
    d_script.init()
  }
  editor.isPlaying = !editor.isPlaying
} 

fn putToolbarIconButton(editor: ^Editor, btnName: str, buttonRectangle: ^rect.Rect, ix, iy: int, revert: bool): bool {
  pressed := false
  editor.resources.toolbarIcons.crop(th.Vf2{ix/4.0, iy/4.0}, th.Vf2{(ix+1)/4.0, (iy+1)/4.0})
  if putIconButton(editor, btnName, buttonRectangle^, editor.resources.toolbarIcons, revert).isReleased {
    pressed = true
  }
  buttonRectangle.x += buttonRectangle.w

  return pressed
}

fn putToolbarWindowIconButton(editor: ^Editor, windowName: str, buttonRectangle: ^rect.Rect, ix, iy: int) {
  isVisible := editor.wm.isWindowVisible(windowName)
  if putToolbarIconButton(editor, windowName, buttonRectangle, ix, iy, isVisible) {
    editor.wm.putWindowOnFront(windowName)
    editor.wm.setWindowVisible(windowName, !isVisible)
  }
}

fn getEntitySelectedIndex(entities: ^EditorEntities): int {
  return entities.entitySelected
}

fn getEntitySelected(entities: ^EditorEntities): ^d_world_data.EntityDesc {
  if entities.entitySelected < 0 {
    return null
  }

  return &entities.list[entities.entitySelected]
}

// Puts window toolbar on the bottom of the screen
fn editorPutToolbar(editor: ^Editor) {
  const (
    margin = 0
    padding = 2
    rectangleHeight = 32 + margin * 2 + padding * 2
  )

  rectangle := rect.Rect{margin, d_global.screen.h - rectangleHeight + margin, d_global.screen.w - margin * 2, rectangleHeight - margin * 2}

  if d_payload_trigger.aprilFools() {
    x := 0
    y := rectangle.y - 32

    d_util.imageCropRect(editor.resources.superHotFire, rect.mk(0, (th.time/100%3)*32, 32, 32))

    for i := 0; i < d_global.screen.w/32+1; i++ {
      editor.ui.ctx.drawImage(editor.resources.superHotFire, th.Transform{p: th.Vf2{x+i*32, y}, s: th.Vf2{1, 1}})
    }
  }
  
  editor.ui.beginTool("ToolBar", rectangle)
  {
    if !editor.isPlaying {
      drawBackdropRect(editor, rectangle)
    }

    buttonRectangle := rect.mk(rectangle.x+padding, rectangle.y+padding, rectangle.h-padding*2, rectangle.h-padding*2)

    if putToolbarIconButton(editor, "Play", &buttonRectangle, 1, 1, editor.isPlaying) {
      editorToggleGame(editor)
    }

    if !editor.isPlaying {
      putToolbarWindowIconButton(editor, "Portal", &buttonRectangle, 2, 2)
      putToolbarWindowIconButton(editor, "Tile Picker", &buttonRectangle, 0, 1)
      putToolbarWindowIconButton(editor, "Player Placer", &buttonRectangle, 3, 1)
      putToolbarWindowIconButton(editor, "Entity List", &buttonRectangle, 0, 2)
      if getEntitySelected(&editor.entities) != null {
        putToolbarWindowIconButton(editor, "Entity Editor", &buttonRectangle, 1, 2)
      }

      // Draw Save/Load
      {
        position := rectangle.getEnd()
        position.y -= rectangle.h
        
        position.x -= 80
        if (putSimpleButton(editor, rect.mk(position.x, position.y, 80, rectangle.h), "Save").isReleased) {
          editorSaveWorld(editor)
        }

        position.x -= 80
        if (putSimpleButton(editor, rect.mk(position.x, position.y, 80, rectangle.h), "Load").isReleased) {
          editorLoadWorld(editor, editor.currentPortal)
        }

        position.x -= 120
      }
    }
  }
  editor.ui.endTool()
}

fn isAnyButtonHeld(mouseState: ^d_mouseinput.MouseState): bool {
  return mouseState.lmb.isDown || mouseState.mmb.isDown || mouseState.rmb.isDown
} 

type WorldEditCmd = struct {
  showLayers: uint // 3 bits
  toolbarIcons: image.Image
  rect: rect.Rect
  grid: EditorGrid
  world: ^d_world.World
}

fn (d: ^WorldEditCmd) draw(props: d_drawcmd.DrawProperties) {
  const getcolor = fn (bit: bool): uint32 {
    if bit {
      return 0xFFFFFFFF
    }
    return 0xFFFFFF33
  }

  // d_background.draw(d.rect)
  canvas.drawRect(0x777777FF, d_global.screen)
  colors := []uint32{getcolor(d.showLayers&1>0), getcolor(d.showLayers&2>0), getcolor(d.showLayers&4>0)}

  offset := d.grid.mapPos(th.Vf2{0, 0})

  d.world.drawLayer(offset, -1, d.grid.scaling, colors[0])
  d.world.drawLayer(offset, 0, d.grid.scaling, colors[1])
  d.world.drawLayer(offset, 1, d.grid.scaling, colors[2])

  d.toolbarIcons.crop(th.Vf2{2.0/4.0, 0.0/4.0}, th.Vf2{3.0/4.0, 1.0/4.0})
  pos := d.grid.mapPos(d.world.playerSpawnPos)
  scale := d.grid.scaling
  d.toolbarIcons.draw(th.Transform{p: th.Vf2{pos.x, pos.y}, s: th.Vf2{scale, scale}})
}

fn getShownLayersBitmap(layerSelected: int, showAllLayers: bool): uint {
  return 1<<(layerSelected+1)|(int(showAllLayers)*0x7)
}

fn drawLayerIcon(ctx: ^d_drawcmd.DrawContext, position: th.Vf2, layer: int, showAllLayers: bool) {
  fills := [3]bool{layer == -1, layer == 0, layer == 1}

  // NOTE: If we choose to show all layers, the icon will show all boxes filled in
  if showAllLayers {
    fills = [3]bool{true, true, true}
  }

  position.x += 26

  for i, l in fills {
    rec := rect.Rect{position.x-20, position.y, 20, 12}
    position.x -= 2
    position.y += 4

    if l {
      ctx.drawRect(0xf0b5afFF, rec)
      ctx.drawRectLines(0xFFFFFFFF, rec)
    } else {
      ctx.drawRect(0x99a9a9a9, rec)
      ctx.drawRectLines(0xFFFFFFFF, rec)
    }
  }
}

type GameCmd = struct {}

fn (gc: ^GameCmd) draw(props: d_drawcmd.DrawProperties) {
  d_game.draw()
  d_script.draw()
}

fn putLabelY(editor: ^Editor, text: str, color: uint32, position: ^th.Vf2) {
  editor.ui.ctx.drawText(editor.resources.mainFont, text, position^, color)
  position.y += editor.resources.mainFont.measure(text).y
}

fn putPlayerPlacer(editor: ^Editor) {
  if windowInfo, ok := uiBeginWindow(editor, "Player Placer", rect.mk(5, 5+32*7+20, 32*5, 32*7)); ok { 

    contentRect := d_util.rectShrink(windowInfo.contentRect, 5)
    position := contentRect.getPos()
    playerPos := editor.world.playerSpawnPos

    editor.ui.ctx.beginScissorRect(contentRect)
    {
      putLabelY(editor, sprintf("x %d y %d", trunc(playerPos.x), trunc(playerPos.y)), th.black, &position)
      position.y += 10

      if (putSimpleButton(editor, rect.mk(position.x, position.y, contentRect.w, 30), "Relocate", editor.isRelocatingPlayer).isReleased) {
        editor.isRelocatingPlayer = !editor.isRelocatingPlayer
      }
      position.y += 30+10

      if (editor.isRelocatingPlayer) {
        putLabelY(editor, "Click on the grid\nTo place player.", th.black, &position)
      }
    }
    editor.ui.ctx.endScissor()
    uiEndWindow(editor)
  }
}

fn putTilePicker(editor: ^Editor) {
  if windowInfo, ok := uiBeginWindow(editor, "Tile Picker", rect.mk(5, 5, 32*5, 32*7)); ok { 
    // NOTE: This is to cancel the window-body dragging thing.
    //       Probably not the best way to do it.
    contentRect := windowInfo.contentRect
    var selectedTile: th.Vf2

    editor.ui.beginTool("Picker", contentRect)
    {
      editor.ui.ctx.drawRect(0x222222FF, contentRect)
      editor.ui.ctx.moveLayer(1)
      {
        imgDims := editor.tileset.image.getDims()
        newSelectedTile := editor.tilesetGrid.put(editor, contentRect)
        if !(newSelectedTile.x < 0 || newSelectedTile.y < 0 ||
           newSelectedTile.x >= imgDims.x/(imgDims.x/4) || newSelectedTile.y >= imgDims.y/(imgDims.x/4)) {
          selectedTile = newSelectedTile
        } else {
          selectedTile = editor.tileSelected
        }

        selectedTilePos := editor.tilesetGrid.mapPos(editor.tileSelected)
        
        editor.ui.ctx.beginScissorRect(contentRect)
        editor.ui.ctx.drawRectLines(th_color.alpha(th.green, 0.6), rect.mk(selectedTilePos.x, selectedTilePos.y, 32, 32), 1)
        editor.ui.ctx.endScissor()
      }
      editor.ui.ctx.moveLayer(-1)
      editor.ui.ctx.beginScissorRect(contentRect)

      editor.tileset.image.crop(th.Vf2{0, 0}, th.Vf2{1, 1})
      editor.ui.ctx.drawImage(editor.tileset.image, th.Transform{s: th.Vf2{0.5, 0.5}, p: editor.tilesetGrid.mapPos(th.Vf2{0, 0})})
      editor.ui.ctx.endScissor()
    }
    events := editor.ui.endTool()

    if events.queryMouse(0, d_mouseinput.down) {
      editor.tileSelected = selectedTile
    }

    uiEndWindow(editor)
  }
}

fn putEntityEntry(editor: ^Editor, ent: d_world_data.EntityDesc, r: rect.Rect, selected: bool): EntityListAction  {
  r.w -= 60
  action := entityListActionNone

  editor.ui.beginTool(ent.id, r)
  {
    if (putSimpleButton(editor, r, ent.name).isReleased) {
      action = entityListActionEdit
    }
    if selected {
      editor.ui.ctx.drawRectLines(th.yellow, d_util.rectShrink(r, 1))
    }
    r.x += r.w
    r.w = 30
    r.h = 15
    if putSimpleButton(editor, r, "▲").isReleased {
      action = entityListActionMoveUp
    }
    r.y += 15
    if putSimpleButton(editor, r, "▼").isReleased {
      action = entityListActionMoveDown
    }
    r.y -= 15
    r.h = 30
    r.x += 30
    if input.isPressed(input.key_shift) {
      if putSimpleButton(editor, r, "␡").isReleased {
        action = entityListActionRemove
      }
    } else {
      if putSimpleButton(editor, r, "⎘").isReleased {
        action = entityListActionDuplicate
      }
    }
  }
  editor.ui.endTool()

  return action
}

fn appendEntity(editorEntities: ^EditorEntities, entity: d_world_data.EntityDesc) {
  editorEntities.list = append(editorEntities.list, entity)
} 

fn removeEntity(editorEntities: ^EditorEntities, index: int) {
  // Unselect the entity
  if index == editorEntities.entitySelected { 
    editorEntities.entitySelected = -1
  }
  // Shift the selected entity index down if entity below to be removed
  if index < editorEntities.entitySelected { 
    editorEntities.entitySelected -= 1
  }
  editorEntities.list = delete(editorEntities.list, index)
}

fn findEntity(entities: []d_world_data.EntityDesc, id: str): bool {
  for i, entity in entities {
    if entity.id == id {
      return true
    }
  }
  return false
}

fn allocateEntityId(entities: []d_world_data.EntityDesc): str {
  id := d_hashname.random()
  for findEntity(entities, id) {
    d_dbg.logt("allocateEntityId: regenerating id!!")
    id = d_hashname.random()
  }
  return id
}

/*
 * \brief Creates a random entity with a random ID and name, empty tags
 */
fn makeRandomEntity(id: str): d_world_data.EntityDesc {
  return d_world_data.EntityDesc{name: id, id: id, tags: ""}
}

/*
 * \brief Creates an entity with same name and id, empty tags
 */
fn makeNamedEntity(name: str): d_world_data.EntityDesc {
  return d_world_data.EntityDesc{name: name, id: name, tags: ""}
}

fn selectEntity(entities: ^EditorEntities, index: int) {
  entities.entitySelected = index
}

fn isEntitySelected(entities: ^EditorEntities, index: int): bool {
  return entities.entitySelected == index
}

fn initEntityAtCenter(editor: ^Editor, ent: d_world_data.EntityDesc): d_world_data.EntityDesc {
  ent.rect = rect.Rect{-editor.tilemapGrid.panning.x-16, -editor.tilemapGrid.panning.y-16, 32, 32}
  return ent
}

fn cloneEntity(entities: []d_world_data.EntityDesc, ent: d_world_data.EntityDesc): d_world_data.EntityDesc {
  ent.id = allocateEntityId(entities)
  return ent
}

fn putEntityList(editor: ^Editor) {
  entryRemoveIndex := -1
  moveFrom := -1
  moveTo := -1

  if windowInfo, ok := uiBeginWindow(editor, "Entity List", rect.mk(800-200-5, 5, 200, 200)); ok {
    // Apply padding.
    contentRect := d_util.rectShrink(windowInfo.contentRect, 5)

    // Put add button.
    {
      buttonRect := d_util.rectCutRight(windowInfo.titlebarRect, 20)

      if (putSimpleButton(editor, buttonRect, "+").isReleased) {
        appendEntity(&editor.entities, initEntityAtCenter(editor, makeRandomEntity(allocateEntityId(editor.entities.list))))
        selectEntity(&editor.entities, len(editor.entities.list)-1)
      }
    }

    // Put entries.
    {
      // Get content size.
      contentSize := ^th.Vf2(editor.ui.getProperty("ContentSize", th.Vf2{0, 0}))

      if ok, scrollAreaInfo := beginScrollArea(editor, contentRect, contentSize^); ok {
        editor.ui.ctx.beginScissorRect(scrollAreaInfo.areaRect)
        entryRect := scrollAreaInfo.contentRect
        entryRect.h = 30
        for i, ent in editor.entities.list {
          switch putEntityEntry(editor, ent, entryRect, isEntitySelected(&editor.entities, i)) {
            case entityListActionMoveUp:
              moveFrom = i
              moveTo = i-1
              editor.dirty = true
            case entityListActionMoveDown:
              moveFrom = i
              moveTo = i+1
              editor.dirty = true
            case entityListActionRemove:
              entryRemoveIndex = i
              editor.dirty = true
            case entityListActionEdit:
              selectEntity(&editor.entities, i)
              editor.wm.setWindowVisible("Entity Editor", true)
              editor.wm.putWindowOnFront("Entity Editor")
            case entityListActionDuplicate:
              appendEntity(&editor.entities, cloneEntity(editor.entities.list, ent))
              editor.dirty = true
          }
          entryRect.y += 30
        }

        contentSize ^= th.Vf2{entryRect.w, entryRect.y-scrollAreaInfo.contentRect.y}
        editor.ui.ctx.endScissor()
        endScrollArea(editor)
      }
    }

    uiEndWindow(editor)
  }

  if moveFrom != -1 && moveTo != -1 && moveFrom < len(editor.entities.list) && moveTo < len(editor.entities.list) {
    if getEntitySelectedIndex(&editor.entities) == moveFrom {
      selectEntity(&editor.entities, moveTo)
    }
  
    ent := editor.entities.list[moveFrom]
    editor.entities.list[moveFrom] = editor.entities.list[moveTo]
    editor.entities.list[moveTo] = ent
  }

  if entryRemoveIndex != -1 {
    removeEntity(&editor.entities, entryRemoveIndex)
    editor.dirty = true
  }
}

fn putEntityEditor(editor: ^Editor) {
  entitySelected := getEntitySelected(&editor.entities)

  if entitySelected != null {
    if windowInfo, ok := uiBeginWindow(editor, "Entity Editor", rect.mk(800-200-5, 5+200+5, 200, 220)); ok {
      contentRect := d_util.rectShrink(windowInfo.contentRect, 5)

      editor.ui.ctx.beginScissorRect(contentRect)
      position := contentRect.getPos()
      putLabelY(editor, "Name", th.black, &position)
      editor.dirty = putTextEditOneLine(editor, rect.mk(position.x, position.y, contentRect.w, 30), "Name", &entitySelected.name) || editor.dirty
      position.y += 30
      putLabelY(editor, "Id", th.black, &position)
      editor.dirty = putTextEditOneLine(editor, rect.mk(position.x, position.y, contentRect.w, 30), "Id", &entitySelected.id) || editor.dirty
      position.y += 30
      putLabelY(editor, "Tags", th.black, &position)
      editor.dirty = putTextEditOneLine(editor, rect.mk(position.x, position.y, contentRect.w, 30), "Tags", &entitySelected.tags) || editor.dirty
      position.y += 30
      position.y += 10
      if putSimpleButton(editor, rect.mk(position.x, position.y, contentRect.w, 30), "Delete").isReleased {
        removeEntity(&editor.entities, getEntitySelectedIndex(&editor.entities))
        editor.dirty = true
      } 
      editor.ui.ctx.endScissor()

      uiEndWindow(editor)
    }
  }
}

type RectResizeCommand = struct {
  posFactor: th.Vf2   // Factor to multiply MouseDelta by to move the rectangle
  sizeFactor: th.Vf2  // Factor to multiply MouseDelta by to resize the rectangle
}

type EditGrip = struct {
  position: th.Vf2
  resizeCommand: RectResizeCommand
}

fn putRectGrips(editor: ^Editor, r: rect.Rect): RectResizeCommand {
  // Grips positions are initialized as relative here.
  // Will be multiplied by rect.w/h and added rect.x/y to them.
  const eightGrips = [8]EditGrip{
    EditGrip{th.Vf2{0.0, 0.0}, RectResizeCommand{th.Vf2{1, 1}, th.Vf2{-1, -1}}}, // x
    EditGrip{th.Vf2{0.5, 0.0}, RectResizeCommand{th.Vf2{0, 1}, th.Vf2{ 0, -1}}}, // x
    EditGrip{th.Vf2{1.0, 0.0}, RectResizeCommand{th.Vf2{0, 1}, th.Vf2{ 1, -1}}}, // x

    EditGrip{th.Vf2{0.0, 0.5}, RectResizeCommand{th.Vf2{1, 0}, th.Vf2{-1,  0}}},
    EditGrip{th.Vf2{1.0, 0.5}, RectResizeCommand{th.Vf2{0, 0}, th.Vf2{ 1,  0}}},

    EditGrip{th.Vf2{0.0, 1.0}, RectResizeCommand{th.Vf2{1, 0}, th.Vf2{-1,  1}}}, // x
    EditGrip{th.Vf2{0.5, 1.0}, RectResizeCommand{th.Vf2{0, 0}, th.Vf2{ 0,  1}}}, // x
    EditGrip{th.Vf2{1.0, 1.0}, RectResizeCommand{th.Vf2{0, 0}, th.Vf2{ 1,  1}}}} // x

  activeGrip := -1

  for i, grip in eightGrips {
    gripPos := r.getDims().mul(grip.position).add(r.getPos())
    gripRect := rect.mk(gripPos.x-6, gripPos.y-6, 12, 12)
    gripDrawRect := d_util.rectShrink(gripRect, 2)

    editor.ui.beginTool(sprintf("Grip%d", i), gripRect)

    if editor.ui.isCurrentToolActive() {
      cursor := window.cursorSizeAll
      switch i {
      case 0, 7: cursor = window.cursorSizeNWSE
      case 2, 5: cursor = window.cursorSizeSWNE
      case 1, 6: cursor = window.cursorSizeNS
      case 3, 4: cursor = window.cursorSizeEW
      }
      d_immcursor.setCursor(cursor)
    }
 
    color := th.blue

    if editor.ui.isCurrentToolActive() {
      color = th.cyan
    }

    editor.ui.ctx.drawRect(color, gripDrawRect)
    editor.ui.ctx.drawRectLines(th.black, gripDrawRect)

    events := editor.ui.endTool()

    if events.queryMouse(0, d_mouseinput.down) {
      activeGrip = i
    }
  }

  if activeGrip == -1 {
    return RectResizeCommand{}
  }

  return eightGrips[activeGrip].resizeCommand
}

fn applyRectResizeCommand(resizeCommand: RectResizeCommand, r: rect.Rect, delta: th.Vf2): rect.Rect {
  r.x += delta.x * resizeCommand.posFactor.x
  r.y += delta.y * resizeCommand.posFactor.y
  r.w += delta.x * resizeCommand.sizeFactor.x
  r.h += delta.y * resizeCommand.sizeFactor.y
  return r
}

fn drawTaggedEntityRect(editor: ^Editor, entity: ^d_world_data.EntityDesc, r: rect.Rect, tags: ^d_game.TagSet) {
  if tags.isSet("Guide") {
    editor.ui.ctx.drawRectLines(th.yellow, r)
  } else {
    editor.ui.ctx.drawRect(th.red, r)
  }

  if tags.isSet("Comment") {
    size := editor.resources.mainFont.measure(entity.name)
    entity.rect.w = size.x
    entity.rect.h = size.y
    editor.ui.ctx.drawText(editor.resources.mainFont, entity.name, th.Vf2{r.x, r.y}, th.white, editor.tilemapGrid.scaling)
  }
}

fn adjustEntityRect(editor: ^Editor, tags: ^d_game.TagSet, ent: ^d_world_data.EntityDesc): rect.Rect {
  r := ent.rect

  if r.w < 10 {
    r.w = 10
  }
  if r.h < 10 {
    r.h = 10
  }

  if tags.isSet("Comment") {
    size := editor.resources.mainFont.measure(ent.name)
    r.w = size.x
    r.h = size.y
  }

  return r
}

fn putWorldEntities(editor: ^Editor) {
  for i in editor.entities.list {
    ent := &editor.entities.list[i]

    entVisRect := d_util.rectMove(d_util.rectScale(ent.rect, editor.tilemapGrid.scaling), editor.tilemapGrid.mapPos(th.Vf2{0, 0}))

    // FIXME: Initializing tag set every time we render an entity is not efficent at all.
    tags := d_game.initTagSetFromString(ent.tags)
    ignore := tags.isSet("Guide") && editor.entityBypass && !isEntitySelected(&editor.entities, i)

    drawTaggedEntityRect(editor, ent, entVisRect, &tags)

    if !ignore {
      editor.ui.beginTool("Ent"+ent.id, entVisRect)

      if editor.ui.isCurrentToolActive() {
        d_immcursor.setCursor(window.cursorSizeAll)
      }

      if editor.ui.isCurrentToolActive() {
        editor.ui.ctx.drawRectLines(th.blue, d_util.rectShrink(entVisRect, -1))
      }

      if isEntitySelected(&editor.entities, i) {
        dx, dy := 0, 0  
        if input.isJustPressed(input.key_up) {
          dy += -1
        }
        if input.isJustPressed(input.key_down) {
          dy += 1 
        }
        if input.isJustPressed(input.key_right) {
          dx += 1
        }
        if input.isJustPressed(input.key_left) {
          dx += -1 
        }
        if dx != 0 {
          ent.rect.x += dx*32
          ent.rect.x = 32*round(ent.rect.x/32)
          editor.dirty = true
        }
        if dy != 0 {
          ent.rect.y += dy*32
          ent.rect.y = 32*round(ent.rect.y/32)
          editor.dirty = true
        }

        editor.ui.ctx.drawRectLines(th.yellow, d_util.rectShrink(entVisRect, 0))

        rectCmd := putRectGrips(editor, entVisRect)
        delta := editor.ui.mouseState.delta.divf(editor.tilemapGrid.scaling)

        ent.rect = applyRectResizeCommand(rectCmd, ent.rect, delta)

        adjusted := adjustEntityRect(editor, &tags, ent)
        sizeD := adjusted.getDims().sub(ent.rect.getDims())
        ent.rect = adjusted 

        ent.rect.x -= rectCmd.posFactor.x*sizeD.x
        ent.rect.y -= rectCmd.posFactor.y*sizeD.y
      }

      events := editor.ui.endTool()

      if events.queryMouse(0, d_mouseinput.pressed) {
        selectEntity(&editor.entities, i)
        editor.wm.setWindowVisible("Entity Editor", true)
        editor.wm.putWindowOnFront("Entity Editor")
      }
      if events.queryMouse(0, d_mouseinput.down) {
        ent.rect.x += events.mouseState.delta.x/editor.tilemapGrid.scaling
        ent.rect.y += events.mouseState.delta.y/editor.tilemapGrid.scaling
        editor.dirty = true
      }
    }
  }
}

fn deselectEntity(entities: ^EditorEntities) {
  entities.entitySelected = -1
}

fn loadPortal(editor: ^Editor, portal: str) {
  editor.currentPortal = portal
  editor.potentialPortal = portal
  editorLoadWorld(editor, portal)
  editor.tilemapGrid.panning = editor.world.playerSpawnPos.mulf(-32)
}

fn putPortalEditor(editor: ^Editor) {
  if windowInfo, ok := uiBeginWindow(editor, "Portal", rect.mk(180, 5, 200, 300)); ok {
    contentRect := d_util.rectShrink(windowInfo.contentRect, 5)
    position := contentRect.getPos()

    putTextEditOneLine(editor, rect.mk(position.x, position.y, contentRect.w, 30), "Portal name", &editor.potentialPortal)

    position.y += 40
    if input.isPressed(input.key_shift) {
      if putSimpleButton(editor, rect.mk(position.x, position.y, contentRect.w, 30), "Load").isReleased {
        loadPortal(editor, editor.potentialPortal)
      }
    } else {
      drawButtonInactive(editor, rect.mk(position.x, position.y, contentRect.w, 30), "Hold shift!")
    }

    uiEndWindow(editor)
  }
}

fn loadEditorResources(rl: ^d_resources.ResourceLoader): EditorResources

fn showErrorScreenIfResourcesFailedToLoad(rl: ^d_resources.ResourceLoader): bool {
  if d_resources.hasErrors(rl) {
    d_problem_screen.showResourceLoadingError(rl)
    return true
  }
  return false
}


fn updateZoom(init: real, plus: real): real {
  zoom := init+(init*plus)

  return d_util.clamp(zoom, 0.5, 10)
}

fn editorPutUi(editor: ^Editor) {
  // Clear the input sink.
  editor.ui.inputSink = d_core.InputSink{}

  if input.isPressed(input.key_ctrl) {
    if input.isJustPressedc('s') {
      input.clearc('s')
      editorSaveWorld(editor)
    }
    if input.isJustPressedc('d') {
      input.clearc('d')
      for w in editor.wm.windows {
        editor.wm.setWindowVisible(w, false)
      }
    }
  }

  if input.isPressed(input.key_shift) {
    if input.isJustPressed(input.key_escape) {
      input.clear(input.key_escape)
      editor.isDebugOverlayShown = !editor.isDebugOverlayShown
    }
  } 

  if (input.isJustPressed(input.key_escape)) {
    deselectEntity(&editor.entities)
  }

  if (input.isJustPressed(input.key_delete)) {
    input.clear(input.key_delete)
    if editor.entities.entitySelected > 0 {
      removeEntity(&editor.entities, editor.entities.entitySelected)
      editor.dirty = true
    }
  }

  editor.ui.mouseState = editor.ui.mouseState.updated()

  editor.ui.frameNumber += 1
  // put ui
  if editor.isPlaying {
    if editor.enabled {
      if input.isJustPressed(input.key_escape) {
        editor.isPlaying = !editor.isPlaying 
      } 
    }

    d_game.update()
    d_script.update()

    editor.ui.ctx.drawCustom(GameCmd{})
  } else {
    tool := editor.ui.beginTool("TileEditor", rect.mk(0, 0, d_global.screen.w, d_global.screen.h-38))

    if editor.ui.isCurrentToolActive() {
      if input.isPressed(input.key_ctrl) && input.isJustPressedc('i') {
        appendEntity(&editor.entities, initEntityAtCenter(editor, makeRandomEntity(allocateEntityId(editor.entities.list))))
      }
    }

    selectedTile := editor.tilemapGrid.put(editor, tool.rect)

    // Draw ToggleAll/FG/MG/BG buttons.
    {
      const padding = 10
      const elementSize = 30

      editor.ui.ctx.moveLayer(-1)
      editor.ui.ctx.drawCustom(WorldEditCmd{getShownLayersBitmap(editor.tilemapLayer, editor.tilemapShowAllLayers), editor.resources.toolbarIcons, tool.rect, editor.tilemapGrid, &editor.world})
      editor.ui.ctx.moveLayer(1)
      putWorldEntities(editor)

      position := tool.rect.getEnd().subf(padding).subf(elementSize)
      if (putSimpleButton(editor, rect.mk(position.x, position.y, elementSize, elementSize), "R/U").isReleased) {
        editor.wm.windows = {}
      }
      position.x -= elementSize

      if (putSimpleButton(editor, rect.mk(position.x, position.y, elementSize, elementSize), "> <").isReleased) {
        editor.tilemapGrid.panning = th.Vf2{0, 0}
      }
      position.x -= elementSize

      if (putSimpleButton(editor, rect.mk(position.x, position.y, elementSize, elementSize), "1:1").isReleased) {
        editor.tilemapGrid.zoomInto(1.0, d_util.rectCenter(editor.tilemapGrid.rect))
      }
      position.x -= elementSize

      if (putRadioButton(editor, rect.mk(position.x, position.y, elementSize, elementSize), "BG", editor.tilemapLayer == -1).isReleased) {
        editor.tilemapLayer = -1
      }
      position.x -= elementSize

      if (putRadioButton(editor, rect.mk(position.x, position.y, elementSize, elementSize), "MG", editor.tilemapLayer == 0).isReleased) {
        editor.tilemapLayer = 0
      }
      position.x -= elementSize

      if (putRadioButton(editor, rect.mk(position.x, position.y, elementSize, elementSize), "FG", editor.tilemapLayer == 1).isReleased) {
        editor.tilemapLayer = 1
      }
      position.x -= elementSize

      if (putSimpleButton(editor, rect.mk(position.x, position.y, elementSize, elementSize), "#Layer Select", editor.tilemapShowAllLayers).isReleased) {
        editor.tilemapShowAllLayers = !editor.tilemapShowAllLayers
      }

      drawLayerIcon(&editor.ui.ctx, position.add(th.Vf2{1, 5}), editor.tilemapLayer, editor.tilemapShowAllLayers)
      position.x -= elementSize

      if (putSimpleButton(editor, rect.mk(position.x, position.y, elementSize, elementSize), "✋", editor.entityBypass).isReleased) {
        editor.entityBypass = !editor.entityBypass
      }
    }


    events := editor.ui.endTool()
    
    scroll := events.queryScroll()
    if scroll != 0 {
      editor.tilemapGrid.zoomInto(updateZoom(editor.tilemapGrid.scaling, scroll/10.0), events.mouseState.pos)
    }

    if editor.isRelocatingPlayer {
      if (events.queryMouse(0, d_mouseinput.down)) {
        editor.world.playerSpawnPos = selectedTile
        editor.dirty = true
      }
      if (events.queryMouse(0, d_mouseinput.released)) {
        editor.isRelocatingPlayer = false
      }
    } else {
      if events.queryMouse(0, d_mouseinput.down) {
        editor.world.setTile(editor.tilemapLayer, trunc(selectedTile.x), trunc(selectedTile.y), editor.tileset.tileToPos(trunc(editor.tileSelected.x), trunc(editor.tileSelected.y)))
        editor.dirty = true
      }
      if events.queryMouse(2, d_mouseinput.down) {
        editor.world.setTile(editor.tilemapLayer, trunc(selectedTile.x), trunc(selectedTile.y), 0)
        editor.dirty = true
      }
    }
  }
  
  if editor.enabled {
    editorPutToolbar(editor)
  }

  if !editor.isPlaying {
    putTilePicker(editor)
    putPlayerPlacer(editor)
    putEntityList(editor)
    putEntityEditor(editor)
    putPortalEditor(editor)
  }

  if editor.isRelocatingPlayer {
    editor.ui.ctx.moveLayer(10000000)
    editor.resources.toolbarIcons.crop(th.Vf2{2.0/4.0, 0.0/4.0}, th.Vf2{3.0/4.0, 1.0/4.0})
    editor.ui.ctx.drawImage(editor.resources.toolbarIcons, d_util.posTrans(editor.ui.mouseState.pos.x, editor.ui.mouseState.pos.y))
    editor.ui.ctx.moveLayer(-10000000)
  }

  if d_dbg.consolevis {
    editor.ui.ctx.moveLayer(100000000)
    tool := editor.ui.beginTool("Console", d_global.screen)
    if editor.ui.hoveredTool == tool {
      d_dbg.scrollConsole(editor.ui.mouseState.scroll.y)
    }
    editor.ui.endTool()
    editor.ui.ctx.moveLayer(-100000000)
  }
 
  // put debug overlays
  if (editor.isDebugOverlayShown) {
    d_debug.putDebugFrames(&editor.ui, editor.resources.mainFont, &editor.ui.ctx)
  }

  // flush render context
  editor.ui.ctx.flush()

  // swap frame census
  if !isAnyButtonHeld(&editor.ui.mouseState) && !editor.keepActive {
    editor.ui.activeTool = editor.ui.maybeActiveTool
  }
  editor.keepActive = false
  editor.ui.hoveredTool = editor.ui.maybeActiveTool
  editor.ui.maybeActiveTool = null
  editor.ui.pruneToolsRecursive(editor.ui.tools)
}


fn loadEditorResources(rl: ^d_resources.ResourceLoader): EditorResources {

  editorResources := EditorResources {
    bevelImage: d_resources.loadImage(rl, "data/img/ui_7button.png"),
    tilesetImage: d_resources.loadImage(rl, "data/img/ts_sky.png"),
    toolbarIcons: d_resources.loadImage(rl, "data/img/ui_trayicons.png"),
    superHotFire: d_resources.loadImage(rl, "data/img/SUPER HOT FIRE WTF.png"),
    mainFont: d_resources.loadFont(rl, "data/font/monospace.ttf", 16, 0)}
 
  editorResources.tilesetImage.setfilter(1)
  editorResources.toolbarIcons.setfilter(1)
  editorResources.superHotFire.setfilter(1)

  return editorResources
}

fn editorInit(resources: EditorResources): Editor {
  rootNode := new(d_atoms.ToolNode)
  rootNode ^= d_atoms.ToolNode{children: map[str]^d_atoms.ToolNode{}}

  tileset := d_tileset.fromImage(resources.tilesetImage, 32, 32, 2)
  tileset.setTileProperties(30, {invisible: true})
  tileset.setTileProperties(31, {invisible: true})

  world := d_world.fromTileset(tileset)

  ui := d_core.Core{
    ctx: d_drawcmd.init(),
    tools: rootNode
  }

  return Editor{
    ui: ui,
    tilemapGrid: EditorGrid{scaling: 1.0},
    tilesetGrid: EditorGrid{scaling: 1.0},
    tilemapShowAllLayers: false,
    entityBypass: true,
    tileset: tileset,
    world: world,
    resources: resources,
    entities: createEditorEntities(),
    wm: initWindowManager()
  }
}

fn editorSaveSession(editor: ^Editor): d_session.Session {
  session := d_session.Session{}
  session.pan = editor.tilemapGrid.panning
  session.scale = editor.tilemapGrid.scaling
  session.portal = editor.currentPortal
  session.allLayers = editor.tilemapShowAllLayers
  session.entityBypass = editor.entityBypass
  session.layerSelected = editor.tilemapLayer
  session.tileSelected  = editor.tileSelected

  for name, win in editor.wm.windows {
    isVisible := editor.wm.windowVisibility[name]

    session.windows = append(session.windows, d_session.Window{name, isVisible, win.rect})
  }

  return session
}

fn editorLoadSession(editor: ^Editor, session: d_session.Session) {
  loadPortal(editor, session.portal)
  editor.tilemapGrid.panning = session.pan
  editor.tilemapGrid.scaling = session.scale
  editor.tilemapShowAllLayers = session.allLayers
  editor.entityBypass = session.entityBypass
  editor.tilemapLayer = session.layerSelected
  editor.tileSelected = session.tileSelected 
  
  for i, win in session.windows {
    editor.wm.setWindowVisible(win.name, win.visible)
    editor.wm.getWindowRect(win.name, win.rect)
  }
}

fn drawShadowText*(font: th_font.Font, text: str, pos: th.Vf2) {
  font.draw(text, pos.add(th.Vf2{0, 1}), th.black)
  font.draw(text, pos.add(th.Vf2{0, 0}), th.white)
}

fn editorMain*(enabled: bool) {
  d_global.screen = rect.mk(0, 0, 800, 600)
  window.setup("Editor", trunc(d_global.screen.w), trunc(d_global.screen.h))
  
  d_dbg.initConsole()

  d_dbg.logt(
    "              [ _ _]\n"+
    "              [ ----]\n"+
    "     _/\\/\\/\\_/ /\n"+
    "   _|         /\n"+
    " _|  (  | (  |\n"+
    "/__.-'|_|--|_|\n"
  )
  // init data
  rl := new(d_resources.ResourceLoader)
  rl ^= d_resources.initResourceLoader()
  d_background.init(rl)
  d_game.init(rl)
  editorResources := loadEditorResources(rl)
  if showErrorScreenIfResourcesFailedToLoad(rl) {
    return
  }

  editor := new(Editor)
  editor ^= editorInit(editorResources)
  editor.enabled = enabled

  if ok, sessionFile := d_util.readFileStr("user/session.csv"); ok {
    editorLoadSession(editor, d_session.load(sessionFile))
  } else {
    loadPortal(editor, "mfldentr")
  }

  if (!enabled) {
    editorToggleGame(editor)
  }

  window.onFrame.register(|editor| {
    d_immcursor.setCursor(window.cursorDefault)

    if d_global.end {
      const preDemoText = "Thanks for playing the pre-demo"

      canvas.drawRect(th.black, d_global.screen)
      pos := centerTextWithinRect(editor.resources.mainFont, preDemoText, d_global.screen)
    
      editor.resources.mainFont.draw(preDemoText, pos, th.white)
      return
    }


    std.srand(std.time())
    d_shortcuts.console()
    d_shortcuts.fullscreen()
    
    if input.isPressed(input.key_fn25) {
      error("The F25 key? What's that?")
    }

    if input.isPressedc('1') {
      d_dbg.logt("Console log!")
    }

    d_fps.update()
    


    d_global.screen = rect.mk(0, 0, window.w, window.h)
    window.setViewport(d_global.screen.getDims())

    editorPutUi(editor)
    d_dbg.drawConsole(editor.resources.mainFont)

    infoText := ""

    if (d_payload_trigger.aprilFools()) {
      infoText += sprintf("%.3fspf", 1/d_fps.getFps())+"\n"
      drawShadowText(editor.resources.mainFont, infoText, th.Vf2{0, 1})
    } else {
      infoText += sprintf("%dfps", trunc(d_fps.getFps()))+"\n"
    }

    infoText += sprintf("%d frameskip", trunc(d_game.frameSkips))+"\n"
    infoText += sprintf("%s", editor.dirty ? "Dirty" : "Not Dirty")+"\n"
    infoText += "v0.2.3_02"+"\n"
    drawShadowText(editor.resources.mainFont, infoText, th.Vf2{0, 0})
  })

  window.onDestroy.register(|editor| {
    // TODO: What if the directory doesn't exist?
    // TODO: Make directory create function
    d_util.writeFileStr("user/session.csv", d_session.save(editorSaveSession(editor)))
    d_atoms.disconnectAllNodes(editor.ui.tools)
  })
}
