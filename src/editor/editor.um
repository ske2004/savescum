// (C) skejeton

import (
  "window.um"
  "rect.um"
  "th.um"
  "image.um"
  "canvas.um"
  "input.um"
  "coll.um"
  "std.um"

  "../ui/notification.um"
  "../ui/implvtbl.um"
  "../ui/ui.um"
  "../ui/themer.um"
  "session.um"

  "../dbg/dbg.um"
  "../shared/shortcuts.um"
  "../misc/hashname.um"
  "../dbg/fps.um"
  "../game/world_data.um"
  "../shared/global.um"
  "../data/resources.um"
  "../gfx/background.um"
  "../game/world.um"
  "atlas.um"
  "../misc/util.um"
  "../game/game.um"
  "../game/script.um"
  "../misc/immcursor.um"
  "../shared/payload_trigger.um"
  debug_info = "../dbg/info.um"
  render_debug_info = "../dbg/render.um"
  "../gfx/drawcmd.um"
  "grid.um"

  "font.um"
  "../misc/strings.um"

  "../../umbox/os/os.um"
)

type (
  // HACK: Should editor handle the gameplay?
  EditorMode = enum {
    editor
    gameplay
  }

  EntityListAction = enum {
    none
    remove
    edit
    duplicate
    moveUp
    moveDown
  }

  EditorResources = struct {
    toolbarIcons: image::Image
    tilesetImage: image::Image
    superHotFire: image::Image
    mainFont:     font::Font
  }

  EditorEntities = struct {
    entitySelected: int
    list:           []world_data::EntityDesc
  }

  Editor = struct {
    // Misc
    debugTimerStarted: bool
    debugTimerOrigin:  int
    debugTimer:        int
    showDebugInfo:     bool
    showUiDebugInfo:   bool
    dimDebugInfo:      bool

    // Visual data
    resources: EditorResources

    // Editors
    tilemapGrid:          grid::Grid
    tilesetGrid:          grid::Grid
    tilemapLayer:         int
    tilemapShowAllLayers: bool
    tileSelected:         th::Vf2
    tileset:              atlas::Atlas
    world:                world::World
    isPlaying:            bool
    isRelocatingPlayer:   bool
    entityBypass:         bool
    entities:             EditorEntities
    potentialRoom:        str // the room which is in the text box
    currentRoom:          str
    dirty:                bool
    mode:                 EditorMode
    entitySearch:         str

    // UI state
    ui: ^ui::UI
  }
) 

fn updateZoom(init: real, plus: real): th::Vf2 {
  zoom := util::clamp(init+(init*plus), 8, 128)

  return {zoom, zoom}
}

fn roomToPath(room: str): str {
  return "data/spiel/sc_"+room+".csv"
}

fn createEditorEntities(): EditorEntities {
  return EditorEntities{list: []world_data::EntityDesc{}, entitySelected: -1}
}


fn editorLoadRoom(editor: ^Editor, room: str): bool {
  dbg::logt("ed: loading world")
  if data, err := util::readFileStr(roomToPath(room)); err.code == 0 {
    worldData := world_data::load(editor.world, data)
    editor.world = worldData.world
    editor.entities.list = worldData.entities
    editor.entities.entitySelected = -1
    return true
  } else {
    // @TODO: maybe I shouldn't initialize empty world like that??!
    editor.world = world::fromTileset(editor.world.tileset)
    editor.entities = createEditorEntities()
  }
  return false
}

fn editorSaveRoom(editor: ^Editor) {
  dbg::logt("ed: saving world")
  err := util::writeFileStr(roomToPath(editor.currentRoom), world_data::save(world_data::WorldData{editor.world, editor.entities.list}))
  if err.code != 0 {
    dbg::logt("ed: save failed: "+err.msg)
    notification::put({.error, "Failed to save: "+err.msg})
  }
  editor.dirty = false
}

fn editorToggleGame(editor: ^Editor) {
  if !editor.isPlaying {
    editor.debugTimerStarted = true
    editor.debugTimerOrigin = th::time
    editor.debugTimer = 0
    game::start(world_data::WorldData{editor.world, editor.entities.list})
    script::init()
  } else {
    editor.debugTimerStarted = false
    game::stop()
  }
  editor.isPlaying = !editor.isPlaying
}

fn getEntitySelectedIndex(entities: ^EditorEntities): int {
  return entities.entitySelected
}

fn getEntitySelected(entities: ^EditorEntities): ^world_data::EntityDesc {
  if entities.entitySelected < 0 {
    return null
  }

  return &entities.list[entities.entitySelected]
}

type WorldEditCmd = struct {
  showLayers: uint // 3 bits
  rect: rect::Rect
  grid: grid::Grid
  world: ^world::World
}

fn (d: ^WorldEditCmd) draw(props: drawcmd::DrawProperties) {
  const getcolor = fn (bit: bool): uint32 {
    if bit {
      return 0xFFFFFFFF
    }
    return 0xFFFFFF33
  }

  // background.draw(d.rect)
  canvas::drawRect(0x777777FF, d.rect)
  colors := []uint32{getcolor(d.showLayers&1>0), getcolor(d.showLayers&2>0), getcolor(d.showLayers&4>0)}

  offset := d.grid.toScreen(th::Vf2{0, 0})

  // TODO: 2D scaling?
  d.world.drawLayer(offset, -1, d.grid.s.x/32.0, colors[0])
  d.world.drawLayer(offset, 0, d.grid.s.x/32.0, colors[1])
  d.world.drawLayer(offset, 1, d.grid.s.x/32.0, colors[2])
}

fn getShownLayersBitmap(layerSelected: int, showAllLayers: bool): uint {
  return 1<<(layerSelected+1)|(int(showAllLayers)*0x7)
}

fn drawLayerIcon(rect: rect::Rect, layer: int, showAllLayers: bool) {
  fills := [3]bool{layer == -1, layer == 0, layer == 1}

  // NOTE: If we choose to show all layers, the icon will show all boxes filled in
  if showAllLayers {
    fills = [3]bool{true, true, true}
  }

  scale := rect.h/48.0

  position := rect.centerWithinRect({0, 0, 24*scale, 36*scale}).getPos()

  position.x += 26*scale

  for i, l in fills {
    rec := rect::Rect{position.x-27*scale, position.y+3*scale, 30*scale, 18*scale}
    position.x -= 3*scale
    position.y += 6*scale

    if l {
      canvas::drawRect(0xf0b5afFF, rec)
      canvas::drawRectLines(0xFFFFFFFF, rec, 1)
    } else {
      canvas::drawRect(0x99a9a9a9, rec)
      canvas::drawRectLines(0xFFFFFFFF, rec, 1)
    }
  }
}

type GameCmd = struct {}

fn (gc: ^GameCmd) draw(props: drawcmd::DrawProperties) {
  game::draw()
  script::draw()
}

fn appendEntity(editorEntities: ^EditorEntities, entity: world_data::EntityDesc) {
  editorEntities.list = append(editorEntities.list, entity)
}

fn removeEntity(editorEntities: ^EditorEntities, index: int) {
  // Unselect the entity
  if index == editorEntities.entitySelected {
    editorEntities.entitySelected = -1
  }
  // Shift the selected entity index down if entity below to be removed
  if index < editorEntities.entitySelected {
    editorEntities.entitySelected -= 1
  }
  editorEntities.list = delete(editorEntities.list, index)
}

fn findEntity(entities: []world_data::EntityDesc, id: str): bool {
  for i, entity in entities {
    if entity.id == id {
      return true
    }
  }
  return false
}

fn allocateEntityId(entities: []world_data::EntityDesc): str {
  id := hashname::random()
  for findEntity(entities, id) {
    dbg::logt("allocateEntityId: regenerating id!!")
    id = hashname::random()
  }
  return id
}

fn makeRandomEntity(id: str): world_data::EntityDesc {
  return world_data::EntityDesc{name: id, id: id, tags: ""}
}

fn selectEntity(entities: ^EditorEntities, index: int) {
  entities.entitySelected = index
}

fn isEntitySelected(entities: ^EditorEntities, index: int): bool {
  return entities.entitySelected == index
}

fn initEntityAtCenter(editor: ^Editor, ent: world_data::EntityDesc): world_data::EntityDesc {
  ent.rect = rect::Rect{-editor.tilemapGrid.p.x*32-16, -editor.tilemapGrid.p.y*32-16, 32, 32}
  return ent
}

fn cloneEntity(entities: []world_data::EntityDesc, ent: world_data::EntityDesc): world_data::EntityDesc {
  ent.id = allocateEntityId(entities)
  return ent
}

fn doEntityAction(ui: ^ui::UI, editor: ^Editor, action: EntityListAction, i: int) {
  entryRemoveIndex := -1
  moveFrom := -1
  moveTo := -1

  pmoveFrom := &moveFrom
  pmoveTo := &moveTo
  pentryRemoveIndex := &entryRemoveIndex

  switch action {
    case .moveUp:
      pmoveFrom ^= i
      pmoveTo ^= i-1
      editor.dirty = true
    case .moveDown:
      pmoveFrom ^= i
      pmoveTo ^= i+1
      editor.dirty = true
    case .remove:
      pentryRemoveIndex ^= i
      editor.dirty = true
    case .edit:
      selectEntity(&editor.entities, i)
      implvtbl::VTBLImpl(ui.vtbl).wm.show("Entity Editor")
    case .duplicate:
      appendEntity(&editor.entities, cloneEntity(editor.entities.list, editor.entities.list[i]))
      pmoveFrom ^= len(editor.entities.list)-1
      pmoveTo ^= i+1
      selectEntity(&editor.entities, pmoveFrom^)
      editor.dirty = true
  }

  if moveFrom != -1 && moveTo != -1 && moveFrom < len(editor.entities.list) && moveTo < len(editor.entities.list) {
    if getEntitySelectedIndex(&editor.entities) == moveFrom {
      selectEntity(&editor.entities, moveTo)
    }

    ent := editor.entities.list[moveFrom]
    editor.entities.list[moveFrom] = editor.entities.list[moveTo]
    editor.entities.list[moveTo] = ent
  }

  if entryRemoveIndex != -1 {
    removeEntity(&editor.entities, entryRemoveIndex)
    editor.dirty = true
  }
}

type RectResizeCommand = struct {
  posFactor: th::Vf2   // Factor to multiply MouseDelta by to move the rectangle
  sizeFactor: th::Vf2  // Factor to multiply MouseDelta by to resize the rectangle
}

type EditGrip = struct {
  position: th::Vf2
  resizeCommand: RectResizeCommand
}

fn applyRectResizeCommand(resizeCommand: RectResizeCommand, r: rect::Rect, delta: th::Vf2): rect::Rect {
  r.x += delta.x * resizeCommand.posFactor.x
  r.y += delta.y * resizeCommand.posFactor.y
  r.w += delta.x * resizeCommand.sizeFactor.x
  r.h += delta.y * resizeCommand.sizeFactor.y
  return r
}

fn drawTaggedEntityRect(editor: ^Editor, entity: ^world_data::EntityDesc, r: rect::Rect, tags: ^game::TagSet) {
  if tags.isSet("Guide") {
    canvas::drawRectLines(th::yellow, r)
  } else if tags.isSet("Comment") {
    size := editor.resources.mainFont.measure(entity.name)
    entity.rect.w = size.x
    entity.rect.h = size.y
    editor.resources.mainFont.draw(entity.name, th::Vf2{r.x, r.y}, th::white, editor.tilemapGrid.s.x/32)
  } else {
    if !game::drawEntityObject(entity.name, tags, r, editor.tilemapGrid.s.x/32) {
      canvas::drawRect(th::red, r)
    }
  }
}

fn adjustEntityRect(editor: ^Editor, tags: ^game::TagSet, ent: ^world_data::EntityDesc): rect::Rect {
  r := ent.rect

  if r.w < 10 {
    r.w = 10
  }
  if r.h < 10 {
    r.h = 10
  }

  if tags.isSet("Comment") {
    size := editor.resources.mainFont.measure(ent.name)
    r.w = size.x
    r.h = size.y
  }

  return r
}

fn loadRoom(editor: ^Editor, room: str) {
  editor.currentRoom = room
  editor.potentialRoom = room
  editorLoadRoom(editor, room)
}

type GridInteraction = struct {
  placed:  bool
  removed: bool
  pos:     th::Vf2
}

fn putGrid(grid: ^grid::Grid, ui: ^ui::UI): GridInteraction {
  ps := &GridInteraction{}

  ui.col(|ps, grid| {
    ui.pushIdStr("Grid")

    // @TODO: Panning with middle mouse btn.
    if ui.isActive() {
      if input::isPressed(.mouse2) {
        grid::gridPan(grid, input::getMouseDelta())
      }
      if input::isPressed(.mouse1) {
        ps.placed = true
        ps.pos = grid.toGrid(input::getMousePos()).floor()
      }
      if input::isPressed(.mouse3) {
        ps.removed = true
        ps.pos = grid.toGrid(input::getMousePos()).floor()
      }
    }

    hovered := false
    if ui.isHovered() {
      hovered = true
      wheel := input::getMouseScroll().y
      grid::gridZoomInto(grid, updateZoom(grid.s.x, wheel/10.0), input::getMousePos())
    }

    ui.drawCustom(|ui, hovered, grid| {
      // @TODO: Scaling is not proportional to UI
      grid.bb = dest
      grid.o = dest.getDims().divf(2)
      grid.draw(0xFFFFFF11, 1)
      if hovered {
        gridPos := grid.toGrid(input::getMousePos()).floor()
        screenPos1 := grid.toScreen(gridPos)
        screenPos2 := grid.toScreen(gridPos.add({1, 1}))
        canvas::drawRect(0xFFFFFF22, {screenPos1.x, screenPos1.y, screenPos2.x-screenPos1.x, screenPos2.y-screenPos1.y})

        // Draw hovered over coordinates.
        coordinates := sprintf("%v, %v", gridPos.x, gridPos.y)
        coordinatesTxtSz := ui.font.measure(coordinates).mulf(ui.io.scale)
        coordinatesTxtPos := th::Vf2{dest.x+10*ui.io.scale, dest.y+(dest.h-coordinatesTxtSz.y-10*ui.io.scale)}
        ui.font.draw(coordinates, coordinatesTxtPos, th::white, ui.io.scale)
      }
    })
    ui.popId()
  })

  return ps^
}

fn (editor: ^Editor) putNotifications(ui: ^ui::UI) {
  // @TODO: Instead of having a zerowidth cell, I should have cellPos
  ui.cellRect({0, 0, 0, 0})
  ui.col(|editor| {

    ns := notification::get()

    for i in ns {
      n := ns[len(ns^)-i-1]
      ui.row(|n, editor| {
        ui.boxStyle(.notification)
        // @MARK(UiResourceManagment)
        ui.img2(editor.resources.toolbarIcons, {24*int(n.info.icon), 144, 24, 24})
        // @HACK Padding
        ui.label(" ")
        ui.label(n.info.message)
      }).padding = 10
    }
  }).padding = 5
}

fn (editor: ^Editor) putEntityEditor(ui: ^ui::UI) {
  entitySelected := getEntitySelected(&editor.entities)

  if entitySelected != null {
    ui.window("Entity Editor", |editor, entitySelected| {
      ui.cellStretch()
      ui.cellAlign(0.5)

      tags := game::initTagSetFromString(entitySelected.tags)

      if tags.isSet("Comment") {
        ui.row(|editor, entitySelected| {
          ui.cellJustify(0.5)
          ui.label("Comment")
          ui.cellJustify(1)
          editor.dirty = ui.textEditSingle("Comment", &entitySelected.name) || editor.dirty
        })
      }

      ui.cellStretch()
      ui.cellAlign(0.5)
      ui.row(|editor, entitySelected| {
        ui.cellJustify(0.5)
        ui.label("Id")
        ui.cellJustify(1)
        editor.dirty = ui.textEditSingle("Id", &entitySelected.id) || editor.dirty
      })

      ui.cellStretch()
      ui.cellAlign(0.5)
      ui.row(|editor, entitySelected| {
        ui.cellJustify(0.5)
        ui.label("Tags")
        ui.cellJustify(1)
        editor.dirty = ui.textEditSingle("Tags", &entitySelected.tags) || editor.dirty
      })

      ui.spring(1)

      ui.cellStretch()
      if editor.ui.button("Delete") {
        removeEntity(&editor.entities, getEntitySelectedIndex(&editor.entities))
        editor.dirty = true
      }
    })
  }
}

fn matchSearch(needle: str, haystack: str): bool {
  return strings::search(strings::toLowerS(needle), strings::toLowerS(haystack))
}

fn matchEnt(ent: ^world_data::EntityDesc, query: str): bool {
  return matchSearch(query, ent.id) ||
         matchSearch(query, ent.tags)
}

fn (editor: ^Editor) putEntityList(ui: ^ui::UI) {
  ui.window("Entity List", |editor| {
    _actions := map[int]EntityListAction{}
    actions := &_actions

    ui.cellStretch()
    ui.textEditSingle("Search", &editor.entitySearch)

    ui.cellStretch()
    ui.cellJustify(1)
    ui.cellClip()
    ui.scrollArea( |editor, actions| {
      for i, ent in editor.entities.list {
        if !matchEnt(&ent, editor.entitySearch) {
          continue
        }

        ui.cellStretch()
        ui.row(|editor, actions, ent, i| {
          action := EntityListAction.none

          if i == editor.entities.entitySelected {
            ui.drawCustom({
              // @TODO: This isn't very visible now since the other cover it.
              canvas::drawRectLines(0xFFFF00FF, dest, 4)
            })
          }

          ui.pushIdStr(ent.id)
          ui.cellStretch()
          ui.cellJustify(1)
          if ui.button(ent.id) { action = .edit }
          if ui.button("▲") { action = .moveUp }
          if ui.button("▼") { action = .moveDown }

          if input::isPressed(.shift) {
            if ui.button("␡") { action = .remove }
          } else {
            if ui.button("⎘") { action = .duplicate }
          }
          ui.popId()

          if action != .none {
            actions[i] = action
          }
        })
      }
    })

    // @HACK There should be a better way to put elements on the titlebar.
    r := implvtbl::VTBLImpl(ui.vtbl).wm.windows["Entity List"].viewRect
    buttonRect := rect::Rect{r.x+r.w-34-5, r.y+5, 34, 34}
    ui.cellUnclip()
    ui.cellRect(buttonRect)
    if ui.button("+") {
      appendEntity(&editor.entities, initEntityAtCenter(editor, makeRandomEntity(allocateEntityId(editor.entities.list))))
      editor.dirty = true
    }

    // For now, only one action can be applied at a time, due to indexing.
    std::assert(len(_actions) < 2)

    for i, action in actions {
      doEntityAction(ui, editor, action, i)
    }
  })
}

fn (editor: ^Editor) putToolbar(ui: ^ui::UI) {
  ui.cellJustify(1)
  ui.row(|editor| {
    if !editor.isPlaying {
      ui.boxStyle(.toolbar)
    }

    windowBtn := fn (name: str, rect: rect::Rect) |ui, editor| {
      if ui.button2(name, |editor, rect| {ui.img2(editor.resources.toolbarIcons, rect)}, implvtbl::VTBLImpl(ui.vtbl).wm.isOpen(name) ? ui::buttonFlagPushed : 0) {
        implvtbl::VTBLImpl(ui.vtbl).wm.toggle(name)
      }
    }

    iconBtn := fn (name: str, rect: rect::Rect, flags: uint = 0): bool |ui, editor| {
      return ui.button2(name, |editor, rect| {ui.img2(editor.resources.toolbarIcons, rect)}, flags)
    }

    // @TODO: Remove the hardcoded texture regions.
    if iconBtn("Play", {48, 48, 48, 48}, editor.isPlaying ? ui::buttonFlagPushed : 0) {
      editorToggleGame(editor)
    }

    windowBtn("Console", {48, 0, 48, 48})
    // @TODO: Add level list
    if editor.isPlaying {
      windowBtn("Level Select", {48*3, 48*3, 48, 48}) 
      return
    }

    // @TODO: Gray out of window is open.
    windowBtn("Tile Picker", {48*0, 48, 48, 48}) 
    windowBtn("Entity List", {48*0, 48*2, 48, 48})

    if editor.entities.entitySelected != -1 {
      windowBtn("Entity Editor", {48*1, 48*2, 48, 48})
    }

    ui.spring(1)
    ui.cellStretch()
    ui.cellSameSize()
    if editor.entityBypass { ui.cellColor(0x777777FF) }
    if ui.button("🔒") {
      editor.entityBypass = !editor.entityBypass
    }
    ui.cellStretch()
    ui.cellSameSize()
    layersPressed := ui.button2("Layers", |editor| {
      ui.drawCustom(|editor| {
        drawLayerIcon(dest, editor.tilemapLayer, editor.tilemapShowAllLayers)
      })
    })
    if layersPressed {
      editor.tilemapShowAllLayers = !editor.tilemapShowAllLayers
    }
    ui.cellStretch()
    ui.cellSameSize()
    if editor.tilemapLayer == 1 { ui.cellColor(0x777777FF) }
    if ui.button("FG") { editor.tilemapLayer = 1 }
    ui.cellStretch()
    ui.cellSameSize()
    if editor.tilemapLayer == 0 { ui.cellColor(0x777777FF) }
    if ui.button("MG") { editor.tilemapLayer = 0 }
    ui.cellStretch()
    ui.cellSameSize()
    if editor.tilemapLayer == -1 { ui.cellColor(0x777777FF) }
    if ui.button("BG") { editor.tilemapLayer = -1 }
    ui.cellStretch()
    ui.cellSameSize()
    if ui.button("> <") {
      editor.tilemapGrid.p = {0, 0}
      editor.tilemapGrid.s = {48, 48}
    }
    ui.spring(1)


    windowBtn("Room", {48*2, 48*2, 48, 48}) 
    windowBtn("Settings", {96, 192, 48, 48})
  }).padding = 5

  if !editor.isPlaying {
    editor.putEntityEditor(ui)
    editor.putEntityList(ui)

    ui.window("Settings", {
      ui.cellStretch()
      if ui.button("Reset UI") {
        implvtbl::VTBLImpl(ui.vtbl).wm.reset()
      }
    }, true)

    ui.window("Room", |editor| {
      ui.label("Room name: ")
      
      ui.cellAlign(0.5)
      ui.cellStretch()
      ui.row(|editor| {
        ui.cellJustify(1)
        ui.textEditSingle("Room name", &editor.potentialRoom)
        if ui.button("Load") {
          loadRoom(editor, editor.potentialRoom)
        }
      })

      ui.cellStretch()
      if ui.button("Save") {
        editorSaveRoom(editor)
      }
      ui.cellStretch()
      if ui.button("Reload") {
        editorLoadRoom(editor, editor.currentRoom)
      }
    })

    ui.window("Tile Picker", |editor| {
      ui.cellJustify(1)
      ui.cellStretch()
      interaction := putGrid(&editor.tilesetGrid, ui)

      if interaction.placed {
        editor.tileSelected = interaction.pos
      }

      ui.drawCustom(|editor| {
        canvas::drawRect(0x222222FF, dest)
        editor.tileset.i.crop(th::Vf2{0, 0}, th::Vf2{1, 1})
        editor.tileset.i.draw({p: editor.tilesetGrid.toScreen({0, 0}), s: editor.tilesetGrid.s.divf(64)})

        p := editor.tilesetGrid.toScreen(editor.tileSelected)
        canvas::drawRectLines(0x00FF0099, {p.x, p.y, editor.tilesetGrid.s.x, editor.tilesetGrid.s.y}, 1)
      })
    })
  } else {
    ui.window("Level Select", |editor| {
      ui.cellStretch()
      ui.cellJustify(1)
      ui.scrollArea(|editor| {
        type Level = struct { id, name: str }

        levels := []Level{}

        for i, ent in editor.entities.list {
          if strings::startsWith(ent.id, "stage") {
            levels = append(levels, Level{ent.id, ent.name})
          }
        }

        sort(levels, true, id)

        for i, level in levels {
          ui.cellStretch()
          if ui.button(level.name) {
            game::tele(level.id)
          }
        }
      })
    })
  }

  ui.window("Console", {
    // @TODO: This will block the window dragging, to fix that I should implement a way to mask which events are handled by the element.
    ui.pushIdStr("Console")

    if ui.isHovered() {
      dbg::scrollConsole(input::getMouseScroll().y)
    }

    ui.drawCustom(|ui| {
      dbg::drawConsole(dest, ui.font, ui.io.scale)
    })

    ui.popId()
  })
}

fn (editor: ^Editor) putRectGrips(ui: ^ui::UI, r: rect::Rect): RectResizeCommand {
  // Grips positions are initialized as relative here.
  // Will be multiplied by rect.w/h and added rect.x/y to them.
  const eightGrips = []EditGrip{
    {{0.0, 0.0}, {{1, 1}, {-1, -1}}}, // x
    {{0.5, 0.0}, {{0, 1}, { 0, -1}}}, // x
    {{1.0, 0.0}, {{0, 1}, { 1, -1}}}, // x

    {{0.0, 0.5}, {{1, 0}, {-1,  0}}},
    {{1.0, 0.5}, {{0, 0}, { 1,  0}}},

    {{0.0, 1.0}, {{1, 0}, {-1,  1}}}, // x
    {{0.5, 1.0}, {{0, 0}, { 0,  1}}}, // x
    {{1.0, 1.0}, {{0, 0}, { 1,  1}}}  // x
  }

  activeGrip := -1
  activeGripPtr := &activeGrip

  for i, grip in eightGrips {
    gripPos := r.getDims().mul(grip.position).add(r.getPos())
    gripRect := rect::Rect{gripPos.x-6, gripPos.y-6, 12, 12}

    ui.cellRect(gripRect)
    ui.row(|i, activeGripPtr| {
      ui.pushIdStr(sprintf("Grip%d", i))

      if ui.isHovered() {
        cursor := window::Cursor.sizeAll
        switch i {
        case 0, 7: cursor = .sizeNWSE
        case 2, 5: cursor = .sizeSWNE
        case 1, 6: cursor = .sizeNS
        case 3, 4: cursor = .sizeEW
        }
        immcursor::setCursor(cursor)
      }
    
      color := th::blue

      if ui.isActive() {
        color = th::cyan
        activeGripPtr ^= i
      }

      ui.drawCustom(|color| {
        canvas::drawRect(color, dest.shrink({2, 2}))
        canvas::drawRectLines(th::black, dest.shrink({2, 2}))
      })

      ui.popId()
    })
  }

  if activeGrip == -1 {
    return RectResizeCommand{}
  }

  return eightGrips[activeGrip].resizeCommand
}

fn (editor: ^Editor) putWorldEntities(ui: ^ui::UI) {
  del := -1
  delPtr := &del

  for i, ent^ in editor.entities.list {
    entSnappedRect := ent.rect
    if input::isPressed(.ctrl) && (input::isPressed(.mouse1) || input::isJustReleased(.mouse1)) && editor.entities.entitySelected == i {
      entSnappedRect = rect::Rect{
        round(ent.rect.x/32.0)*32,
        round(ent.rect.y/32.0)*32,
        round(ent.rect.w/32.0)*32,
        round(ent.rect.h/32.0)*32
      }
    }
    
    entVisRect := util::rectScale(entSnappedRect, editor.tilemapGrid.s.x/32).shift(editor.tilemapGrid.toScreen(th::Vf2{0, 0}))

    uiVisRect := entVisRect

    uiVisRect.x /= ui.io.scale
    uiVisRect.y /= ui.io.scale
    uiVisRect.w /= ui.io.scale
    uiVisRect.h /= ui.io.scale

    if !coll::rectToRect(uiVisRect, ui.io.screen) {
      continue
    }

    // @FIXME: Initializing tag set every time we render an entity is not efficient at all.
    tags_ := game::initTagSetFromString(ent.tags)
    tags := new(game::TagSet, tags_)
    ignore := tags.isSet("Guide") && editor.entityBypass && !isEntitySelected(&editor.entities, i)

    ui.cellRect(uiVisRect)
    ui.row(|i, ignore, editor, ent, uiVisRect, entVisRect, tags, delPtr, entSnappedRect| {
      hovered := false
      focused := false

      if !ignore {
        ui.pushIdStr(sprintf("Ent%v", ent))

        if ui.isActive() {
          if input::isPressed(.mouse2) {
            // @HACK: This is a hack to have the tilemap editor pan.
            grid::gridPan(&editor.tilemapGrid, input::getMouseDelta())
          }
          if input::isPressed(.mouse1) {
            editor.dirty = true
            ent.rect = ent.rect.shift(input::getMouseDelta().divf(editor.tilemapGrid.s.x/32))
          }
        }
        if input::isJustReleased(.mouse1) {
          ent.rect = entSnappedRect
        }

        if ui.isFocused() {
          focused = true

          dx, dy := 0, 0
          if input::isPressedRepeat(.up) {
            dy += -1
            input::clear(.up)
          }
          if input::isPressedRepeat(.down) {
            dy += 1
            input::clear(.down)
          }
          if input::isPressedRepeat(.right) {
            dx += 1
            input::clear(.right)
          }
          if input::isPressedRepeat(.left) {
            dx += -1
            input::clear(.left)
          }
          if input::isPressed(.alt) {
            if dx != 0 {
              ent.rect.w += dx*32
              ent.rect.w = 32*round(ent.rect.w/32)
              editor.dirty = true
            }
            if dy != 0 {
              ent.rect.h += dy*32
              ent.rect.h = 32*round(ent.rect.h/32)
              editor.dirty = true
            }
          } else {
            if dx != 0 {
              ent.rect.x += dx*32
              ent.rect.x = 32*round(ent.rect.x/32)
              editor.dirty = true
            }
            if dy != 0 {
              ent.rect.y += dy*32
              ent.rect.y = 32*round(ent.rect.y/32)
              editor.dirty = true
            }
          }

          if input::isJustPressed(.delete) {
            delPtr ^= i
          }

          if input::isPressed(.mouse1) {
            doEntityAction(ui, editor, .edit, i)
          }
        }

        if editor.entities.entitySelected == i {
          rectCmd := editor.putRectGrips(ui, uiVisRect)
          delta := input::getMouseDelta().div(editor.tilemapGrid.s).mulf(32)

          ent.rect = applyRectResizeCommand(rectCmd, ent.rect, delta)

          adjusted := adjustEntityRect(editor, tags, ent)
          sizeD := adjusted.getDims().sub(ent.rect.getDims())
          ent.rect = adjusted

          ent.rect.x -= rectCmd.posFactor.x*sizeD.x
          ent.rect.y -= rectCmd.posFactor.y*sizeD.y
        }

        hovered = ui.isHovered()

        if hovered {
          // @HACK: This should be done in UI event interception.
          wheel := input::getMouseScroll().y
          grid::gridZoomInto(&editor.tilemapGrid, updateZoom(editor.tilemapGrid.s.x, wheel/10.0), input::getMousePos())
        }

        ui.popId()
      }

      ui.drawCustom(|focused, hovered, editor, ent, entVisRect, tags| {
        drawTaggedEntityRect(editor, ent, entVisRect, tags)
        if hovered {
          canvas::drawRectLines(0xFFFF00FF, entVisRect)
        }
        if focused {
          canvas::drawRectLines(0x00FFFFFF, entVisRect.shrink({-1, -1}))
        }
      })
    })
  }

  if del != -1 {
    removeEntity(&editor.entities, del)
  }
}

fn (editor: ^Editor) putUi(ui: ^ui::UI) {
  ui.col(|editor| {
    ui.cellJustify(1)
    if !editor.isPlaying {
      ui.row(|editor| {
        ui.pushIdStr("Tilemap Editor")

        ui.cellStretch()
        ui.cellJustify(1)
        interaction := putGrid(&editor.tilemapGrid, ui)
        
        editor.putWorldEntities(ui)

        // @TODO: Deduplicate
        if interaction.placed {
          sx, sy := floor(interaction.pos.x), floor(interaction.pos.y)
          tile := editor.tileset.index(editor.tileSelected)
          // @TODO: I don't understand the "2" offset here.
          if tile > -2 {
            editor.world.setTile(editor.tilemapLayer, sx, sy, tile+2)
          }
        }

        if interaction.removed {
          sx, sy := floor(interaction.pos.x), floor(interaction.pos.y)
          editor.world.setTile(editor.tilemapLayer, sx, sy, 0)
        }

        ui.drawCustom(|editor| {
          WorldEditCmd{
            getShownLayersBitmap(editor.tilemapLayer, editor.tilemapShowAllLayers),
            dest,
            editor.tilemapGrid,
            &editor.world
          }.draw({})
        })

        ui.popId()
      }, ui.io.screen.w)
    } else {
      ui.row({
        ui.pushIdStr("Gameplay")
        ui.drawCustom({
          game::update()
          GameCmd{}.draw({})
        })
        ui.popId()
      })
    }
    ui.row(|editor| {
      editor.putToolbar(ui)
    }, ui.io.screen.w)
  }, ui.io.screen.h)

  editor.putNotifications(ui)

  ui.cellRect({0, 0, 0, 0})
  ui.row(|editor| {
    // @TODO: Figure out a right place for cursor rendering and things like that.
    ui.drawCustom(|editor| {
      window::showCursor(!editor.isRelocatingPlayer)
      if editor.isRelocatingPlayer {
        editor.resources.toolbarIcons.cropRect({96, 0, 48, 48})
        editor.resources.toolbarIcons.draw({s: {1, 1}, p: input::getMousePos()})
      }
    })
  })
}

fn editorSaveSession(editor: ^Editor): session::Session {
  session := session::Session{}
  session.pan = editor.tilemapGrid.p
  session.scale = editor.tilemapGrid.s.x
  session.room = editor.currentRoom
  session.allLayers = editor.tilemapShowAllLayers
  session.entityBypass = editor.entityBypass
  session.layerSelected = editor.tilemapLayer
  session.tileSelected  = editor.tileSelected
  session.showUiDebug = editor.showUiDebugInfo
  session.plainBiscuit = global::plainBiscuit
  session.windows = implvtbl::VTBLImpl(editor.ui.vtbl).wm.saveState()

  return session
}

fn editorLoadSession(editor: ^Editor, session: session::Session) {
  loadRoom(editor, session.room)
  editor.tilemapGrid.p = session.pan
  editor.tilemapGrid.s.x = session.scale
  editor.tilemapGrid.s.y = session.scale
  editor.tilemapShowAllLayers = session.allLayers
  editor.entityBypass = session.entityBypass
  editor.tilemapLayer = session.layerSelected
  editor.tileSelected = session.tileSelected
  editor.showUiDebugInfo = session.showUiDebug
  global::plainBiscuit = session.plainBiscuit

  implvtbl::VTBLImpl(editor.ui.vtbl).wm.loadState(session.windows)
}

fn (editor: ^Editor) handleShortcuts*() {
  shortcuts::console(&implvtbl::VTBLImpl(editor.ui.vtbl).wm)
  shortcuts::fullscreen()
  if input::isJustPressed(.escape) {
    editor.entities.entitySelected = -1
  }
  if input::isPressed(.ctrl) {
    if input::isJustPressedc('s') {
      input::clearc('s')
      editorSaveRoom(editor)
    }
    if input::isJustPressedc('q') {
      input::clearc('q')
      for _, w^ in implvtbl::VTBLImpl(editor.ui.vtbl).wm.windows {
        w.hidden = true
      }
    }
    if input::isJustPressedc('d') {
      input::clearc('d')
      idx := getEntitySelectedIndex(&editor.entities)
      if idx != -1 {
        doEntityAction(editor.ui, editor, .duplicate, idx)
      }
    }
  }
  if input::isJustPressed(.fn25) {
    std::assert(false, "The F25 key? What's that?")
  }
  if input::isJustPressed(.pause) {
    editorToggleGame(editor)
  }
  if input::isJustPressed(.fn6) {
    editor.debugTimerStarted = !editor.debugTimerStarted
    if editor.debugTimerStarted {
      editor.debugTimerOrigin = th::time
      editor.debugTimer = 0
    }
  }
  if input::isJustPressed(.fn5) {
    editorToggleGame(editor)
  }
  if input::isJustPressed(.fn4) {
    editor.showUiDebugInfo = !editor.showUiDebugInfo
  }
  if input::isJustPressed(.fn3) {
    editor.showDebugInfo = !editor.showDebugInfo
  }
  game::showDebug = editor.showDebugInfo
  if input::isJustPressed(.fn2) {
    global::plainBiscuit = !global::plainBiscuit
  }
  if input::isJustPressed(.fn1) {
    dbg::logt("dfjslfkjsd")
    notification::put({.warning, sprintf("Hello, world! %d", th::time)})
  }
}

fn setup*() {
  dpi := window::getDpiScaleFactor()
  global::screen = {0, 0, 800*dpi, 600*dpi}
  window::setup("Editor", trunc(global::screen.w), trunc(global::screen.h))
}


fn mk*(ui: ^ui::UI, rl: ^resources::ResourceLoader): ^Editor {
  // HACK: This shouldn't be handled in the editor.
  background::init(rl)
  game::init(rl)

  // @TODO: Since we update DPI, we need to also update the resources.
  resources := EditorResources {
    tilesetImage: resources::loadImage(rl, "data/img/ts_sky.png", .linear),
    toolbarIcons: resources::loadImage(rl, "data/img/ui/1_5x/icons.png", .linear),
    superHotFire: resources::loadImage(rl, "data/img/SUPER HOT FIRE WTF.png", .linear),
    mainFont: resources::loadFont(rl, "data/font/FairfaxHD.ttf", 24, .linear)
  }

  tileset := atlas::mk(resources.tilesetImage, {4, 9})

  editor := &Editor{
    mode:                 .editor,
    ui:                   ui,
    tilemapGrid:          grid::Grid{s: {48, 48}},
    tilesetGrid:          grid::Grid{s: {48, 48}},
    tilemapShowAllLayers: false,
    entityBypass:         true,
    tileset:              tileset,
    world:                world::fromTileset(tileset),
    resources:            resources,
    entities:             createEditorEntities()
  }

  // TODO: Should we handle the session loading here really?
  if sessionFile, err := util::readFileStr(th::convPath("data://SAVESCUM/session.json")); err.code == 0 {
    editorLoadSession(editor, session::load(sessionFile))
  } else {
    loadRoom(editor, "testarea")
  }

  return editor
}

fn (editor: ^Editor) update*(mode: EditorMode) {
  if mode == .gameplay && !editor.isPlaying {
    editorToggleGame(editor)
  }

  // Subsystem updates
  notification::update()
  fps::update()
  payload_trigger::update()
  immcursor::setCursor(.system)
  editor.handleShortcuts()

  if editor.debugTimerStarted {
    editor.debugTimer = th::time-editor.debugTimerOrigin
  }
  
  std::srand(std::time())

  global::screen = rect::Rect{0, 0, window::w, window::h}
  window::setViewport(global::screen.getDims())

  editor.ui.io.scale = window::getDpiScaleFactor()/1.5
  editor.ui.font = editor.resources.mainFont
  editor.ui.pass(|editor| {
    editor.putUi(ui)
  }, editor.showUiDebugInfo)

  fpsNode := debug_info::Display{ "FPS", fps::getFps(), false }
  if payload_trigger::aprilFools() {
    fpsNode = debug_info::Display{ "SPF", 1/fps::getFps(), false }
  }

  if editor.showDebugInfo {
    editor.dimDebugInfo = render_debug_info::renderDebugInfo(editor.resources.mainFont, {
      displays: {
        fpsNode,
        { "TPS", 1000.0/game::updateStepMs, false },
        { "Room", editor.currentRoom, false },
        { "Frameskip", trunc(game::frameSkips), false },
        { "Dirty?", editor.dirty, false },
        { "Version", global::version, false },
        { "Scale", editor.tilemapGrid.s, false },
        { "Plain", global::plainBiscuit, false },
        { "Playthrough (ms)", editor.debugTimer, false },
        { "Playthrough Started", editor.debugTimerStarted, false },
        { "Memory usage", util::formatBytes(memusage()), false }
      }
    }, editor.dimDebugInfo)
  }
}

fn (editor: ^Editor) destroy*() {
  // Reset all the references to editor.
  editor.ui = null
  // HACK: Should the session managment be handled here?
  if !os::isdir(th::convPath("data://SAVESCUM")) {
    os::mkdir(th::convPath("data://SAVESCUM"))
  }

  err := util::writeFileStr(th::convPath("data://SAVESCUM/session.json"), session::save(editorSaveSession(editor)))
  if err.code != 0 {
    dbg::logt("Failed to save session!")
  }
}
