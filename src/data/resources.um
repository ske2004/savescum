import (
  "image.um"
  "font.um"
  "audio.um"
)

type (
  ResourceLoader* = struct {
    errors: []str
  }
)

fn mk*(): ResourceLoader {
  return ResourceLoader{errors: []str{}}
}

fn (loader: ^ResourceLoader) hasErrors*(): bool {
  return len(loader.errors) > 0
}

fn loadingError*(loader: ^ResourceLoader, path, why: str) {
  loader.errors = append(loader.errors, sprintf("Error loading %s: %s", path, why))
}

fn loadImage*(loader: ^ResourceLoader, path: str, filter: font::Filter = .linear): image::Image {
  theImage, err := image::load(path)
  
  if err.code != 0 {
    loadingError(loader, path, err.msg)
  } else {
    theImage.setfilter(int(filter))
  }

  return theImage
}

fn loadAudio*(loader: ^ResourceLoader, path: str): audio::Sound {
  theAudio, err := audio::load(path)
  
  if err.code != 0 {
    loadingError(loader, path, err.msg)
  }

  return theAudio
}


fn loadFont*(loader: ^ResourceLoader, path: str, size: real, filter: font::Filter): font::Font {
  theFont, err := font::load(path, size, filter)
  
  if err.code != 0 {
    loadingError(loader, path, err.msg)
  }

  return theFont
}

// TODO: loadWorld. I don't need it right now as I want to create a world if it doesn't exist.
//       But that's not going to be the case with the actual game where I must have the world.
