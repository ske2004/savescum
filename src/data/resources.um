import (
  "image.um"
  "font.um"
  "audio.um"
)

type (
  ResourceLoader* = struct {
    cache: map[str]any
    errors: []str
  }
)

fn mk*(): ResourceLoader {
  return ResourceLoader{errors: []str{}}
}

fn (loader: ^ResourceLoader) error*(path, why: str) {
  loader.errors = append(loader.errors, sprintf("Error loading %s: %s", path, why))
}

fn (loader: ^ResourceLoader) loadImage*(path: str, filter: image::Filter = .linear): image::Image {
  if i := ^image::Image(loader.cache[path]); i != null {
    return i^
  }

  theImage, err := image::load(path)
  
  if err.code != 0 {
    loader.error(path, err.msg)
  } else {
    theImage.setfilter(filter)
  }

  loader.cache[path] = theImage
  return theImage
}

fn (loader: ^ResourceLoader) loadAudio*(path: str): audio::Sound {
  if a := ^audio::Sound(loader.cache[path]); a != null {
    return a^
  }

  theAudio, err := audio::load(path)
  
  if err.code != 0 {
    loader.error(path, err.msg)
  }

  loader.cache[path] = theAudio
  return theAudio
}


fn (loader: ^ResourceLoader) loadFont*(path: str, size: real, filter: image::Filter): font::Font {
  if f := ^font::Font(loader.cache[path]); f != null {
    return f^
  }
  
  theFont, err := font::load(path, size, filter)

  if err.code != 0 {
    loader.error(path, err.msg)
  }

  loader.cache[path] = theFont
  return theFont
}
