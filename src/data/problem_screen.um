import (
  "resources.um"
  "canvas.um"
  "window.um"
  "th.um"
  "input.um"
  "font.um"
)

var (
  font: font::Font
  scroll: th::Vf2
  y: th::fu
)

fn restart() {
  y = 0
  canvas::drawRect(th::black, {0, 0, window::w, window::h})
}

fn pushText(text: str, color: uint32 = th::white) {
  font.draw(text, {0, y}, color, 1)
  y += font.measure(" ").y + 10.0*window::getDpiScaleFactor()
}

fn init() {
  // Try to load a better font, the fallback will be used otherwise.
  f, err := font::load("data/font/FairfaxHD.ttf", 16*window::getDpiScaleFactor())

  if err.code != 0 {
    f = canvas::pixelFont
  }

  font = f
}

fn setup*(loader: ^resources::ResourceLoader) {
  init()
  window::onFrame.clear()
  window::onFrame.register(|loader| {
    if input::isPressed(.mouse2) {
      scroll = input::getMouseDelta()
    }

    restart()
    pushText("Resources failed to load:")
    for i, error in loader.errors {
      pushText(" "+error, th::red)
    }
  })
}

fn setupOnError*(loader: ^resources::ResourceLoader): bool {
  if len(loader.errors) == 0 {
    return false
  }

  setup(loader)
  return true
}
