import ("th.um"; "image.um"; "rect.um"; "d_util.um")

type (
  TileProperties* = struct {
    invisible: bool
  }

  Tileset* = struct {
    image: image.Image
    scale: real
    tileSizeX, tileSizeY: int
    tileCountX, tileCountY: int
    tileProperties: map[int]TileProperties
  }
)

fn fromImage*(img: image.Image, tileSizeX, tileSizeY: int, scale: real): Tileset {
  dims := img.getDims()
  return Tileset{
    image: img,
    tileSizeX: tileSizeX, tileSizeY: tileSizeY,
    tileCountX: trunc(dims.x/(tileSizeX*scale)), tileCountY: trunc(dims.y/(tileSizeY*scale)), scale: scale}
}

fn (ts: ^Tileset) tileToPos*(x, y: int): int {
  return x + ts.tileCountX * y + 1
}

fn (ts: ^Tileset) posToTile*(pos: int): th.Vf2 {
  pos -= 1
  return th.Vf2{pos%ts.tileCountX, pos/ts.tileCountX}
}

fn (ts: ^Tileset) setTileProperties*(pos: int, props: TileProperties) {
  ts.tileProperties[pos] = props
}

fn (ts: ^Tileset) getCroppingRect*(x, y: int): rect.Rect {
  return rect.mk(x*ts.tileSizeX*ts.scale, y*ts.tileSizeY*ts.scale,
                 ts.tileSizeX*ts.scale, ts.tileSizeY*ts.scale)
}

fn (ts: ^Tileset) getCroppingRectId*(id: int): rect.Rect {
  id -= 1
  return ts.getCroppingRect(id%ts.tileCountX, id/ts.tileCountX)
}

fn (ts: ^Tileset) selectTile*(x, y: int) {
  d_util.imageCropRect(ts.image, ts.getCroppingRect(x, y))
}

fn (ts: ^Tileset) selectTilePos*(pos: int) {
  pos -= 1
  ts.selectTile(pos%ts.tileCountX, pos/ts.tileCountX)
}

fn (ts: ^Tileset) isTileValid*(pos: int): bool {
  if pos < 1 || pos > (ts.tileCountX*ts.tileCountY) {
    return false
  }
  return true
}
