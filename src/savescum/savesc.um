import (
  "atlas.um"
  "signal.um"
  "window.um"

  setup_ui = "../ui/setup.um"

  "../gfx/background.um"
  "../misc/util.um"
  "../game/game.um"
  "../game/world.um"
  "../game/world_data.um"
  "../editor/editor.um"
  "../mainmenu/mainmenu.um"
  "../data/resources.um"
  "../data/problem_screen.um"
  "../dbg/dbg.um"
)

type (
  Mode* = enum {
    mainmenu
    editor
    game
  }

  Config* = struct {
    mode: Mode
  }
)

fn initLogs();

fn init*(cfg: Config) {
  // TODO: Maybe have some sort of subsystems that we can initialize/deinitialize?
  initLogs()

  rl := new(resources::ResourceLoader, resources::mk())

  ui := setup_ui::setup({
    mainFont:   resources::loadFont(rl, "data/font/FairfaxHD.ttf", 24, .linear),
    bevelImage: resources::loadImage(rl, "data/img/ui/1_5x/base.png", .linear),
    glow:       resources::loadImage(rl, "data/img/ui/1_0x/glow.png", .linear)
  })

  frameCb := signal::Callback{exit(1, "Invalid frame codepath")}
  destroyCb := signal::Callback{exit(1, "Invalid destroy codepath")}
  
  // @TODO: This is not needed everywhere.
  background::init(rl)
  game::init(rl)

  switch cfg.mode {
  case .mainmenu:
    mainmenu::setup()
    menu := mainmenu::mk(ui, rl)
    frameCb = |menu| { menu.update() }
    destroyCb = |menu| { menu.destroy() }
  case .editor:
    editor::setup()
    editor := editor::mk(ui, rl)
    frameCb = |editor| { editor.update({}) }
    destroyCb = |editor| { editor.destroy() }
  case .game:
    // TODO: Make the initialization less hacky.
    game::setup()
    tileset := atlas::mk(resources::loadImage(rl, "data/img/ts_sky.png", .linear), {4, 9})
    world := world::fromTileset(tileset)
    worldData := world_data::load(world, util::readFileStr("data/spiel/sc_wip.csv").item0)
    game::start(worldData)
    editor::setup()
    frameCb = { game::update(); game::draw() }
    destroyCb = {}
  }

  if rl.hasErrors() {
    problem_screen::setup(rl)
  } else {
    window::onFrame.register(frameCb)
    window::onDestroy.register(destroyCb)
  }
}

fn initLogs() {
  dbg::initConsole()

  dbg::logt(
    "              [ _ _]\n"+
    "              [ ----]\n"+
    "     _/\\/\\/\\_/ /\n"+
    "   _|         /\n"+
    " _|  (  | (  |\n"+
    "/__.-'|_|--|_|\n"
  )
  dbg::logt("SAVESCUM")
  dbg::logt("DPI aware: {}\n", window::isDpiEnabled())
  dbg::logt("-*-")
}
