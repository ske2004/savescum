// TODO: Add raw tree view of any value

import (
  "canvas.um"
  "font.um"
  "rect.um"
  "th.um"

  "d_info.um"
)

type DisplayToLayout = struct {
  newLine: bool
  btn: bool
  color: uint32
  text: str
}

type RenderCommand = struct {
  btn: bool
  text: str
  color: uint32
  position: th::Vf2
}

type WrapLayout = struct {
  box: rect::Rect
  position: th::Vf2
  maxY: real
}

fn (wl: ^WrapLayout) pushNode(size: th::Vf2): rect::Rect {
  r := rect::Rect{x: wl.position.x, y: wl.position.y, w: size.x, h: size.y}

  wl.position.x += size.x
  wl.maxY = size.y > wl.maxY ? size.y : wl.maxY
  wl.box.w = wl.position.x > wl.box.w ? wl.position.x : wl.box.w

  return r 
}

fn (wl: ^WrapLayout) newLine() {
  wl.position.x = wl.box.x
  wl.position.y += wl.maxY
  wl.box.h += wl.maxY
}

fn valueToDisplay*(value: any): DisplayToLayout {
  switch v := type(value) {
    case bool: 
      return {text: v ? "true" : "false", color: v ? 0x99FF99FF : 0xFF9999FF}
    case int:
      return {text: sprintf("%v", v), color: 0x9999FFFF}
    case int8:
      return {text: sprintf("%v", v), color: 0x9999FFFF}
    case int16:
      return {text: sprintf("%v", v), color: 0x9999FFFF}
    case int32:
      return {text: sprintf("%v", v), color: 0x9999FFFF}
    case uint8:
      return {text: sprintf("%v", v), color: 0x9999FFFF}
    case uint16:
      return {text: sprintf("%v", v), color: 0x9999FFFF}
    case uint32:
      return {text: sprintf("%v", v), color: 0x9999FFFF}
    case real32:
      return {text: sprintf("%v", v), color: 0x9999FFFF}
    case real:
      return {text: sprintf("%v", v), color: 0x9999FFFF}
    case str:
      return {text: v, color: 0xFFFF99FF}
  }

  return {text: sprintf("%v", value), color: 0xFF99FFFF}
}

fn renderDebugInfo*(font: font::Font, debugInfo: d_info::DebugInfo): rect::Rect {
  displaysToLayout := []DisplayToLayout{}

  for _, display in debugInfo.displays {
    val := valueToDisplay(display.value)
    if display.mutable {
      val.btn = true
    }

    elements := []DisplayToLayout{
      {text: display.name, color: 0xFFFFFFFF},
      val,
      {newLine: true}
    }

    displaysToLayout = append(displaysToLayout, elements)
  }

  wl := WrapLayout{box: rect::Rect{x: 0, y: 0}}
  renderCommands := []RenderCommand{}

  alignment := [32]real([]real{})
  column := 0

  for _, display in displaysToLayout {
    if display.newLine {
      column = 0
    } else {
      size := font.measure(display.text)
      alignment[column] = size.x > alignment[column] ? size.x : alignment[column]
      column++
    }
  }

  column = 0
  for _, display in displaysToLayout {
    if display.newLine {
      wl.newLine()
      column = 0
    } else {
      text := display.text
      color := display.color
      size := font.measure(text)
      size.x = alignment[column]+10

      textRect := wl.pushNode(size)
      renderCommands = append(renderCommands, RenderCommand{btn: display.btn, text: text, color: color, position: textRect.getPos()})

      column += 1
    }
  }

  canvas::drawRect(0x00000077, wl.box)

  for _, command in renderCommands {
    size := font.measure(command.text)
    if command.btn {
      canvas::drawRect(command.color&0xFFFFFF77, {command.position.x, command.position.y, size.x, size.y})
    }
    font.draw(command.text, command.position, command.color)
  }

  return wl.box
}
