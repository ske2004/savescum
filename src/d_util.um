import (
  "image.um"
  "std.um"
  "th.um"
  "rect.um"
  "input.um"
  "canvas.um"
  "utf8.um"
  "misc/d_strings.um"
  th_font = "font.um"
)

fn posTrans*(x, y: th.fu): th.Transform {
  return th.Transform{p: th.Vf2{x, y}, s: th.Vf2{1, 1}}
}

fn isMouseInRect*(r: rect.Rect): bool {
  p := input.getMousePos()
  return p.x >= r.x && p.y >= r.y && p.x <= (r.x+r.w) && p.y <= (r.y+r.h)
}

fn readFileStr*(path: str): (str, std.Err) {
  file := std.fopen(path, "rb")
  
  if file == null {
    return "", std.error(1, "Failed to open file")
  }
  
  std.fseek(file, 0, std.SeekFrom.end)
  datasiz := std.ftell(file)
  std.fseek(file, 0, std.SeekFrom.begin)

  data := make([]char, datasiz+1)
  std.fread(file, data)
  
  // FIXME: Really bad CRLF fix bruhhh 
  // what this does is it replaces all \r\n with \n
  data = d_strings.join(d_strings.splitBy(data, '\r'))

  return data, {}
}

fn writeFileStr*(path: str, dataStr: str): bool {
  file := std.fopen(path, "w")
  if file == null {
    return false
  }

  std.fwrite(file, &[]char(dataStr))
  std.fclose(file)

  return true
}

fn drawRectLines*(color: uint32, r: rect.Rect, thicc: real = 3.0) {
  // top
  canvas.drawLine(color, th.Vf2{r.x, r.y}, th.Vf2{r.x+r.w, r.y}, thicc)
  // bottom
  canvas.drawLine(color, th.Vf2{r.x, r.y+r.h}, th.Vf2{r.x+r.w, r.y+r.h}, thicc)
  // left
  canvas.drawLine(color, th.Vf2{r.x, r.y}, th.Vf2{r.x, r.y+r.h}, thicc)
  // right
  canvas.drawLine(color, th.Vf2{r.x+r.w, r.y}, th.Vf2{r.x+r.w, r.y+r.h}, thicc)
}

fn rectChopRight*(r: ^rect.Rect, by: int): rect.Rect {
  r.w -= by
  return rect.Rect{r.x+r.w, r.y, by, r.h}
}

// Crops the input image by specified rectangle in pixels
// 
// img: Input image
// rec: Cropping rectangle, in pixels
//
fn imageCropRect*(img: image.Image, rec: rect.Rect) {
  size := img.getDims()
  img.crop(th.Vf2{rec.x/size.x, rec.y/size.y}, th.Vf2{(rec.x + rec.w)/size.x, (rec.y + rec.h)/size.y})
}

fn drawImageRect*(img: image.Image, src: rect.Rect, dst: rect.Rect, rot: real = 0, tint: uint32 = 0xFFFFFFFF) {
  dims := img.getDims()
  src.x += 0.5
  src.y += 0.5
  src.w -= 1
  src.h -= 1
  img.crop(th.Vf2{src.x/dims.x, src.y/dims.y}, th.Vf2{(src.x + src.w)/dims.x, (src.y + src.h)/dims.y})
  img.draw({p: th.Vf2{dst.x, dst.y}, s: {dst.w/src.w, dst.h/src.h}, r: rot, o: {dst.w/2, dst.h/2}}, tint)
}

//
// Returns lowest number among a, b
//
fn fmin*(a, b: real): real {
  if a < b {
    return a
  }
  return b
}

//
// Returns highest number among a, b
//
fn fmax*(a, b: real): real {
  if a > b {
    return a
  }
  return b
}

//
// Fmod(
//   Divident
//   Divisor
// )
// 
// floating point modulo
//
fn fmod*(a, b: real): real {
  rem := a / b
  return (rem-floor(rem)) * b
}

// 
// Takes `size` characters (Runes) out of UTF-8 string `s` and returns the slice
// 
// s: Input UTF-8 encoded string
// size: Amount of UTF-8 encoded runes to take
//
fn chopUtf8*(s: str, size: int): str {
  ofs := 0
  for size > 0 && ofs < len(s) {
    rune := utf8.decodeRune(s, ofs)
    ofs += rune.size()
    size -= 1
  }
  return slice(s, 0, ofs)
}

// Rect vs rect(
//   First rect
//   Second rect
// )
//
// Returns true if both rects collide
fn rectVsRect*(r1, r2: rect.Rect): bool {
  return (r1.x + r1.w) > (r2.x) && (r1.y + r1.h) > (r2.y) && (r1.x) < (r2.x + r2.w) && (r1.y) < (r2.y + r2.h)
}

// Rect vs point(
//   Rect
//   Point
// )
//
// Returns true if point p is in rectangle r
fn rectVsPoint*(r: rect.Rect, p: th.Vf2): bool {
  return p.x >= r.x && p.y >= r.y && p.x < (r.x + r.w) && p.y < (r.y + r.h)
}

// Rect shrink(
//   Rect,
//   Shrink by
// )
// 
// Returns rectangle shrinked by amount `by` from all left, right, top, bottom sides
fn rectShrink*(r: rect.Rect, by: real): rect.Rect {
  return rect.mk(r.x+by, r.y+by, r.w-by*2, r.h-by*2)
}

// Rect move(
//   Rect,
//   Move by
// ) 
//
// Returns rectangle moved by amount `by`
fn rectMove*(r: rect.Rect, by: th.Vf2): rect.Rect {
  return rect.Rect{r.x+by.x, r.y+by.y, r.w, r.h}
}

fn rectCenter*(r: rect.Rect): th.Vf2 {
  return th.Vf2{r.x+r.w/2, r.y+r.h/2}
}

fn rectCenterWithinRect*(child, parent: rect.Rect): rect.Rect {
  child.x = parent.x+(parent.w-child.w)/2
  child.y = parent.y+(parent.h-child.h)/2
  return child
}

// Rect keep in bounds(
//   Child rect
//   Parent rect
// )
//
// Pushes the child rect into the parent rect. 
// Won't work if child rectangle dimensions are bigger than parents rectangle. 
fn rectKeepInBounds*(child, parent: rect.Rect): rect.Rect {
  if child.x < parent.x {
    child.x = parent.x
  }
  if child.y < parent.y {
    child.y = parent.y
  }
  if (child.x+child.w) > (parent.x+parent.w) {
    child.x = parent.x+parent.w-child.w
  }
  if (child.y+child.h) > (parent.y+parent.h) {
    child.y = parent.y+parent.h-child.h
  }

  return child
} 

/*
 * \brief Creates a split of rect `r` at `by` starting from the right side.
 */
fn rectCutRight*(r: rect.Rect, by: real): rect.Rect {
  result := r
  result.x += r.w-by
  result.w = by
  return result
}

fn rectScale*(r: rect.Rect, by: real): rect.Rect {
  return rect.mk(r.x*by, r.y*by, r.w*by, r.h*by)
}

fn min*(a, b: real): real {
  if a < b {
    return a
  }
  return b
}

fn max*(a, b: real): real {
  if a > b {
    return a
  }
  return b
}

fn abs*(a: real): real {
  if a < 0 {
    return -a
  }
  return a
}

fn clamp*(a, b, c: real): real {
  if a < b {
    return b
  }
  if a > c {
    return c
  }
  return a
}

fn isprint*(c: uint32): bool {
  // ASCII 0..31 (inclusive), are control characters
  // ASCII 125 is a control character (DEL)
  // we want to skip these 
  return c >= 32 && c != 127
}


fn rectUnion*(a, b: rect.Rect): rect.Rect {
  x := max(a.x, b.x);
  y := max(a.y, b.y);
  return rect.Rect{
    x,y, 
    min(a.x + a.w, b.x + b.w) - x,
    min(a.y + a.h, b.y + b.h) - y};
}

fn wrapText*(font: ^th_font.Font, text: str, boundary: real): []str {
  result := []str{}
  lastIndex := 0
  shift := 0.0

  for i, chr in text {
    if (shift+font.measure(""+chr).x) > boundary {
      shift = 0
      result = append(result, slice(text, lastIndex, i))
      lastIndex = i
    }
    shift += font.measure(""+chr).x
  }
  result = append(result, slice(text, lastIndex))

  return result
}
