import (
  "ui_atoms.um"
  "d_mouseinput.um"
)

const (
  eventMouseLeft = 0
  eventMouseMiddle = 1
  eventMouseRight = 2
  eventMouseScroll = 3
  eventCount = 4
)

type Core* = struct {
  frameNumber: uint

  tools: ^ui_atoms.ToolNode
  currentTool: ^ui_atoms.ToolNode
  maybeActiveTool: ^ui_atoms.ToolNode
  activeTool: ^ui_atoms.ToolNode
  hoveredTool: ^ui_atoms.ToolNode
}

type InputSink* = struct {
  sunk: [eventCount]bool
}

type Events* = struct {
  sink: ^InputSink
  // The events the element itself has sunk, so we can return true if the event were to be queried again.
  acquired: InputSink
  mask: InputSink
  mouseState: d_mouseinput.MouseState
}

fn (core: ^Core) getToolState(tool: ^ui_atoms.ToolNode): ui_atoms.ToolState {
  return ToolState{
    active: tool == core.activeTool,
    hovered: tool == core.hoveredTool}
}

fn (core: ^Core) maybeAcquireToolNode(name: str): ^ui_atoms.ToolNode {
  if core.currentTool == null {
    core.currentTool = core.tools
  }

  if !validkey(core.currentTool.children, name) {
    return null
  }

  return core.currentTool.children[name]
}

fn (core: ^Core) acquireToolNode*(name: str): ^ui_atoms.ToolNode {
  node := core.maybeAcquireToolNode(name)

  if node == null {
    tool := new(ui_atoms.ToolNode)
    tool ^= ui_atoms.ToolNode{children: map[str]^ui_atoms.ToolNode{}, parent: core.currentTool}
    node = tool
    core.currentTool.children[name] = node    
  }

  return node
}

// Prunes all tools untouched last frame
fn (core: ^Core) pruneToolsRecursive(node: ^ui_atoms.ToolNode) {
  if node.lastFrameTouched == -1 {
    // Nodes with last frame -1 are not candidates to pruning (just a hardcoded value).
    // Here we automatically unfreeze the node because you need to freeze it every time.
    node.lastFrameTouched = core.frameNumber
    return
  }

  for key in node.children {
    core.pruneToolsRecursive(node.children[key])

    if node.children[key].lastFrameTouched < core.frameNumber {
      // Fix leak
      node.children[key].parent = null
      node.children = delete(node.children, key)
    }
  }
}

fn (core: ^Core) freezeTool(name: str) {
  node := core.maybeAcquireToolNode(name)
  if node != null {
    node.lastFrameTouched = -1
  }
}

fn (core: ^Core) beginTool(name: str, toolRect: rect.Rect): ^ui_atoms.ToolNode {
  node := core.acquireToolNode(name)
  node.lastFrameTouched = core.frameNumber
  node.rect = toolRect
  node.layer = core.ctx.currentLayerId
  core.currentTool = node
  isOverMaybeActiveTool := true

  if core.maybeActiveTool != null {
    isOverMaybeActiveTool = node.layer >= core.maybeActiveTool.layer
  }
 
  if ok, scissorRect := core.ctx.getCurrentScissorRect(); ok {
    isOverMaybeActiveTool = isOverMaybeActiveTool && d_util.rectVsPoint(scissorRect, core.mouseState.pos)
  }

  if isOverMaybeActiveTool && d_util.rectVsPoint(node.rect, core.mouseState.pos) {
    core.maybeActiveTool = node
  }

  return core.currentTool
}

fn (core: ^Core) getCurrentToolState(): ui_atoms.ToolState {
  return core.getToolState(core.currentTool)
}

fn (core: ^Core) isCurrentToolActive(): bool {
  return core.getCurrentToolState().active
}

fn (core: ^Core) endTool(): Events {
  if core.currentTool.parent == null {
    error("Parent node is null, beginTool/endTool mismatched!")
  }

  mask := InputSink{}
  if !ui_atoms.areToolsRelated(core.currentTool, core.activeTool) {
    // Block all events if the current tool isn't hovered.
    mask = initInputSinkSet()
  }

  core.currentTool = core.currentTool.parent

  return Events{sink: &core.inputSink, mask: mask, mouseState: core.mouseState}
}

fn (core: ^Core) getProperty(name: str, def: interface{}): interface{} {
  // Create a dummy tool where we'll store the data.
  tool := core.beginTool(name, rect.mk(-100000, -100000, 0, 0))
  core.endTool()

  if !valid(tool.userdata) {
    tool.userdata = def
  }

  return tool.userdata
}

fn (core: ^Core) getPropertyLazy(name: str, getter: fn (): any): any {
  // Create a dummy tool where we'll store the data.
  tool := core.beginTool(name, rect.mk(-100000, -100000, 0, 0))
  core.endTool()

  if !valid(tool.userdata) {
    tool.userdata = getter()
  }

  return tool.userdata
}

// Creates an input sink with all inputs set to 1.
// Can be used for masking.
fn initInputSinkSet*(): InputSink {
  sink := InputSink{}
 
  for i in sink.sunk {
    sink.sunk[i] = true
  }

  return sink
}

fn sinkAcquireMaskEvent*(sink, acquire: ^InputSink, mask: InputSink, event: int): bool {
  if event < 0 || event >= eventCount {
    error(sprintf("Invalid event id: %d", event))
  }
 
  // This event is masked so we can't process it.
  if mask.sunk[event] {
    return false
  }

  // This event was acquired, so it's successful.
  if acquire.sunk[event] {
    return true
  }

  // This event was already sunk. Can't sink it again.
  if sink.sunk[event] {
    return false
  }

  // Sink and acquire the event.
  sink.sunk[event] = true;
  acquire.sunk[event] = true;

  return true
}

fn sinkEvent*(events: ^, event: int): bool {
  return sinkAcquireMaskEvent(events.sink, &events.acquired, events.mask, event)
}

fn convertButtonToEvent(btn: int): int {
  return btn
}

fn (events: ^Events) queryMouse(btn: int, which: int): bool {
  if sinkEvent(events, convertButtonToEvent(btn)) == false {
    return false
  }

  var mouseButton: d_mouseinput.MouseButtonState

  switch btn {
    case 0: mouseButton = events.mouseState.lmb
    case 1: mouseButton = events.mouseState.mmb
    case 2: mouseButton = events.mouseState.rmb
    default: error(sprintf("Invalid mouse button index %d", btn))
  }

  switch which {
    case d_mouseinput.down: return mouseButton.isDown
    case d_mouseinput.pressed: return mouseButton.isPressed
    case d_mouseinput.released: return mouseButton.isReleased
    default: error(sprintf("Invalid mouse button property index %d", which))
  }
  return false;

}

fn (events: ^Events) queryScroll(): real {
  if sinkEvent(events, eventMouseScroll) == false {
    return 0
  }

  return events.mouseState.wheelY
}
