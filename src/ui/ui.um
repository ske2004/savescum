// @TODO: Make the element struct smaller in size
// @TODO: Hovering effects?

import (
  "std.um"
  "canvas.um"
  "rect.um"
  "th.um"
  "input.um"
  "coll.um"
  "font.um"
  "image.um"
  "color.um"
  "window.um"
  "render.um"
  "themer.um"
  "scrollbar.um"
  "../misc/immcursor.um"
  "../misc/util.um"
  "../misc/fnv1.um"
)

// >>> TYPES >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

type (
  LayoutType* = enum {
    col
    row
    spring
    spacer
  }

  BoxStyle* = enum {
    none
    button
    buttonPushed
    window
    titlebar
    input
    highlighted
    toolbar
    resizer
    notification
    _count
  }

  BoxState* = struct {
    pressed: bool
    hovered: bool
    focused: bool
  }

  BoxTheme* = struct {
    normal:  themer::BoxRenderer
    hovered: themer::BoxRenderer
    pressed: themer::BoxRenderer
    focused: themer::BoxRenderer
  }

  RenderCall* = struct {
    r: rect::Rect
    el: ^El
  }

  CellKind* = enum {
    normal
    justify
    rect
  }

  Cell* = struct {
    kind:    CellKind
    padding: real
    justify: real
    align:   real
    rect:    rect::Rect
    flags:   uint
    color:   uint32
    scroll:  th::Vf2
  }

  El* = struct {
    parent:      weak ^El
    children:    []^El
    id:          uint
    interactive: bool

    layout:      LayoutType
    size:        th::Vf2
    contentSize: th::Vf2
    cell:        Cell

    // Rendering info @TODO: Move to an interface instead.
    renderObject: themer::BoxRenderer
    boxStyle:     BoxStyle
  }

  Retained* = struct {
    el:        ^El
    life:      int
    id:        any
    rect:      rect::Rect
    state:     BoxState
    data:      any
    isVisible: bool
  }

  Attention* = struct {
    focused: uint
    active:  uint
    hovered: uint
  }

  IO* = struct {
    screen:     rect::Rect
    mousePos:   th::Vf2
    mouseDelta: th::Vf2
    scale:      real
  }

  VTBL* = interface {
    doDisplayWM(ui: ^UI)
    doWindow(title: str, cb: fn(ui: ^UI), hidden: bool)
    doScrollArea(ui: ^UI, cb: fn(ui: ^UI, scrollbar: ^scrollbar::Scrollbar))
    doTextEditSingle(ui: ^UI, name: str, value: ^str): bool
  }

  EventKind* = enum {
    pressed
    released
  }

  Event* = struct {
    kind: EventKind
    el:   ^El
  }

  UI* = struct {
    font:      font::Font
    theme:     [int(BoxStyle._count)]BoxTheme
    cursors:   [int(BoxStyle._count)]window::Cursor

    io:        IO
    vtbl:      VTBL
    retained:  map[uint]Retained
    attention: Attention

    ids:       []uint
    parents:   []^El
    root:      ^El
    cell:      Cell
    events:    []Event
  }
)

// >>> CONSTS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

const (
  cellClipped   = 1<<0
  cellUnclipped = 1<<1
  cellStretched = 1<<2
  cellSameSize  = 1<<3

  buttonFlagPushed* = 1<<0
)

// >>> FUNCTIONS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

fn mk*(vtbl: VTBL): UI {
  return {
    vtbl: vtbl,
    font: canvas::pixelFont,
    io: {
      scale: 1.0
    }
  }
}

fn (ui: ^UI) layout1(node: ^El): th::Vf2 {
  // Calculate the natural size unless the size is already known.
  size := th::Vf2{0, 0}
  for i, child in node.children {
    childSize := ui.layout1(child)
    if child.cell.kind == .rect {
      continue
    }
    if node.layout == .row {
      if child.cell.kind != .justify { size.x += childSize.x }
      size.y = util::max(size.y, childSize.y)
    } else if node.layout == .col {
      if child.cell.kind != .justify { size.y += childSize.y }
      size.x = util::max(size.x, childSize.x)
    }
  }

  node.contentSize = size.addf(node.cell.padding*2)

  // Apply size overrides
  if node.size.x != 0 { size.x = node.size.x }
  if node.size.y != 0 { size.y = node.size.y }

  node.size = size.addf(node.cell.padding*2)

  if node.cell.kind == .rect {
    node.size.x = node.cell.rect.w
    node.size.y = node.cell.rect.h
  }

  return node.size
}

fn (ui: ^UI) layout2(node: ^El, pos: th::Vf2) {
  if node.cell.kind != .rect {
    node.cell.rect.x, node.cell.rect.y = pos.x, pos.y
  } else {
    pos.x, pos.y = node.cell.rect.x, node.cell.rect.y
  }

  pos.x += node.cell.padding
  pos.y += node.cell.padding
    
  totalJustify := 0.0
  for i, child in node.children {
    totalJustify += child.cell.justify
    if child.cell.flags & cellStretched != 0 {
      if node.layout == .row {
        child.size.y = node.size.y - node.cell.padding * 2
      } else if node.layout == .col {
        child.size.x = node.size.x - node.cell.padding * 2
      }
    }
    if child.cell.flags & cellSameSize != 0 {
      if node.layout == .row {
        node.contentSize.x += child.size.y-child.size.x
        child.size.x = child.size.y
      } else if node.layout == .col {
        node.contentSize.y += child.size.x-child.size.y
        child.size.y = child.size.x
      }
    }
  }

  for i, child in node.children {
    contentDiff := node.size.sub(node.contentSize)

    if child.cell.kind == .justify {
      if node.layout == .row {
        child.size.x = contentDiff.x * (child.cell.justify / totalJustify)
      } else if node.layout == .col {
        child.size.y = contentDiff.y * (child.cell.justify / totalJustify)
      }
    }


    alignedPos := pos
    if node.layout == .row  {
      alignedPos.y += (node.size.y - node.cell.padding*2 - child.size.y) * node.cell.align
    } else if node.layout == .col {
      alignedPos.x += (node.size.x - node.cell.padding*2 - child.size.x) * node.cell.align
    }

    alignedPos = alignedPos.add(child.cell.scroll)

    ui.layout2(child, alignedPos)
    if node.layout == .row {
      pos.x += child.size.x
    } else if node.layout == .col {
      pos.y += child.size.y
    }
  }
}

fn (ui: ^UI) layout3(node: ^El) {
  node.cell.rect.x *= ui.io.scale
  node.cell.rect.y *= ui.io.scale
  node.cell.rect.w = node.size.x*ui.io.scale
  node.cell.rect.h = node.size.y*ui.io.scale
  ui.retained[node.id].rect = node.cell.rect

  for i, child in node.children {
    ui.layout3(child)
  }
}

fn findClosestRetainedAncestorId(el: ^El): uint {
  if el.id == 0 && el.parent != null {
    return findClosestRetainedAncestorId(el.parent)
  }

  return el.id
}

// @MARK(DirectInput)
fn isInteactionKeyPressed(): bool {
  return input::isJustPressed(.mouse1) || input::isJustPressed(.mouse2) || input::isJustPressed(.mouse3) || input::isJustPressed(.space)
}

// @MARK(DirectInput)
fn isInteactionKeyReleased(): bool {
  return input::isJustReleased(.mouse1) || input::isJustReleased(.mouse2) || input::isJustReleased(.mouse3) || input::isJustReleased(.space)
}

fn (ui: ^UI) processAttentionRec(el: ^El, r: rect::Rect) {
  if el.cell.flags & cellUnclipped != 0 {
    r = ui.io.screen
  }

  if !coll::rectToRect(el.cell.rect, r) {
    return
  }

  // @MARK(DirectInput)
  if el.interactive && coll::vf2ToRect(input::getMousePos(), el.cell.rect) && coll::vf2ToRect(input::getMousePos(), r) {
    id := findClosestRetainedAncestorId(el)
    ui.attention.hovered = id
    if isInteactionKeyPressed() {
      ui.attention.active = id
      ui.attention.focused = id
    }
  }

  if el.cell.flags & cellClipped != 0 {
    r = coll::rectIntersect(r, el.cell.rect)
  }

  for i, child in el.children {
    ui.processAttentionRec(child, r)
  }
}

fn (ui: ^UI) processAttention(el: ^El) {
  ui.attention.hovered = 0

  if isInteactionKeyPressed() {
    ui.attention.focused = 0
  }

  if isInteactionKeyReleased() {
    if ui.attention.active != 0 {
      ui.events = append(ui.events, Event{kind: .released, el: ui.retained[ui.attention.active].el})
    }
    ui.attention.active = 0
  }

  ui.processAttentionRec(el, {0, 0, window::w, window::h})

  if input::isJustPressed(.mouse1) && ui.attention.active != 0 {
    ui.events = append(ui.events, Event{kind: .pressed, el: ui.retained[ui.attention.active].el})
  }
}

fn (ui: ^UI) input(el: ^El) {
  ui.retained[el.id].state.hovered = ui.attention.hovered == el.id
  ui.retained[el.id].state.pressed = ui.attention.active == el.id

  for i, child in el.children {
    ui.input(child)
  }
}

fn (ui: ^UI) render(el: ^El, depth: int, scissor: rect::Rect) {
  retained := &ui.retained[el.id]
  retained.isVisible = false

  if coll::rectToRect(el.cell.rect, scissor) {
    retained.isVisible = true
    theme := ui.theme[int(el.boxStyle)]
    if selfhasptr(theme.pressed) && retained.state.pressed {
      theme.pressed.draw(el.cell.rect)
    } else if selfhasptr(theme.normal) {
      theme.normal.draw(el.cell.rect)
    }

    if selfhasptr(el.renderObject) {
      el.renderObject.draw(el.cell.rect)
      // @TODO:  Remove any possible circular references to UI.
      el.renderObject = null
    }
  } else {
    return
  }

  if el.cell.flags & cellClipped != 0 {
    depth++
    r := el.cell.rect.shrink({el.cell.padding*ui.io.scale, el.cell.padding*ui.io.scale})
    scissor = coll::rectIntersect(scissor, r)
    canvas::beginScissorRect(r)
  }

  for i, child in el.children {
    // @TODO: This is really cumbersome, tophat's scissor rect implementation automatically keeps track of intersections, but I can't break out of it.
    if child.cell.flags & cellUnclipped != 0 {
      for i := 0; i < depth; i++ {
        canvas::endScissor()
      }

      ui.render(child, 0, ui.io.screen)

      canvas::beginScissorRect(scissor)
    } else {
      ui.render(child, depth, scissor)
    }
  }

  if el.cell.flags & cellClipped != 0 {
    canvas::endScissor()
  }
}

fn (ui: ^UI) updateCursor() {
  if ui.attention.active != 0 {
    immcursor::setCursor(ui.cursors[int(ui.retained[ui.attention.active].el.boxStyle)])
  } else if ui.attention.hovered != 0 {
    immcursor::setCursor(ui.cursors[int(ui.retained[ui.attention.hovered].el.boxStyle)])
  }
}

fn (ui: ^UI) updateIO() {
  ui.io.screen = {0, 0, window::w/ui.io.scale, window::h/ui.io.scale}
  ui.io.mousePos = input::getMousePos().divf(ui.io.scale)
  ui.io.mouseDelta = input::getMouseDelta().divf(ui.io.scale)
}

fn (ui: ^UI) drawDebug(el: ^El, hue: real = 0)
fn (ui: ^UI) drawDebug2(el: ^El, hue: real = 0, hy: real = 0)

fn (ui: ^UI) pass*(cb: fn(ui: ^UI), debug: bool = false) {
  ui.events = {}

  ui.updateIO()
  ui.root = new(El, {cell: {color: 0x000000FF}})

  ui.parents = {ui.root}
  ui.ids = {fnv1::INIT}
  cb(ui)
  ui.vtbl.doDisplayWM(ui)

  ui.layout1(ui.root)
  ui.layout2(ui.root, {0, 0})
  ui.layout3(ui.root)
  ui.processAttention(ui.root)
  ui.input(ui.root)
  ui.updateCursor()
  ui.render(ui.root, 0, ui.io.screen)

  if debug {
    ui.drawDebug(ui.root)
    ui.drawDebug2(ui.root)
  }

  filtered := map[uint]Retained{}

  for i, r in ui.retained {
    r.life -= 1
    if r.life > 0 {
      filtered[i] = r
    }
  }

  ui.retained = filtered
}

// >>> INTERNALS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

fn (ui: ^UI) beginRoot*(): bool {
  ui.parents = append(ui.parents, ui.root)
  return true
}

fn (ui: ^UI) endRoot*(): bool {
  std::assert(ui.parents[len(ui.parents)-1] == ui.root)
  ui.parents = delete(ui.parents, len(ui.parents)-1)
  return true
}

fn (ui: ^UI) addEl*(): ^El {
  el := &El{
    parent: ui.parents[len(ui.parents)-1],
    cell: ui.cell
  }
  ui.cell = {}
  if el.cell.color == 0 {
    el.cell.color = el.parent.cell.color
  }
  el.parent.children = append(el.parent.children, el)
  return el
}

fn (ui: ^UI) pushEl*(): ^El {
  parent := ui.parents[len(ui.parents)-1]

  el := &El{
    parent: parent,
    cell: ui.cell
  }
  ui.cell = {}
  if el.cell.color == 0 {
    el.cell.color = el.parent.cell.color
  }
  parent.children = append(parent.children, el)
  ui.parents = append(ui.parents, el)

  return el
}

fn (ui: ^UI) lastEl*(): ^El {
  return ui.parents[len(ui.parents)-1]
}

fn (ui: ^UI) popEl*() {
  ui.parents = delete(ui.parents, len(ui.parents)-1)
}

fn (ui: ^UI) pushIdInt*(i: int) {
  id := fnv1::hash64i(ui.ids[len(ui.ids)-1], i)
  isnew := !validkey(ui.retained, id)
  retained := &ui.retained[id]
  if isnew { retained.isVisible = true }
  retained.el = ui.lastEl()
  retained.id = i
  retained.life = 2
  ui.ids = append(ui.ids, uint(id))
  ui.lastEl().id = id
}

fn (ui: ^UI) pushIdStr*(s: str) {
  id := fnv1::hash64s(ui.ids[len(ui.ids)-1], s)
  isnew := !validkey(ui.retained, id)
  retained := &ui.retained[id]
  if isnew { retained.isVisible = true }
  retained.el = ui.lastEl()
  retained.id = s
  retained.life = 2
  ui.ids = append(ui.ids, id)
  ui.lastEl().id = id
}

fn (ui: ^UI) popId*() {
  ui.ids = delete(ui.ids, len(ui.ids)-1)
}

fn (ui: ^UI) id*(): uint {
  return ui.ids[len(ui.ids)-1]
}

fn (ui: ^UI) isHidden*(): bool {
  if last := ui.lastEl().id; last != 0 {
    return !ui.retained[last].isVisible
  }
  return false
}

// >>> UTILS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

fn (ui: ^UI) partiallyOob*(rect: rect::Rect): bool {
  return rect.x < 0 || rect.y < 0 || 
         rect.x+rect.w > ui.io.screen.x+ui.io.screen.w || rect.y+rect.h > ui.io.screen.y+ui.io.screen.h
}

// @NOTE: Doesn't work on elements without an ID.
fn (ui: ^UI) getRect*(): rect::Rect {
  return ui.retained[ui.lastEl().id].rect
}

// @NOTE: Doesn't work on elements without an ID.
fn (ui: ^UI) getData*(): ^any {
  return &ui.retained[ui.lastEl().id].data
}

// >>> STYLING >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

fn (ui: ^UI) boxStyle*(style: BoxStyle) {
  ui.lastEl().boxStyle = style
}

fn (ui: ^UI) setBoxTheme*(style: BoxStyle, theme: BoxTheme) {
  ui.theme[int(style)] = theme
}

fn (ui: ^UI) setBoxCursor*(style: BoxStyle, cursor: window::Cursor) {
  ui.cursors[int(style)] = cursor
}

// >>> CELLS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

fn (ui: ^UI) cellScroll*(scroll: th::Vf2) {
  ui.cell.scroll = scroll
}

fn (ui: ^UI) cellAlign*(align: real) {
  ui.cell.align = align
}

fn (ui: ^UI) cellStretch*() {
  ui.cell.flags |= cellStretched
}

fn (ui: ^UI) cellSameSize*() {
  ui.cell.flags |= cellSameSize
}

fn (ui: ^UI) cellPos*(pos: th::Vf2) {
  ui.cell.kind = .rect
  ui.cell.rect = {pos.x, pos.y, 0, 0}
}

fn (ui: ^UI) cellPadding*(p: real) {
  ui.cell.padding = p
}

fn (ui: ^UI) cellRect*(r: rect::Rect) {
  ui.cell.kind = .rect
  ui.cell.rect = r
}

fn (ui: ^UI) cellClip*() {
  ui.cell.flags |= cellClipped
}

fn (ui: ^UI) cellUnclip*() {
  ui.cell.flags |= cellUnclipped
}

fn (ui: ^UI) cellColor*(color: uint32) {
  ui.cell.color = color
}

fn (ui: ^UI) cellJustify*(j: real) {
  ui.cell.kind = .justify
  ui.cell.justify = j
}

// >>> EVENTS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

fn (ui: ^UI) isHovered*(): bool {
  ui.lastEl().interactive = true
  return ui.attention.hovered == ui.lastEl().id
}

fn (ui: ^UI) isFocused*(): bool {
  ui.lastEl().interactive = true
  return ui.attention.focused == ui.lastEl().id
}

fn (ui: ^UI) isActive*(): bool {
  ui.lastEl().interactive = true
  return ui.attention.active == ui.lastEl().id && ui.attention.active != 0
}

// >>> WIDGETS >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

fn (ui: ^UI) drawCustom*(draw: fn (dest: rect::Rect)) {
  ui.lastEl().renderObject = themer::mkCustom(draw)
}

fn (ui: ^UI) img*(img: image::Image) {
  el := ui.addEl()
  el.size = img.getDims()
  el.renderObject = render::RenderImage{img}
}

fn (ui: ^UI) stub*(size: th::Vf2) {
  el := ui.addEl()
  el.size = size
}

fn (ui: ^UI) img2*(img: image::Image, r: rect::Rect) {
  el := ui.addEl()
  el.size = r.getDims()
  el.renderObject = render::RenderImageCrop{img, r}
}

fn (ui: ^UI) heading*(text: str) {
  el := ui.addEl()
  el.size = ui.font.measure(text).mulf(3)
  el.renderObject = render::RenderLabel{font: ui.font, text: text, scale: ui.io.scale*3, color: el.cell.color}
}

fn (ui: ^UI) label*(text: str) {
  el := ui.addEl()
  el.size = ui.font.measure(text)
  el.renderObject = render::RenderLabel{font: ui.font, text: text, scale: ui.io.scale, color: el.cell.color}
}

fn (ui: ^UI) spring*(power: real)

fn (ui: ^UI) buttonSpacer*() {
  el := ui.addEl()
  el.layout = .spacer
  el.size.y = ui.font.measure(" ").y+20
}

fn (ui: ^UI) button2*(name: str, cb: fn(ui: ^UI), flags: uint = 0, padding: real = 5): bool {
  ui.cellPadding(padding)
  el := ui.pushEl()
  ui.pushIdStr(name)
  if flags & buttonFlagPushed > 0 {
    ui.boxStyle(.buttonPushed)
  } else {
    ui.boxStyle(.button)
  }

  // @HACK: Hardcoded styling
  el.interactive = true
  el.layout = .row

  cb(ui)

  // @MARK(DirectInput)
  pressed := 
    input::isJustReleased(.mouse1) && 
    ui.attention.hovered == el.id &&
    ui.attention.focused == el.id
  
  ui.popId()
  ui.popEl()

  return pressed
}

fn (ui: ^UI) button*(text: str, flags: uint = 0): bool {
  ui.cellAlign(0.5)
  return ui.button2(text, |text| {
    ui.spring(1)
    ui.label(text)
    ui.spring(1)
  }, flags, 10)
}

fn (ui: ^UI) window*(title: str, cb: fn(ui: ^UI), hidden: bool = false) {
  ui.vtbl.doWindow(title, cb, hidden)
}

fn (ui: ^UI) scrollArea*(cb: fn(ui: ^UI, scrollbar: ^scrollbar::Scrollbar)) {
  ui.vtbl.doScrollArea(ui, cb)
}

fn (ui: ^UI) textEditSingle*(name: str, value: ^str): bool {
  return ui.vtbl.doTextEditSingle(ui, name, value)
}

fn (ui: ^UI) spring*(power: real) {
  el := ui.addEl()
  el.layout = .spring
  el.cell.kind = .justify
  el.cell.justify = power
}

fn (ui: ^UI) row*(cb: fn(ui: ^UI), width: real = 0): ^El {
  el := ui.pushEl()
  el.size.x = width
  el.layout = .row
  cb(ui)
  ui.popEl()

  return el
}

fn (ui: ^UI) col*(cb: fn(ui: ^UI), height: real = 0): ^El {
  el := ui.pushEl()
  el.size.y = height
  el.layout = .col
  cb(ui)
  ui.popEl()

  return el
}

// @HACK: Just to make the editor compile while there's old code.
fn (ui: ^UI) buttonOLD*(text: str, rect: rect::Rect, invert: bool = false): bool {
  return false
}

// >>> DEBUG >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

// @NOTE: Step 1 in debug UI, draws the outlines.
fn (ui: ^UI) drawDebug(el: ^El, hue: real = 0) {
  for i, child in el.children {
    ui.drawDebug(child, hue+0.25)
  }

  rect := el.cell.rect

  if el.layout == .spring {
    if el.parent.layout == .row {
      util::drawArrow2(
        {rect.x, rect.y+rect.h/2},
        {rect.x+rect.w, rect.y+rect.h/2},
        color::hsv(hue, 1.0, 0.6, 1.0)
      )
    } else {
      util::drawArrow2(
        {rect.x+rect.w/2, rect.y},
        {rect.x+rect.w/2, rect.y+rect.h},
        color::hsv(hue, 1.0, 0.6, 1.0)
      )
    }
  }

  // @MARK(DirectInput): Probably doesn't matter here.
  if coll::vf2ToRect(input::getMousePos(), rect) {
    canvas::drawRectLines(color::hsv(hue, 1.0, 0.6, 1.0), rect, 2)
  } else {
    canvas::drawRectLines(color::hsv(hue, 1.0, 0.6, 0.4), rect, 1)
  }

  if el.id != 0 && ui.attention.focused == el.id {
    canvas::drawRectLines(0xFF0000FF, rect, 4)
  }
}

// @NOTE: Step 2 in debug UI, draws the ID of hovered elements.
fn (ui: ^UI) drawDebug2(el: ^El, hue: real = 0, hy: real = 0) {
  id := ui.retained[el.id].id
  vis := ui.retained[el.id].isVisible
  rect := el.cell.rect

  // @MARK(DirectInput): Probably doesn't matter here.
  if coll::vf2ToRect(input::getMousePos(), rect) {
    border := color::hsv(hue, 1.0, 0.8, 0.6)
    text := color::hsv(hue, 1.0, 0.4, 1.0)

    if selfhasptr(id) {
      strId := sprintf("%v", id)
      sz := ui.font.measure(strId).mulf(0.5*ui.io.scale)
      canvas::drawRect(border, {rect.x, rect.y-sz.y, sz.x, sz.y})
      ui.font.draw(strId, rect.getPos().sub({0, sz.y}), text, 0.5*ui.io.scale)
    }

    info := sprintf("Id:%20v | LayoutType:%v | Active:%5v | Parent:%20v | Vis:%v", el.id, el.layout, ui.attention.active == el.id, el.parent == null ? uint(0) : el.parent.id, vis)
    sz := ui.font.measure(info).mulf(0.5*ui.io.scale)
    canvas::drawRect(border, {0, hy, sz.x, sz.y})
    ui.font.draw(info, {0, hy}, 0x000000FF, 0.5*ui.io.scale)
    hy += sz.y
  }

  for i, child in el.children {
    ui.drawDebug2(child, hue+0.25, hy)
  }
}
