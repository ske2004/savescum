// Main UI controller

import (
  "core.um"
  "rect.um"
)

type (
  El* = struct {
    hovered: bool
    pressed: bool
    layer: int
    id: str
    scissorRect: rect::Rect
    rect: rect::Rect
  }

  UI* = struct {
    classes: map[str][]El
    el: El
    core: core::Core
  }
)

fn mk*(): UI {
  return {
    core: core::mk()
  }
}

fn (ui: ^UI) begin*() {
  ui.classes = {}
}

fn (ui: ^UI) beginSpace*(id: str, r: rect::Rect): El {
  pel := ui.el
  ui.core.beginTool(id, r)

  // HACK: yeah
  scissorRect := rect::Rect{
    x: 0,
    y: 0,
    w: 10000,
    h: 10000
  }

  if sr, ok := ui.core.ctx.getCurrentScissorRect(); ok {
    scissorRect = sr
  }

  ui.el = El{
    hovered: ui.core.currentTool == ui.core.hoveredTool, 
    pressed: ui.core.currentTool == ui.core.activeTool && ui.core.mouseState.lmb.isDown,
    layer: ui.core.ctx.currentLayerId,
    id: id,
    scissorRect: scissorRect,
    rect: r
  }
  return pel
}

fn (ui: ^UI) endSpace*(pel: El) {
  ui.core.endTool()
  ui.el = pel
}

// Creates a space with a default "screen" container for you to use.
fn (ui: ^UI) space*(id: str, r: rect::Rect, cb: fn(ui: ^UI)) {
  pel := ui.el
  ui.core.beginTool(id, r)

  // HACK: yeah
  scissorRect := rect::Rect{
    x: 0,
    y: 0,
    w: 10000,
    h: 10000
  }

  if sr, ok := ui.core.ctx.getCurrentScissorRect(); ok {
    scissorRect = sr
  }

  ui.el = {
    hovered: ui.core.currentTool == ui.core.hoveredTool, 
    pressed: ui.core.currentTool == ui.core.activeTool && ui.core.mouseState.lmb.isDown,
    layer: ui.core.ctx.currentLayerId,
    id: id,
    scissorRect: scissorRect,
    rect: r
  }
  cb(ui)
  ui.core.endTool()
  ui.el = pel
}

// Allows to hijack a tool and use it as a space.
fn (ui: ^UI) hack*(id: str, cb: fn(ui: ^UI)) {
  tool := ui.core.maybeAcquireToolNode(id)

  if tool != null {
    ui.space(id, tool.rect, cb)
  }
}

// ------------- IDENTIFICATION
fn (ui: ^UI) class*(class: str) {
  ui.classes[class] = append(ui.classes[class], ui.el)
}

// ------------- RENDERING
fn (ui: ^UI) render*(class: str, cb: fn(ui: ^UI, state: El)) {
  if !validkey(ui.classes, class) {
    return
  }

  // TODO: I won't need this after migrating everything to this new UI system.
  l := ui.core.ctx.currentLayerId

  for i, el in ui.classes[class] {
    ui.core.ctx.setLayer(el.layer)
    ui.core.ctx.beginScissorRect(el.scissorRect)
    cb(ui, el)
    ui.core.ctx.endScissor()
  }
  
  ui.core.ctx.setLayer(l)
}

// ------------- STATES
fn (ui: ^UI) isHovered*(): bool {
  return ui.el.hovered
}

fn (ui: ^UI) isPressed*(): bool {
  return ui.el.pressed
}

// ------------- EVENTS
fn (ui: ^UI) onClick*(handler: fn(ui: ^UI)) {
  if ui.core.currentTool == ui.core.hoveredTool && ui.core.mouseState.lmb.isReleased {
    handler(ui)
  }
}

// ------------- WIDGETS
fn (ui: ^UI) button*(text: str, rect: rect::Rect, invert: bool = false): bool {
  pel := ui.beginSpace(text, rect)
  ui.class(invert ? "button_invert" : "button")
  clicked := ui.core.currentTool == ui.core.hoveredTool && ui.core.mouseState.lmb.isReleased
  ui.endSpace(pel)
  return clicked
}
