// Main UI controller

import (
  "std.um"
  "canvas.um"
  "rect.um"
  "th.um"
  "input.um"
  "coll.um"
  "../misc/fnv1.um"
)

type (
  El* = struct {
    label: bool
    id: uint
    padding: real
    size: th::Vf2
    text: str
  }

  Retained* = struct {
    id: any
    rect: rect::Rect
  }

  UI* = struct {
    retained: map[uint]Retained
    ids: []uint
    elements: []El
  }
)

fn mk*(): UI {
  return {}
}

fn (ui: ^UI) pass*(cb: fn(ui: ^UI), render: fn(ui: ^UI, r: rect::Rect, el: ^El)) {
  ui.ids = {fnv1::INIT}
  cb(ui)

  // calculate layout
  x := 10.0
  y := 10.0

  for i, el in ui.elements {
    r := rect::Rect{x, y, el.size.x+el.padding*2, el.size.y+el.padding*2}
    ui.retained[el.id].rect = r
    render(ui, ui.retained[el.id].rect, &el)
    y += el.size.y+el.padding*2
  }

  delete(ui.retained, 0)

  ui.elements = {}
}

fn (ui: ^UI) pushIdInt*(i: int) {
  id := fnv1::hash64i(ui.ids[len(ui.ids)-1], i)
  ui.retained[id].id = i
  ui.ids = append(ui.ids, uint(i))
}

fn (ui: ^UI) pushIdStr*(s: str) {
  id := fnv1::hash64s(ui.ids[len(ui.ids)-1], s)
  ui.retained[id].id = s
  ui.ids = append(ui.ids, id)
}

fn (ui: ^UI) popId*() {
  ui.ids = delete(ui.ids, len(ui.ids)-1)
}

fn (ui: ^UI) id*(): uint {
  return ui.ids[len(ui.ids)-1]
}

// ------------- WIDGETS
fn (ui: ^UI) label*(text: str) {
  el := El{
    label: true,
    size: canvas::textSize(text, 2),
    text: text
  }

  ui.elements = append(ui.elements, el)
}

fn (ui: ^UI) button*(text: str): bool {
  ui.pushIdStr(text)

  el := El{
    id: ui.id(),
    padding: 10,
    size: canvas::textSize(text, 2),
    text: text
  }

  retained := ui.retained[el.id].rect
  pressed := input::isJustPressed(.mouse1) && coll::vf2ToRect(input::getMousePos(), retained)
  ui.elements = append(ui.elements, el)

  ui.popId()
  return pressed
}

fn (ui: ^UI) buttonOLD*(text: str, rect: rect::Rect, invert: bool = false): bool {
  return false
}

// ------------- DEBUG
fn (ui: ^UI) drawDebug*() {
  for id, r in ui.retained {
    canvas::drawRectLines(0xff0000ff, r.rect, 1)
    sz := canvas::textSize(sprintf("%v", r.id), 2)
    canvas::drawRect(0xff000022, rect::Rect{r.rect.x, r.rect.y, sz.x, sz.y})
    canvas::drawText(sprintf("%v", r.id), r.rect.getPos(), 0x770000FF, 2)
  }
}
