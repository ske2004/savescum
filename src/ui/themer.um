import (
  "image.um"
  "rect.um"
)

type (
  BoxRenderer* = interface {
    draw(rect: rect::Rect)
  }

  Custom* = struct {
    drawfn: fn(dest: rect::Rect)
  }

  BoxNinepatch* = struct {
    img: image::Image
    outer, inner: rect::Rect
  }
)

fn mkNinepatch*(img: image::Image, outer, inner: rect::Rect): BoxNinepatch {
  return BoxNinepatch{img, outer, inner}
}

fn (b: ^BoxNinepatch) draw*(dest: rect::Rect) {
  b.img.drawNinepatch(b.outer, b.inner, dest)
}

fn mkCustom*(draw: fn(dest: rect::Rect)): Custom {
  return Custom{draw}
}

fn (c: ^Custom) draw*(dest: rect::Rect) {
  c.drawfn(dest)
}

