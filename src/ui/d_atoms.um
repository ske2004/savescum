import (
	"rect.um"
)

type ToolNode* = struct {
  children: map[str]^ToolNode
  parent: ^ToolNode
  userdata: interface{}
  // If set to -1, the node is frozen and not pruned therefore.
  lastFrameTouched: int
  layer: int
  rect: rect.Rect
}

type ToolState* = struct {
  active: bool
  hovered: bool
  focused: bool
}

/// @return True if child is related to parent node. 
/// @param[in] parent Parent node.
/// @param[in] child Child node.
fn areToolsRelated*(parent, child: ^ToolNode): bool {
  for child != null && child != parent {
    child = child.parent
  }
  return child == parent
}


/// @brief Disconnects all nodes in the GUI from their parents.
///        Due to how the Umka GC currently works, it's not able to collect
///        circular references, so I must do it myself.
/// @param[in] node The tool node to remove cyclic references from.
fn disconnectAllNodes*(node: ^ToolNode) {
  node.parent = null
  for _, child in node.children {
    disconnectAllNodes(child)
  }
}
