import (
	"d_core.um"
  "d_atoms.um"
  "../editor/d_drawcmd.um"
  "rect.um"
  "th.um"
  th_font = "font.um"
  "../d_util.um"
  "../d_global.um"
)

type ToolDebugFrame = struct {
  title: str
  color: uint32
  showTitle: bool
  background: bool
  rect: rect.Rect
}

fn makeToolDebugFrameFromTool(core: ^d_core.Core, name: str, tool: ^d_atoms.ToolNode): ToolDebugFrame {
  toolState := core.getToolState(tool)

  color := th.red
  background := false
  showTitle := false

  if toolState.active {
    background = true
  }

  if toolState.hovered || toolState.active {
    showTitle = true
    color = 0x00   

    color |= int(toolState.hovered) * th.blue
    color |= int(toolState.active) * th.green
  }

  return ToolDebugFrame{title: name, color: color, showTitle: showTitle, rect: tool.rect, background: background}
}

/**
 * \brief Converts uint32 color to normalized RGBA.
 */
fn decomposeColor(color: uint32): [4]real {
  return [4]real{((color >> 24) & 0xFF) / 255.0, ((color >> 16) & 0xFF) / 255.0, ((color >> 8) & 0xFF) / 255.0, ((color >> 0) & 0xFF) / 255.0}
}

/**
 * \brief Returns true if the foreground will look good white,
 *        or black. Heuristic for things like text on a background.
 */
fn isWhiteForeground(color: uint32): bool {
  realColor := decomposeColor(color)
  sum := realColor[0] * 0.7 + realColor[1] * 1.5 + realColor[2] * 0.8
  return sum >= 1.5
}

fn drawToolDebugFrame(ctx: ^d_drawcmd.DrawContext, frame: ToolDebugFrame, font: th_font.Font) {
  textColor := th.white
  if isWhiteForeground(frame.color) {
    textColor = th.black
  }

  if frame.showTitle {
    // Draw the title.
    planeSize := font.measure(frame.title)
    r := rect.mk(frame.rect.x, frame.rect.y-planeSize.y, planeSize.x, planeSize.y)
    r = d_util.rectKeepInBounds(r, rect.mk(0, 0, d_global.screen.w, d_global.screen.h))

    if frame.background {
      ctx.drawRect(textColor, d_util.rectShrink(r, -1))
    }
    ctx.drawRect(frame.color, r)
    ctx.drawText(font, frame.title, r.getPos(), textColor)
  }
  if frame.background {
    ctx.drawRectLines(textColor, frame.rect, 3)
  }
  ctx.drawRectLines(frame.color, frame.rect)
}

fn putDebugFramesRecursive(core: ^d_core.Core, font: th_font.Font, ctx: ^d_drawcmd.DrawContext, tool: ^d_atoms.ToolNode, prefix: str = "") {
  for toolName, toolChild in tool.children {
    ctx.setLayer(toolChild.layer)
    if toolChild.lastFrameTouched == -1 {
      return
    }

    drawToolDebugFrame(ctx, makeToolDebugFrameFromTool(core, toolName, toolChild), font)
    putDebugFramesRecursive(core, font, ctx, toolChild, toolName+"::")
  }
}

fn putDebugFrames*(core: ^d_core.Core, font: th_font.Font, ctx: ^d_drawcmd.DrawContext) {
  putDebugFramesRecursive(core, font, ctx, core.tools)
}
