import (
  "atoms.um"
  "coll.um"
  "../misc/mouseinput.um"
  "../gfx/drawcmd.um"
  "std.um"
  "rect.um"
)


type (
  EventMouse = enum {
    left
    middle
    right
    scroll
    _count
  }

  InputSink* = struct {
    sunk: [int(EventMouse._count)]bool
  }

  Core* = struct {
    mouseState: mouseinput::MouseState
    frameNumber: uint
    inputSink: InputSink

    ctx: drawcmd::DrawContext
    tools: ^atoms::ToolNode
    currentTool: ^atoms::ToolNode
    maybeActiveTool: ^atoms::ToolNode
    activeTool: ^atoms::ToolNode
    hoveredTool: ^atoms::ToolNode
    focusedTool: ^atoms::ToolNode
  }

  Events* = struct {
    sink: ^InputSink
    // The events the element itself has sunk, so we can return true if the event were to be queried again.
    acquired: InputSink
    mask: InputSink
    mouseState: mouseinput::MouseState
  }
)


fn mk*(): Core {
  return {
    ctx: drawcmd::mk(),
    tools: new(atoms::ToolNode)
  }
}

fn (core: ^Core) getToolState*(tool: ^atoms::ToolNode): atoms::ToolState {
  hovered := false
  t := core.hoveredTool
  for t != null {
    hovered = hovered || tool == t
    t = t.parent
  }

  return atoms::ToolState{
    active: tool == core.activeTool,
    hovered: hovered,
    focused: tool == core.focusedTool
  }
}

fn (core: ^Core) maybeAcquireToolNode*(name: str): ^atoms::ToolNode {
  if !validkey(core.currentTool.children, name) {
    return null
  }

  return &core.currentTool.children[name]
}

// Prunes all tools untouched last frame
fn (core: ^Core) pruneToolsRecursive*(node: ^atoms::ToolNode) {
  if node.lastFrameTouched == -1 {
    // Nodes with last frame -1 are not candidates to pruning (just a hardcoded value).
    // Here we automatically unfreeze the node because you need to freeze it every time.
    node.lastFrameTouched = core.frameNumber
    return
  }

  for key in node.children {
    core.pruneToolsRecursive(&node.children[key])

    if node.children[key].lastFrameTouched < core.frameNumber {
      // Fix leak
      node.children[key].parent = null
      node.children = delete(node.children, key)
    }
  }
}

fn (core: ^Core) freezeTool*(name: str) {
  node := core.maybeAcquireToolNode(name)
  if node != null {
    node.lastFrameTouched = -1
  }
}

fn (core: ^Core) begin*() {
  core.currentTool = core.tools
}

fn (core: ^Core) beginTool*(name: str, toolRect: rect::Rect): ^atoms::ToolNode {
  node := &core.currentTool.children[name]
  node.lastFrameTouched = core.frameNumber
  node.rect = toolRect
  node.parent = core.currentTool
  node.layer = core.ctx.currentLayerId
  core.currentTool = node
  isOverMaybeActiveTool := true

  if core.maybeActiveTool != null {
    isOverMaybeActiveTool = node.layer >= core.maybeActiveTool.layer
  }
 
  if scissorRect, ok := core.ctx.getCurrentScissorRect(); ok {
    isOverMaybeActiveTool = isOverMaybeActiveTool && coll::vf2ToRect(core.mouseState.pos, scissorRect)
  }

  if isOverMaybeActiveTool && coll::vf2ToRect(core.mouseState.pos, node.rect) {
    core.maybeActiveTool = node
  }

  return core.currentTool
}

fn (core: ^Core) getCurrentToolName*(): str {
  p := core.currentTool.parent
  if p == null {
    return ""
  }
  for key in p.children {
    if &p.children[key] == core.currentTool {
      return key
    }
  }
  return ""
}

fn (core: ^Core) getCurrentToolState*(): atoms::ToolState {
  return core.getToolState(core.currentTool)
}

fn (core: ^Core) isCurrentToolHovered*(): bool {
  return core.getCurrentToolState().hovered
}

fn (core: ^Core) isCurrentToolActive*(): bool {
  return core.getCurrentToolState().active
}

fn (core: ^Core) isCurrentToolFocused*(): bool {
  return core.getCurrentToolState().focused
}

const allSunk = InputSink{sunk: {true, true, true, true}}

// Creates an input sink with all inputs set to 1.
// Can be used for masking.
fn initInputSinkSet*(): InputSink {
  return allSunk
}

fn (core: ^Core) endTool*(): Events {
  if core.currentTool == null {
    std::assert(false, "Node is null, beginTool/endTool mismatched!")
  }

  mask := InputSink{}
  if !atoms::areToolsRelated(core.currentTool, core.activeTool) {
    // Block all events if the current tool isn't hovered.
    mask = initInputSinkSet()
  }

  core.currentTool = core.currentTool.parent

  return Events{sink: &core.inputSink, mask: mask, mouseState: core.mouseState}
}

fn (core: ^Core) getProperty*(name: str, def: any): any {
  // Create a dummy tool where we'll store the data.
  tool := core.beginTool(name, {-100000, -100000, 0, 0})
  core.endTool()

  if !valid(tool.userdata) {
    tool.userdata = def
  }

  return tool.userdata
}

fn (core: ^Core) getPropertyLazy*(name: str, getter: fn (): any): any {
  // Create a dummy tool where we'll store the data.
  tool := core.beginTool(name, {-100000, -100000, 0, 0})
  core.endTool()

  if !valid(tool.userdata) {
    tool.userdata = getter()
  }

  return tool.userdata
}


fn sinkAcquireMaskEvent*(sink, acquire: ^InputSink, mask: InputSink, event: EventMouse): bool {
  e := int(event)

  if e < 0 || e >= int(EventMouse._count) {
    std::assert(false, sprintf("Invalid event id: %d", e))
  }

  // This event is masked so we can't process it.
  if mask.sunk[e] {
    return false
  }

  // This event was acquired, so it's successful.
  if acquire.sunk[e] {
    return true
  }

  // This event was already sunk. Can't sink it again.
  if sink.sunk[e] {
    return false
  }

  // Sink and acquire the event.
  sink.sunk[e] = true
  acquire.sunk[e] = true

  return true
}

fn sinkEvent*(events: ^Events, event: EventMouse): bool {
  return sinkAcquireMaskEvent(events.sink, &events.acquired, events.mask, event)
}

fn (events: ^Events) queryMouse*(btn: EventMouse, which: int): bool {
  if sinkEvent(events, btn) == false {
    return false
  }

  var mouseButton: mouseinput::MouseButtonState

  switch btn {
    case .left: mouseButton = events.mouseState.lmb
    case .middle: mouseButton = events.mouseState.mmb
    case .right: mouseButton = events.mouseState.rmb
    default: std::assert(false, sprintf("Invalid mouse button index %d", btn))
  }

  switch which {
    case mouseinput::down: return mouseButton.isDown
    case mouseinput::pressed: return mouseButton.isPressed
    case mouseinput::released: return mouseButton.isReleased
    default: std::assert(false, sprintf("Invalid mouse button property index %d", which))
  }

  return false
}

fn (events: ^Events) queryScroll*(): real {
  if sinkEvent(events, .scroll) == false {
    return 0
  }

  return events.mouseState.scroll.y
}
