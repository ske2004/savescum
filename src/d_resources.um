/* Resource loader.
 */

import (
  "image.um"
  th_font = "font.um"
  "audio.um"
)

type (
  ResourceLoader* = struct {
    errors: []str
  }
)

fn initResourceLoader*(): ResourceLoader {
  return ResourceLoader{errors: []str{}}
}

fn hasErrors*(loader: ^ResourceLoader): bool {
  return len(loader.errors) > 0
}

fn loadingError*(loader: ^ResourceLoader, path, why: str) {
  loader.errors = append(loader.errors, sprintf("Error loading %s: %s", path, why))
}

fn loadImage*(loader: ^ResourceLoader, path: str): image.Image {
  theImage := image.load(path)
  
  if theImage.validate() == false {
    loadingError(loader, path, "Could not load image.")
  }

  return theImage
}

fn loadAudio*(loader: ^ResourceLoader, path: str): audio.Sound {
  theAudio := audio.load(path)
  
  if theAudio.validate() == false {
    loadingError(loader, path, "Could not load audio.")
  }

  return theAudio
}


fn loadFont*(loader: ^ResourceLoader, path: str, size: real, filter: th_font.Filter): th_font.Font {
  theFont := th_font.load(path, size, filter)
  
  if theFont.validate() == false {
    loadingError(loader, path, "Could not load font.")
  }

  return theFont
}

// TODO: loadWorld. I don't need it right now as I want to create a world if it doesn't exist.
//       But that's not going to be the case with the actual game where I must have the world.
