import (
  "coll.um"
  "th.um"
  "rect.um"
  "canvas.um"
  "input.um"
  "image.um"
  "../misc/strings.um"
  "../dbg/dbg.um"
  "color.um"
  "../gfx/rerp.um"
  "../gfx/background.um"
  "../data/resources.um"
  "../misc/util.um"
  "world.um"
  "../shared/global.um"
  "world_data.um"
  "../gfx/font.um"
  "std.um"
  "audio.um"
  "../ui/notification.um"
)

type ShapeType = enum {
  none
  block
  leftUpSlope
  rightUpSlope
  leftDownSlope
  rightDownSlope
}

// TPS 250
const updateStep = 1/250.0
const updateStepMs* = 4

type (
  Shape* = struct {
    rect: rect::Rect
    shape: ShapeType
  }

  Tag* = struct {
    isSet: bool
    param: str
  }

  TagSet* = struct {
    tags: map[str]Tag
  }

  Character* = struct {
    name: str
    id: str
    tags: TagSet
    originalRect: rect::Rect
    rect: rect::Rect
    vel: th::Vf2
    onGround: bool
    onSlope: bool
  }
)

fn (t: ^TagSet) set*(tag: str) {
  params := strings::splitBy(tag, ':')
  if len(params) > 1 {
    t.tags[params[0]].param = params[1]
  }
  t.tags[params[0]].isSet = true
}

fn (t: ^TagSet) param*(tag: str): str {
  return t.tags[tag].param
}

fn (t: ^TagSet) isSet*(tag: str): bool {
  return validkey(t.tags, tag) && t.tags[tag].isSet
}

fn initTagSetFromString*(s: str): TagSet {

  tagSet := TagSet{map[str]Tag{}}

  accum := ""
  tagname := ""
  param := false
  tag := Tag{false, ""}
  for i, ch in s {
    if ch == ':' {
      tagname = accum
      accum = ""
      param = true
    } else if ch == ';' {
      if param {
        tag.param = accum
      } else {
        tagname = accum
      }
      tag.isSet = true
      tagSet.tags[tagname] = tag
      accum = ""
      param = false
      tag = Tag{false, ""}
    } else {
      accum += ch
    }
  }

  if param {
    tag.param = accum
  } else {
    tagname = accum
  }

  if tagname != "" {
    tag.isSet = true
    tagSet.tags[tagname] = tag
  }

  return tagSet
}

type ChumState = struct {
  time: real
  dir: int
  rotTime: real
  walkTime: real
  loadTime: real
  visRect: rect::Rect
  ent: Character
  toggleActiveStatic: bool
  toggleActiveWater: bool
}

var (
  time: real
  coyoteTime: int
  chumFrown: bool = false
  imgObj: image::Image
  imgChum: image::Image
  defaultFont: font::Font
  bgAudio: audio::Sound
  palStep: audio::Sound
  palJump: audio::Sound
  palLand: audio::Sound
  jitterDir: real
  jitterTime: real
  jitterCounter: int
  metaBoulders: bool
  wasOnGround: bool
  previewingLoad: bool
  stopPreview: bool

  noSaveLoad: bool
  insideStatic: bool
  lockInput*: bool
  guides: []rect::Rect
  entities*: []Character
  sceneId*: int
  world*: world::World
  pal*: ChumState
  camera*: th::Vf2
  cameraScale*: real
  toggleActive: bool
  toggleActiveVal: real
  resetPoint: th::Vf2

  saves: []ChumState
  bufferState: ChumState
  showDebug*: bool = false
  lastUpdateTime: int = 0
  frameSkips*: int

  firstTime: bool = true

  rumbling: real
)

fn getCameraRect(): rect::Rect {
  return {pal.ent.rect.x+pal.ent.rect.w/2-global::screen.w/2, pal.ent.rect.y+pal.ent.rect.h/2-global::screen.h/2, global::screen.w, global::screen.h}
}

fn findGuideInPoint(p: th::Vf2): rect::Rect {
  for i, guide in guides {
    if coll::vf2ToRect(p, guide) {
      return guide
    }
  }

  return getCameraRect()
}

fn resetStates*() {
  toggleActive = false
  pal.toggleActiveStatic = metaBoulders
  pal.toggleActiveWater = true
  saves = {}
}

fn reset*() {
  pal.ent.rect.x = resetPoint.x
  pal.ent.rect.y = resetPoint.y
  pal.ent.vel.y = 0
  pal.ent.vel.x = 0
  resetStates()
}

fn getCameraTargetRect(): rect::Rect {

  guide := findGuideInPoint(pal.ent.rect.getPos())
  if input::isPressedc('z') && len(saves) > 0 {
    guide = findGuideInPoint(saves[len(saves)-1].ent.rect.getPos())
  }
  cameraRect := getCameraRect()
  scale := util::min(guide.w/cameraRect.w, guide.h/cameraRect.h)
  maxScale := 1.0/(global::screen.w/800)
  if scale > maxScale {
    scale = maxScale
  }

  // put at center
  cameraRect.w *= scale
  cameraRect.h *= scale
  if input::isPressedc('z') && len(saves) > 0 {
    cameraRect.x = saves[len(saves)-1].ent.rect.x+saves[len(saves)-1].ent.rect.w/2-cameraRect.w/2
    cameraRect.y = saves[len(saves)-1].ent.rect.y+saves[len(saves)-1].ent.rect.h/2-cameraRect.h/2
  } else {
    cameraRect.x = pal.ent.rect.x+pal.ent.rect.w/2-cameraRect.w/2
    cameraRect.y = pal.ent.rect.y+pal.ent.rect.h/2-cameraRect.h/2
  }

  return util::rectKeepInBounds(cameraRect, guide)
}

type CameraProperties = struct {
  pos: th::Vf2
  scale: real
}

fn getCameraProperties*(): CameraProperties {
  targetRect := getCameraTargetRect()
  return CameraProperties{targetRect.getPos(), util::min(global::screen.w/targetRect.w, global::screen.h/targetRect.h)}
}

fn cameraControl() {
  props := getCameraProperties()

  camera = rerp::iVf2(camera, props.pos, updateStep*10.0)
  cameraScale = rerp::iReal(cameraScale, props.scale, updateStep*10.0)
}

fn cameraOffsetPoint(p: th::Vf2): th::Vf2 {
  p.x -= camera.x
  p.y -= camera.y
  p.x *= cameraScale
  p.y *= cameraScale
  return p
}

fn cameraOffsetRect(r: rect::Rect): rect::Rect {
  r.x -= camera.x
  r.y -= camera.y
  r.x *= cameraScale
  r.y *= cameraScale
  r.w *= cameraScale
  r.h *= cameraScale
  return r
}

fn playerControl() {
  coyoteTime -= 1
  if wasOnGround && !pal.ent.onGround {
    coyoteTime = 40
  }
  if !wasOnGround && pal.ent.onGround {
    rumbling = 0.2
    palLand.start()
  }
  if (input::isPressed(.up) || input::gamepad().isPressed(.a)) && (pal.ent.onGround || coyoteTime > 0) {
    coyoteTime = 0
    palJump.start()
    pal.ent.vel.y = -3.65
  }
  if input::gamepad().id != -1 {
    stick := input::gamepad().stick(.left)

    if stick.x < -0.5 {
      pal.dir = 0
      pal.walkTime += updateStep*fabs(stick.x)
      pal.ent.vel.x = 2.5*stick.x
    } else if stick.x > 0.5 {
      pal.dir = 1
      pal.walkTime += updateStep*fabs(stick.x)
      pal.ent.vel.x = 2.5*stick.x
    }
  }
  if input::isPressed(.left) {
    pal.dir = 0
    pal.ent.vel.x = -2.5
    pal.walkTime += updateStep
  }
  if input::isPressed(.right) {
    pal.dir = 1
    pal.ent.vel.x = 2.5
    pal.walkTime += updateStep
  }

  if fabs(pal.ent.vel.x) < 0.1 {
    pal.walkTime = 0
  }

  if pal.ent.rect.y > 2e3 {
    reset()
  }

  if round(pal.walkTime*6+0.1) % 2 == 1 && pal.ent.onGround {
    palStep.setVol(0.5)
    palStep.setPitch(1.5+(std::rand()%10)/50.0)
    palStep.play()
  }

  wasOnGround = pal.ent.onGround
}

fn entPhysics(ent: ^Character) {
  gravity := updateStep*60.0*0.1

  ent.vel.y += gravity

  if ent.vel.y > 10 {
    ent.vel.y = 10
  }

  ent.rect.x += ent.vel.x*updateStep*60.0
  ent.rect.y += ent.vel.y*updateStep*60.0

  ent.onGround = false
  ent.onSlope = false
  ent.vel.x = 0
}

fn collCalcRectSnap(r, along: rect::Rect): th::Vf2 {
  x_left := r.x + r.w - along.x
  y_up := r.y + r.h - along.y

  x_right := along.x + along.w - r.x
  y_down := along.y + along.h - r.y

  var (min_x: real; min_y: real)

  if fabs(x_left) < fabs(x_right) {
    min_x = -x_left
  } else {
    min_x = x_right
  }

  if fabs(y_up) < fabs(y_down) {
    min_y = -y_up
  } else {
    min_y = y_down
  }

  if fabs(min_x) < fabs(min_y) {
    return th::Vf2{min_x, 0}
  }
  return th::Vf2{0, min_y}
}

fn collSortShapesByProximity(shapes: ^[]Shape, along: th::Vf2) {
  for i, closest^ in shapes {
    mindist := real(99999999)
    for j := i; j < len(shapes^); j++ {
      current := shapes[j].rect
      point := th::Vf2{current.x + current.w / 2, current.y + current.h / 2}
      dist := point.distanceTo(along)
      if dist < mindist {
        mindist = dist
        closest = &shapes[j]
      }
    }
    tmp := closest^
    closest^ = shapes[i]
    shapes[i] = tmp
  }
}

fn entVsShape(ent: ^Character, s: Shape) {
  r := s.rect
  snap := collCalcRectSnap(ent.rect, r)

  // Not a valid collision (probably pushed back by other blocks?)
  if coll::rectToRect(ent.rect, r) == false {
    return
  }

  switch s.shape {
  case ShapeType.leftUpSlope:
    cornerX := ent.rect.x + ent.rect.w - r.x
    if cornerX > r.w {
      cornerX = r.w
    }
    cornerY := ent.rect.y + ent.rect.h - r.y
    hitY := r.h - ((r.h/r.w) * (cornerX))
    if hitY > r.h {
      hitY = r.h
    }

    if cornerY > hitY {
      ent.vel.y = 0
      ent.onGround = true
      ent.onSlope = true
      ent.rect.y += hitY-cornerY
    }
  case ShapeType.rightUpSlope:
    cornerX := ent.rect.x - r.x
    if cornerX < 0 {
      cornerX = 0
    }
    cornerY := ent.rect.y + ent.rect.h - r.y
    hitY := (r.h/r.w) * (cornerX)

    if cornerY > hitY {
      ent.vel.y = 0
      ent.onGround = true
      ent.onSlope = true
      ent.rect.y += hitY-cornerY
    }
  case ShapeType.leftDownSlope:
    cornerX := ent.rect.x + ent.rect.w - r.x
    if cornerX > r.w {
      cornerX = r.w
    }
    cornerY := ent.rect.y - r.y
    hitY := (r.h/r.w) * (cornerX)

    if cornerY < hitY {
      if ent.vel.y < 0 {
        ent.vel.y = 0
      }
      ent.rect.y += hitY-cornerY
    }
  case ShapeType.rightDownSlope:
    cornerX := ent.rect.x - r.x
    if cornerX < 0 {
      cornerX = 0
    }
    cornerY := ent.rect.y - r.y
    hitY := r.h - ((r.h/r.w) * (cornerX))

    if cornerY < hitY {
      if ent.vel.y < 0 {
        ent.vel.y = 0
      }
      ent.rect.y += hitY-cornerY
    }
  case ShapeType.block:
    if snap.x != 0 {
      ent.vel.x = 0
    } else if (snap.y > 0 && ent.vel.y < 0) || (snap.y < 0 && ent.vel.y > 0) {
      ent.vel.y = 0
    }

    if snap.y < 0 {
      ent.onGround = true
    }
    ent.rect.x += snap.x
    ent.rect.y += snap.y
  }
}

fn entConstructCollidingSolids(ent: ^Character): []Shape {
  tangents := world.getTangentTiles(rect::Rect{ent.rect.x-1, ent.rect.y-1, ent.rect.w+1, ent.rect.h+1})
  solids := []Shape{}
  nonBlockSolids := []Shape{}

  for i, entity^ in entities {
    if entity.id == ent.id {
      continue
    }
    if coll::rectToRect(ent.rect, entity.rect) && entity.tags.isSet("boulder") {
      solids = append(solids, Shape{entity.rect, ShapeType.block})
    }
  }

  for i, tangent in tangents {
    shapeRect := rect::Rect{tangent.x*world.tileset.tileSizeX, tangent.y*world.tileset.tileSizeY, world.tileset.tileSizeX, world.tileset.tileSizeY}
    shapeType := ShapeType.none

    switch tangent.id {
      // slab
      case 25: shapeType = ShapeType.block
        shapeRect.y += world.tileset.tileSizeY/2
        shapeRect.h /= 2
      case 30: if toggleActive { shapeType = ShapeType.block }
      case 31: if !toggleActive { shapeType = ShapeType.block }
      case 1, 5, 7, 29:   shapeType = ShapeType.block
      case 9:   shapeType = ShapeType.leftUpSlope
      case 10:  shapeType = ShapeType.rightUpSlope
      case 13:  shapeType = ShapeType.leftDownSlope
      case 14:  shapeType = ShapeType.rightDownSlope
      case 15:  shapeType = ShapeType.leftUpSlope
        shapeRect.h /= 2
      case 16:  shapeType = ShapeType.rightUpSlope
        shapeRect.h /= 2
      case 4:   shapeType = ShapeType.leftUpSlope
        shapeRect.y += world.tileset.tileSizeY/2
        shapeRect.h /= 2
      case 8:   shapeType = ShapeType.rightUpSlope
        shapeRect.y += world.tileset.tileSizeY/2
        shapeRect.h /= 2
      case 11:  shapeType = ShapeType.rightDownSlope
        shapeRect.h /= 2
      case 12:  shapeType = ShapeType.leftDownSlope
        shapeRect.h /= 2
    }

    if shapeType == ShapeType.block {
      solids = append(solids, Shape{shapeRect, shapeType})
    } else {
      nonBlockSolids = append(nonBlockSolids, Shape{shapeRect, shapeType})
    }
  }


  collSortShapesByProximity(&solids, ent.rect.center())
  collSortShapesByProximity(&nonBlockSolids, ent.rect.center())
  solids = append(solids, nonBlockSolids)
  return solids
}

fn entCheckCollision(ent: ^Character): bool {
  r := util::rectShrink(ent.rect, 1)

  solids := entConstructCollidingSolids(ent)
  for i, shape in solids {
    if shape.shape == ShapeType.block {
      if coll::rectToRect(r, shape.rect) {
        return true
      }
    }
    // TODO: Just re-use the entVsShape function here.
  }

  return false
}

fn entSolveCollision(ent: ^Character) {
  solids := entConstructCollidingSolids(ent)

  for i, solid in solids {
    entVsShape(ent, solid)
  }
}

fn _drawRectTangents(r: rect::Rect) {
  solids := entConstructCollidingSolids(&pal.ent)

  for i, solid in solids {
    rec := cameraOffsetRect(solid.rect)
    switch solid.shape {
    case ShapeType.block:
      canvas::drawRect(0x00FF0055, rec)
    case ShapeType.leftUpSlope, ShapeType.rightDownSlope:
      canvas::drawLine(0x00FF0055, th::Vf2{rec.x, rec.y+rec.h}, th::Vf2{rec.x+rec.w, rec.y}, 2)
    case ShapeType.rightUpSlope, ShapeType.leftDownSlope:
      canvas::drawLine(0x00FF0055, th::Vf2{rec.x, rec.y}, th::Vf2{rec.x+rec.w, rec.y+rec.h}, 2)
    }
    canvas::drawText(sprintf("%v", i), th::Vf2{rec.x, rec.y}, th::white, cameraScale)
  }
}

fn convertEntityDescToCharacter(ent: world_data::EntityDesc): Character {
  return Character{name: ent.name, id: ent.id, tags: initTagSetFromString(ent.tags), rect: ent.rect}
}

fn findEntity*(id: str): ^Character {
  for i in entities {
    if entities[i].id == id {
      return &entities[i]
    }
  }

  return null
}

fn start*(worldData: world_data::WorldData) {
  stopPreview = false
  previewingLoad = false
  if firstTime {
    notification::put({.info, "Welcome to the demo!\nPress 'Z' to load the last save,\n      'X' to save the current state,\n      'R' to reset the level.\n      'C' to preview a load."})
    firstTime = false
  }
  bgAudio.seekToFrame(0)
  // bgAudio.play()
  lastUpdateTime = th::time
  toggleActive = false
  pal.toggleActiveWater = true
  lockInput = false
  metaBoulders = false

  world = worldData.world

  pal.ent = Character{id: ">>player", tags: initTagSetFromString("Player"), rect: rect::Rect{world.playerSpawnPos.x*world.tileset.tileSizeX, world.playerSpawnPos.y*world.tileset.tileSizeY, world.tileset.tileSizeX/1.2, world.tileset.tileSizeY}}

  resetPoint.x = pal.ent.rect.x
  resetPoint.y = pal.ent.rect.y
  pal.rotTime = 0
  pal.walkTime = 0
  pal.dir = 0

  entities = make([]Character, 0)
  guides = make([]rect::Rect, 0)

  for i, ent in worldData.entities {
    chr := convertEntityDescToCharacter(ent)
    chr.originalRect = chr.rect
    if chr.tags.isSet("Comment") {
      if chr.tags.isSet("Show") {
        dbg::logt(sprintf("Comment: %v", chr.name))
        entities = append(entities, chr)
      }
      continue
    }
    if chr.tags.isSet("meta_boulders") {
      metaBoulders = chr.tags.param("meta_boulders") == "on"
    }
    if chr.tags.isSet("Guide") {
      guides = append(guides, chr.rect)
    } else {
      entities = append(entities, chr)
    }
  }

  pal.toggleActiveStatic = metaBoulders
  saves = []ChumState{}
  camera = getCameraProperties().pos
  cameraScale = getCameraProperties().scale
}

fn stop*() {
  bgAudio.stop()
}

fn init*(rl: ^resources::ResourceLoader) {
  bgAudio = resources::loadAudio(rl, "data/audio/soundtrack/scene1.ogg")
  palStep = resources::loadAudio(rl, "data/audio/sfx/pal_walk.ogg")
  palJump = resources::loadAudio(rl, "data/audio/sfx/pal_jump.ogg")
  palLand = resources::loadAudio(rl, "data/audio/sfx/pal_land.ogg")

  // bgAudio.setLooping(true)
  defaultFont = resources::loadFont(rl, "data/font/FairFaxHD.ttf", 16, .linear)
  imgObj = resources::loadImage(rl, "data/img/obj_interactive.png", .linear)
  imgChum = resources::loadImage(rl, "data/img/chr_chum.png", .linear)
}

fn updateEntities() {
  entPhysics(&pal.ent)
  if pal.ent.vel.y < 0 && jitterDir >= 0 {
    jitterDir = -1
    jitterTime = 0
  }
  if pal.ent.vel.y > 0 && jitterDir <= 0 {
    jitterDir = 1
    jitterTime = 0
  }

  jitterTime += updateStep

  if jitterTime < 0.1 {
    jitterCounter += 1
  } else {
    jitterCounter = 0
  }
  entSolveCollision(&pal.ent)

  if pal.ent.vel.y > 3 {
    pal.rotTime += updateStep*100.0
  }
  if pal.ent.vel.y <= 0 {
    pal.rotTime = 0
  }
}

fn drawEntityCustomRect(ent: ^Character, r: rect::Rect) {
  color := th::blue
  if ent.onGround {
    color = th::red
  }

  canvas::drawRect(color, cameraOffsetRect(ent.rect))
}

const (
  cropBoulder = rect::Rect{0, 0, 64, 128}
  cropLeverOn  = rect::Rect{64, 64, 64, 64}
  cropLeverOff = rect::Rect{64, 0, 64, 64}
  cropLeverStaticOn  = rect::Rect{256, 64, 64, 64}
  cropLeverStaticOff = rect::Rect{256, 0, 64, 64}
  cropLeverWaterOn = rect::Rect{320, 128, 64, 64}
  cropLeverWaterOff = rect::Rect{320, 192, 64, 64}
  cropControls = rect::Rect{0, 128, 256, 256}
)

fn drawEntityObject*(name: str, tags: ^TagSet, rect: rect::Rect, scale: real): bool {
  if tags.isSet("lever") {
    if toggleActive {
      util::drawImageRect(imgObj, cropLeverOn, rect)
    } else {
      util::drawImageRect(imgObj, cropLeverOff, rect)
    }
  } else if tags.isSet("lever_s") {
    if pal.toggleActiveStatic {
      util::drawImageRect(imgObj, cropLeverStaticOn, rect)
    } else {
      util::drawImageRect(imgObj, cropLeverStaticOff, rect)
    }
  } else if tags.isSet("lever_w") {
    if pal.toggleActiveWater {
      util::drawImageRect(imgObj, cropLeverWaterOn, rect)
    } else {
      util::drawImageRect(imgObj, cropLeverWaterOff, rect)
    }
  } else if tags.isSet("water") {
    canvas::drawRect(0x0099FF66, util::rectShrink(rect, -2*scale))
  } else if tags.isSet("static") {
    canvas::drawRect(0xFFFF0066, util::rectShrink(rect, -2*scale))
  } else if tags.isSet("boulder") {
    util::drawImageRect(imgObj, cropBoulder, rect)
  } else if tags.isSet("tele") {
    rect = util::rectShrink(rect, 5*scale)
    background::drawBackgroundSquare(rect, 1000000-time, 0x111144FF, 0x222277FF, {0.5*scale, 0.5*scale})
  } else if tags.isSet("tele_off") {
    rect = util::rectShrink(rect, 5*scale)
    background::drawBackgroundSquare(rect, time, 0x111111FF, 0x222222FF, {0.5*scale, 0.5*scale})
  } else if tags.isSet("controls") {
    util::drawImageRect(imgObj, cropControls, rect)
  } else if tags.isSet("Comment") {
    canvas::drawRect(0x000000FF, util::rectShrink(rect, -scale))
    canvas::drawRect(0x00FFFFFF, rect)
    defaultFont.draw(name, rect.getPos(), 0x000000FF, scale)
  } else {
    return false
  }
  return true
}

fn drawEntity(ent: ^Character) {
  destRect := util::rectShrink(cameraOffsetRect(ent.rect), -1*cameraScale)

  if !drawEntityObject(ent.name, &ent.tags, destRect, cameraScale) {
    drawEntityCustomRect(ent, ent.rect)
  }
}

const (
  chumStateStand = 0
  chumStateJump = 1
  chumStateFall = 2
  chumFaceRect = rect::Rect{0, 0, 128, 128}
  chumMouthRect = rect::Rect{41, 52, 22, 7}
)

fn drawChumState(state: int, chum: ^ChumState, tint: uint32) {
  chum.loadTime -= th::delta/1000.0
  if chum.loadTime < 0 {
    chum.visRect = chum.ent.rect
  } else {
    chum.visRect = rerp::iRect(chum.visRect, chum.ent.rect, th::delta/100.0)
  }

  at := chum.visRect.getPos()
  bodyRect := rect::Rect{chumFaceRect.x+chumFaceRect.w*(state+1), chumFaceRect.y, chumFaceRect.w, chumFaceRect.h}
  offs := 0.0
  if chum.dir == 0 {
    offs -= 24.5
  } else {
    offs -= 12.5
  }

  chumDestRect := cameraOffsetRect({at.x+offs, at.y-29, chumFaceRect.w/2, chumFaceRect.h/2})
  chumMouthDestRect := cameraOffsetRect({at.x+offs+41-21, at.y-29+52-22.25, 22/2, -7.05/2})

  if chum.dir == 0 {
    // Mirror.
    chumDestRect.x += chumDestRect.w
    chumDestRect.w *= -1

    chumMouthDestRect.x += chumMouthDestRect.w+1.5*cameraScale
  }

  chumMouthDestRect.x -= 0.5
  chumMouthDestRect.y += 0.5
  chumMouthDestRect.h -= 1
  chumMouthDestRect.w += 1

  util::drawImageRect(imgChum, bodyRect, chumDestRect, chum.rotTime, tint)
  util::drawImageRect(imgChum, chumFaceRect, chumDestRect, chum.rotTime, tint)
  if chumFrown {
    util::drawImageRect(imgChum, chumMouthRect, chumMouthDestRect, chum.rotTime, tint)
  }
  if showDebug {
    canvas::drawText(sprintf("%d %d", trunc(at.x/32), trunc(at.y/32)), chumDestRect.getPos(), th::red, 1)
  }
}

fn loadStateToChar(state: ChumState) {
  old := pal
  oldVisRect := pal.visRect
  pal = state
  pal.visRect = oldVisRect
  pal.loadTime = 0.5
  if insideStatic {
    pal.toggleActiveStatic = old.toggleActiveStatic
  }
}

fn drawChum(state: int) {
  drawChumState(state, &pal, 0xFFFFFFFF)
}

fn getChumSpriteState(chum: ChumState): int {

  if chum.ent.vel.y > 0 {
    return chumStateFall
  } else if !chum.ent.onGround {
    return chumStateJump
  } else if chum.walkTime == 0.0 {
    return chumStateStand
  } else {
    switch trunc(chum.walkTime*6.0) % 2 {
      case 0: return chumStateJump
      case 1: return chumStateStand
    }
  }
  return -1
}

fn drawEntities() {
  for _, entity^ in entities {
    drawEntity(entity)
  }

  drawChum(getChumSpriteState(pal))
}

fn drawEntityDebugRects() {
  for i, entity in entities {
    canvas::drawRect(color::alpha(th::blue, 0.4), cameraOffsetRect(entity.rect))
  }
  canvas::drawRect(color::alpha(th::blue, 0.4), cameraOffsetRect(pal.ent.rect))
}

fn canActivateLever(): bool {
  can := true
  toggleActive = !toggleActive

  if (entCheckCollision(&pal.ent)) {
    can = false
  }

  toggleActive = !toggleActive
  return can
}

fn canActivateStaticLever(): bool {
  can := true
  pal.toggleActiveStatic = !pal.toggleActiveStatic

  if (entCheckCollision(&pal.ent)) {
    can = false
  }

  pal.toggleActiveStatic = !pal.toggleActiveStatic
  return can
}

fn canActivateWaterLever(): bool {
  can := true
  pal.toggleActiveWater = !pal.toggleActiveWater

  if (entCheckCollision(&pal.ent)) {
    can = false
  }

  pal.toggleActiveWater = !pal.toggleActiveWater
  return can
}

fn isActivated(): bool {
  return input::isJustPressedc(' ') || input::gamepad().isJustPressed(.x)
}

fn tele*(to: str) {
  ent := findEntity(to)
  if ent == null {
    dbg::logt("Error: Destination entity doesn't exist")
  } else {
    if !entCheckCollision(ent) {
      resetStates()
      pal.loadTime = 0.5
      pal.ent.rect.x = ent.rect.x+(ent.rect.w-pal.ent.rect.w)/2
      pal.ent.rect.y = ent.rect.y+(ent.rect.h-pal.ent.rect.h)/2
      resetPoint.x = pal.ent.rect.x
      resetPoint.y = pal.ent.rect.y
    }
  }
}

fn update*() {
  chumFrown = jitterCounter > 300

  toggleActiveVal = rerp::iReal(toggleActiveVal, real(int(toggleActive)), th::delta/1000.0*20.0)

  iterations := (th::time - lastUpdateTime) / updateStepMs
  lastUpdateTime += iterations * updateStepMs

  if iterations > 120 {
    frameSkips += iterations-120
    iterations = 120
  }

  for i := 0; i < len(entities); i++ {
    ent := &entities[i]

    if ent.tags.isSet("boulder") {
      power := real(int(pal.toggleActiveStatic))
      if ent.tags.isSet("inv") {
        power *= -1
      }
      boulderTargetRect := ent.originalRect.shift(th::Vf2{0, -(ent.originalRect.h+32)*power})
      ent.rect = rerp::iRect(ent.rect, boulderTargetRect, th::delta/100.0)
    }
  }

  if previewingLoad && input::isJustReleasedc('c') || input::gamepad().isJustReleased(.y) {
    stopPreview = true
  }

  if pal.loadTime > 0 {
    time = rerp::iReal(time, pal.time, th::delta/100.0)
    for d := 0; d < iterations; d++ {
      cameraControl()
    }
    return
  }

  if stopPreview {
    saves = append(saves, pal)
    loadStateToChar(bufferState)
    previewingLoad = false
    stopPreview = false
    return
  }

  if previewingLoad {
    return
  }

  pal.time += th::delta/1000.0
  time = pal.time

  for d := 0; d < iterations; d++ {
    playerControl()

    // UPDATE PLAYER & CAMERA //
    updateEntities()
    cameraControl()
  }

  if !lockInput {
    if !noSaveLoad {
      if input::isJustPressedc('z') || input::gamepad().isJustPressed(.lb) {
        if len(saves) > 0 {
          for i := len(saves)-1; i >= 0; i-- {
            if !entCheckCollision(&saves[i].ent) {
              loadStateToChar(saves[i])
              saves = delete(saves, i)
              break
            }
          }
        }
      }

      if input::isJustPressedc('x') || input::gamepad().isJustPressed(.rb) {
        saves = append(saves, pal)
      }

      if input::isJustPressedc('c') || input::gamepad().isJustPressed(.y) {
        for i := len(saves)-1; i >= 0; i-- {
          if !entCheckCollision(&saves[i].ent) {
            previewingLoad = true
            bufferState = pal
            loadStateToChar(saves[i])
            saves = delete(saves, i)
            break
          }
        }
      }
    }
    noSaveLoad = false
    insideStatic = false

    if input::isJustPressedc('r') || input::gamepad().isJustPressed(.start) {
      reset()
    }


    for i := 0; i < len(entities); i++ {
      ent := &entities[i]

      if ent.tags.isSet("lever") {
        if coll::rectToRect(ent.rect, pal.ent.rect) {
          if isActivated() && pal.ent.onGround {
            if canActivateLever() {
              toggleActive = !toggleActive
            }
          }
        }
      }
      if ent.tags.isSet("lever_s") {
        if coll::rectToRect(ent.rect, pal.ent.rect) && pal.ent.onGround {
          if isActivated() {
            if canActivateStaticLever() {
              pal.toggleActiveStatic = !pal.toggleActiveStatic
            }
          }
        }
      }
      if ent.tags.isSet("water") {
        if pal.toggleActiveWater {
          ent.rect.y = ent.originalRect.y
        } else {
          ent.rect.y = ent.originalRect.y+100000
        }
        if coll::rectToRect(ent.rect, pal.ent.rect) {
          noSaveLoad = true
        }
      }

      if ent.tags.isSet("static") {
        if coll::rectToRect(ent.rect, pal.ent.rect) {
          insideStatic = true
        }
      }

      if ent.tags.isSet("lever_w") {
         if coll::rectToRect(ent.rect, pal.ent.rect) && pal.ent.onGround {
          if isActivated() {
            if canActivateWaterLever() {
              pal.toggleActiveWater = !pal.toggleActiveWater
            }
          }
        }
      }

      if ent.tags.isSet("notify_end") {
        if coll::rectToRect(ent.rect, pal.ent.rect) {
          if isActivated() {
            notification::put({.info, sprintf("--- Stats ---\nTotal time: %s\nLags: %d", util::formatMillis(global::playTime), frameSkips)})
            notification::put({.info, "End of the demo. Thanks for playing!"})
          }
        }
      }

      if ent.tags.isSet("tele") {
        if coll::rectToRect(ent.rect, pal.ent.rect) && isActivated() {
          dest := ent.tags.param("tele")
          tele(dest)
        }
      }
    }
  }
}

fn drawGuideRects() {
  for i, guide in guides {
    canvas::drawRectLines(th::yellow, cameraOffsetRect(guide))
  }
}

fn drawOutline(color: uint32, rect: rect::Rect) {
  canvas::drawRect(color, rect)
}

fn drawOutlines() {
  radiusPulsing := 3

  renderTiles := world.collectLayerRenderTiles(cameraOffsetPoint({0, 0}), 0, cameraScale)

  for i, renderTile in renderTiles {
    distance := renderTile.rect.getPos().distanceTo(pal.ent.rect.getPos())
    proximityMultiplier := util::clamp(1.0-(distance/512.0), 0.0, 1.0)

    if distance > 256 {
      proximityMultiplier /= 2
    }

    if global::plainBiscuit {
      proximityMultiplier = 0.7
    }

    green := color::hsv(0.3, proximityMultiplier, util::max(proximityMultiplier, 0.05))
    yellow := color::hsv(0.15, proximityMultiplier, util::max(proximityMultiplier, 0.05))
    darkyellow := color::hsv(0.15, proximityMultiplier, util::max(proximityMultiplier, 0.05)/2.0)

    if renderTile.id == 29 {
      drawOutline(green, cameraOffsetRect(util::rectShrink(renderTile.rect, -3)))
    }
    if (renderTile.id == 30) || (renderTile.id == 31) {
      radius := radiusPulsing
      drawOutline(0x000000FF, cameraOffsetRect(util::rectShrink(renderTile.rect, -radius-1)))
      if renderTile.id == (toggleActive ? 31 : 30) {
        drawOutline(darkyellow, cameraOffsetRect(util::rectShrink(renderTile.rect, -radius)))
      } else {
        drawOutline(yellow, cameraOffsetRect(util::rectShrink(renderTile.rect, -radius)))
      }
    }
  }
}

fn drawOverlays() {
  renderTiles := world.collectLayerRenderTiles(cameraOffsetPoint({0, 0}), 0, cameraScale)

  alpha := color::alpha(0xFFFFFF00, toggleActiveVal)
  alpha2 := color::alpha(0xFFFFFF00, 1-toggleActiveVal)

  for i, renderTile in renderTiles {
    switch renderTile.id {
      case 30:
        util::drawImageRect(world.tileset.image, world.tileset.getCroppingRectId(30), cameraOffsetRect(renderTile.rect))
        util::drawImageRect(world.tileset.image, world.tileset.getCroppingRectId(31), cameraOffsetRect(renderTile.rect), 0.0, alpha)
      case 31:
        util::drawImageRect(world.tileset.image, world.tileset.getCroppingRectId(30), cameraOffsetRect(renderTile.rect))
        util::drawImageRect(world.tileset.image, world.tileset.getCroppingRectId(31), cameraOffsetRect(renderTile.rect), 0.0, alpha2)
    }
  }
}

fn drawObjectsAt(state: ChumState) {
  for i, entity in entities {
    if entity.tags.isSet("boulder") {
      power := real(int(state.toggleActiveStatic))
      if entity.tags.isSet("inv") {
        power *= -1
      }
      boulderTargetRect := entity.originalRect.shift(th::Vf2{0, -(entity.originalRect.h+32)*power})
      util::drawImageRect(imgObj, cropBoulder, cameraOffsetRect(boulderTargetRect), 0, 0xFFFFFF22)
    }
  }
}

fn draw*() {
  // RENDER BG //
  input::gamepad().rumble(rumbling*5, rumbling*5)
  bgCam := rect::Rect{camera.x, camera.y, global::screen.w/cameraScale, global::screen.h/cameraScale}
  bgCam.x /= 2
  bgCam.y /= 2
  rumbling = rerp::iReal(rumbling, 0, th::delta/100.0)
  oldScale := cameraScale
  oldPos := camera

  if global::plainBiscuit {
    canvas::drawRect(0x777777FF, global::screen)
  } else {
    background::draw(bgCam, time)
  }


  // RENDER WORLD //
  world.drawLayer(cameraOffsetPoint({0, 0}), -1, cameraScale)
  drawOutlines()
  world.drawLayer(cameraOffsetPoint({0, 0}), 0, cameraScale)
  drawOverlays()
  drawEntities()

  for i, state in saves {
    if !entCheckCollision(&state.ent) {
      drawChumState(getChumSpriteState(state), &state, 0xFFFFFF44)
    } else {
      drawChumState(getChumSpriteState(state), &state, 0xFF000044)
    }
    drawObjectsAt(state)
  }

  world.drawLayer(cameraOffsetPoint({0, 0}), 1, cameraScale)

  // DEBUG OVERLAYS //
  if showDebug {
    _drawRectTangents(pal.ent.rect)
    drawGuideRects()
    canvas::drawRectLines(th::green, cameraOffsetRect(getCameraTargetRect()))
    drawEntityDebugRects()
  }

  cameraScale = oldScale
  camera = oldPos
}
