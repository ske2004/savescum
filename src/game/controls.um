import (
  "input.um"
  "th.um"
)


type (
  Control* = struct {
    opts: []input::Key
  }

  ControlKind* = enum {
    up
    down
    left
    right
    jump
    save
    load
    activate
    preview
    reset
    count
  }

  State* = enum {
    justPressed
    justReleased
    pressed
  }

  Controls* = [int(ControlKind.count)]Control
)

fn getInputState(k: input::Key, state: State): bool {
  switch state {
    case .justPressed: return input::isJustPressed(k)
    case .justReleased: return input::isJustReleased(k)
    case .pressed: return input::isPressed(k)
  }

  return false;
}

fn (ctls: ^Controls) getState*(ck: ControlKind, state: State): bool {
  for i, k in ctls[int(ck)].opts {
    if getInputState(k, state) {
      return true
    }
  }
  return false
}

fn (ctls: ^Controls) isJustPressed*(ck: ControlKind): bool {
  return ctls.getState(ck, .justPressed)
}

fn (ctls: ^Controls) isJustReleased*(ck: ControlKind): bool {
  return ctls.getState(ck, .justReleased)
}

fn (ctls: ^Controls) isPressed*(ck: ControlKind): bool {
  return ctls.getState(ck, .pressed)
}

fn (ctls: ^Controls) joy*(): th::Vf2 {
  result := th::Vf2{0, 0}

  if ctls.isPressed(.left) { result.x -= 1 } 
  if ctls.isPressed(.right) { result.x += 1 }
  if ctls.isPressed(.up) { result.y -= 1 }
  if ctls.isPressed(.down) { result.y += 1 }

  if result.mag() > 0.01 {
    return result
  }

  return input::gamepad().stick(.left)
}
