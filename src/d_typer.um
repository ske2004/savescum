import ("utf8.um")

type (
  Typer* = struct {
    sequence: str
    sequenceCursor: int
    message: str
    fullMessage: str
  }

  Event* = int

  Command* = struct {
    verb, noun: str
  }
)

const (
  typerFinished* = Event(0)
  typerLetter* = Event(1)
  typerCommand* = Event(2)
)

fn (t: ^Typer) advance*(): (Event, Command);

fn init*(sequence: str): Typer {
  typer := Typer{sequence: sequence, message: ""}
  for true { 
    if s, _ := typer.advance(); s == 0 {
      break
    }
  }
  typer.fullMessage = typer.message
  typer.message = ""
  typer.sequenceCursor = 0
  return typer
}

fn (t: ^Typer) isFinished*(): bool {
  return t.sequenceCursor >= len(t.sequence)
}

fn (t: ^Typer) advance*(): (Event, Command) {
  if t.sequenceCursor >= len(t.sequence) {
    return typerFinished, Command{}
  }

  // Sequence indicator?
  if t.sequence[t.sequenceCursor] == '#' && t.sequence[t.sequenceCursor+1] == '{' {
    t.sequenceCursor += 2
    verbStart := t.sequenceCursor
    for t.sequence[t.sequenceCursor] != ':' {
      t.sequenceCursor++
    }
    verb := slice(t.sequence, verbStart, t.sequenceCursor)
    t.sequenceCursor++
    nounStart := t.sequenceCursor
    for t.sequence[t.sequenceCursor] != '}' {
      t.sequenceCursor++
    }
    noun := slice(t.sequence, nounStart, t.sequenceCursor)
    t.sequenceCursor++

    return typerCommand, Command{verb, noun}
  } else {
    rune := utf8.decodeRune(t.sequence, t.sequenceCursor)
    size := rune.size()
    t.message += slice(t.sequence, t.sequenceCursor, t.sequenceCursor+size)
    t.sequenceCursor += size
  }

  return typerLetter, Command{}
}
