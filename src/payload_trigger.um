/**
 * BRIEF: Date handlers for some event easter eggs.
 *
 * NOTE:  The dates marked as IMPLEMENTED are handled in the game.
 *        The dates that aren't marked need to be implemented eventually.
 */

import (
  "std.um"
  "th.um"
)


var date: std::DateTime
var time: int

fn update*() {
  /* Update every second */
  if date.year == 0 || ((th::time - time) > 1000) {
    time = th::time
    date = std::gmtime(std::time())
  }
}

/** 
 * Advent day, 1-indexed, 0 if not advent
 */
fn adventDay*(): (int, int) {
  if (date.month == 12 && date.day >= 1 && date.day <= 25) {
    // TODO: Check if hour calculations are correct
    if date.hour >= 12 {
      return date.day, 24 - (date.hour - 12) - (date.minute > 30 ? 1 : 0)
    } else {
      return date.day - 1, 12 - date.hour - (date.minute > 30 ? 1 : 0)
    }
  }
  return 0, 999
}


/* ITS LOOMING CLOSER */
fn y2038*(): bool {
  return (date.month == 1 && date.day == 19 && date.year == 2038)
}


/* After Y2038 */
fn overflow*(): bool {
  return (date.month == 12 && date.day == 13 && date.year == 1901)
}


fn oktoberfest*(): bool {
  return (date.month == 9 && date.day >= 16) ||
         (date.month == 10 && date.day <= 3)
}


fn christmas*(): bool {
  return date.month == 12 && date.day == 25
}


fn newYear*(): bool {
  return date.month == 1 && date.day == 1
}


/* When Unix was released */
fn unixCreated*(): bool {
  return date.month == 11 && date.day == 3
}


/* IMPLEMENTED */
fn aprilFools*(): bool {
  return date.month == 4 && date.day == 1
}


fn halloween*(): bool {
  return date.month == 10 && date.day == 31
}


fn bday*(): bool {
  return date.month == 10 && date.day == 14
}


fn prideMonth*(): bool {
  return date.month == 7
}

// Do you remember? 
fn sep21*(): bool {
  return date.month == 9 && date.day == 21
}
