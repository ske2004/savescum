import ("strings.um")

type (
  Tag* = struct {
    isSet: bool
    param: str
  }

  TagSet* = struct {
    tags: map[str]Tag
  }
)

fn (t: ^TagSet) set*(tag: str) {
  params := strings::splitBy(tag, ':')
  if len(params) > 1 {
    t.tags[params[0]].param = params[1]
  }
  t.tags[params[0]].isSet = true
}

fn (t: ^TagSet) param*(tag: str): str {
  return t.tags[tag].param
}

fn (t: ^TagSet) isSet*(tag: str): bool {
  return validkey(t.tags, tag) && t.tags[tag].isSet
}

fn mk*(s: str): TagSet {
  tagSet := TagSet{map[str]Tag{}}

  accum := ""
  tagname := ""
  param := false
  tag := Tag{false, ""}
  for i, ch in s {
    if ch == ':' {
      tagname = accum
      accum = ""
      param = true
    } else if ch == ';' {
      if param {
        tag.param = accum
      } else {
        tagname = accum
      }
      tag.isSet = true
      tagSet.tags[tagname] = tag
      accum = ""
      param = false
      tag = Tag{false, ""}
    } else {
      accum += ch
    }
  }

  if param {
    tag.param = accum
  } else {
    tagname = accum
  }

  if tagname != "" {
    tag.isSet = true
    tagSet.tags[tagname] = tag
  }

  return tagSet
}
