// Credit to @thacuber2a03

const (
  INIT*  = uint(0xcbf29ce484222325)
  PRIME* = uint(0x00000100000001B3)
)

fn hash64*(h: uint, data: []uint8): uint {
  for _, b in data { h = (h ~ b) * PRIME }
  return h
}

fn hash64s*(h: uint, data: str): uint {
  for _, b in data { h = (h ~ uint8(b)) * PRIME }
  return h
}

fn hash64i*(h: uint, data: int): uint {
  return (((((((((h ~ uint8(data)) * PRIME) ~ (h ~ uint8(data >> 8)) * PRIME) ~ (h ~ uint8(data >> 16)) * PRIME) ~ (h ~ uint8(data >> 24)) * PRIME) ~ (h ~ uint8(data >> 32)) * PRIME) ~ (h ~ uint8(data >> 32)) * PRIME)) ~ (h ~ uint8(data >> 48)) * PRIME) ~ (h ~ uint8(data >> 56)) * PRIME
}


