import "utf8.um"

/**
 * @param texts The strings to join.
 * @return The joined string.
 */
fn join*(texts: []str): str {
  result := ""
  
  for i, text in texts {
    result += text
  }

  return result
}

/**
 * @param text The string to split.
 * @param by The character to split by.
 * @return The split string.
 */
fn splitBy*(text: str, by: char): []str {
  items := []str{}
  last := 0
  for i, c in text {
    if c == by {
      items = append(items, slice(text, last, i))
      last = i+1 // Skip the character by adding one.
    }
  }
  items = append(items, slice(text, last))
  return items
}

/**
 * @param strl The strings to intersperse.
 * @param sub The string to intersperse with.
 * @return The interspersed string array.
 */
fn intersperse*(strl: []str, sub: str): []str {
  newl := copy(strl)

  for i := 0; i < len(newl)-1; i++ {
    newl[i] += sub
  }

  return newl
}

/**
 * @param texts The strings to join.
 * @param by The string to join by.
 * @return The joined string.
 */
fn joinBy*(texts: []str, by: str): str {
  return join(intersperse(texts, by))
}

fn startsWith*(text: str, prefix: str): bool {
  if len(text) < len(prefix) {
    return false
  }
  return slice(text, 0, len(prefix)) == prefix
}

fn endsWith*(text: str, suffix: str): bool {
  if len(text) < len(suffix) {
    return false
  }
  return slice(text, len(text)-len(suffix)) == suffix
}

fn separateChar*(words: []str, c: char): []str {
  result := []str{}
  for i, word in words {
    lines := splitBy(word, c)
    for i, line in lines {
      if i != 0 {
        result = append(result, c)
      }
      result = append(result, line)
    }
  }
  return result
}

fn uniSliceFrom*(text: str, start: uint): str {
  startPos := 0
  for i := 0; i < start; i++ {
    rune := utf8::decodeRune(text, startPos)
    startPos += rune.size()
  }

  return slice(text, startPos)
}

fn uniSlice*(text: str, start, size: uint): str {
  startPos := 0
  for i := 0; i < start; i++ {
    rune := utf8::decodeRune(text, startPos)
    startPos += rune.size()
  }

  endPos := startPos
  for i := 0; i < size; i++ {
    rune := utf8::decodeRune(text, endPos)
    endPos += rune.size()
  }

  return slice(text, startPos, endPos)
}

fn uniRemove*(text: str, start, size: uint): str {
  return uniSlice(text, 0, start)+uniSliceFrom(text, start+size)
}

fn uniInsert*(text: str, at: uint, other: str): str {
  return uniSlice(text, 0, at)+other+uniSliceFrom(text, at)
}  

fn windows2unix*(text: str): str {
  return joinBy(splitBy(text, '\r'), "")
}

fn toLower*(c: char): char {
  if c >= 'A' && c <= 'Z' {
    return char(int(c) + int('a')-int('A'))
  }
  return c
}

fn toUpper*(c: char): char {
  if c >= 'a' && c <= 'z' {
    return char(int(c) + int('A')-int('a'))
  }
  return c
}

fn toUpperS*(s: str): str {
  res := ""
  for i, c in s {
    if c >= 'a' && c <= 'z' {
      res += char(int(c) + int('A')-int('a'))
    } else {
      res += c
    }
  }
  return res
}

fn toLowerS*(s: str): str {
  res := ""
  for i, c in s {
    if c >= 'A' && c <= 'Z' {
      res += char(int(c) + int('a')-int('A'))
    } else {
      res += c
    }
  }
  return res
}

fn search*(needle: str, haystack: str): bool {
  for i := 0; i < len(haystack); i++ {
    if startsWith(slice(haystack, i), needle) {
      return true
    }
  }
  return false
}

fn isprint*(c: uint32): bool {
  // ASCII 0..31 control characters
  // ASCII 127   control character (DEL)
  return c >= 32 && c != 127
}
