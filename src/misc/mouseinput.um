import (
  "th.um"
  "input.um"
)

type (
  MouseButtonState* = struct {
    isDown: bool
    isPressed: bool
    isReleased: bool
  }

  MouseState* = struct {
    lmb: MouseButtonState
    mmb: MouseButtonState
    rmb: MouseButtonState
    scroll: th::Vf2
    pos: th::Vf2
    lastPos: th::Vf2 
    delta: th::Vf2 // mousePos - lastMousePos not input::getMouseDelta
  }

  ButtonState* = enum {
    down
    pressed
    released
  }
)

fn (prev: ^MouseButtonState) updated*(button: input::Key): MouseButtonState {
  return MouseButtonState{
    isDown: input::isPressed(button),
    isPressed: input::isJustPressed(button),
    isReleased: input::isJustReleased(button)
  }
}

fn (prev: ^MouseState) updated*(): MouseState {
  return MouseState {
    lmb: prev.lmb.updated(.mouse1),
    mmb: prev.mmb.updated(.mouse2),
    rmb: prev.rmb.updated(.mouse3), 
    scroll: input::getMouseScroll(),
    pos: input::getMousePos(),
    lastPos: prev.pos,
    delta: input::getMousePos().sub(prev.pos)
  }
}
