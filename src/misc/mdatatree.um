// Tree of arbitrary data for debugging

import (
  th_font = "font.um"
  "th.um"
  "../d_util.um"
  "rect.um"
  "mstrings.um"
  "canvas.um"
)

type PushText* = struct {
  font: th_font.Font
  initPos: th.Vf2
  pos: th.Vf2
  indents: int
  lineHeight: real
}

fn mkPushText*(font: th_font.Font, pos: th.Vf2): PushText {
  return PushText{font, pos, pos, 0, font.measure(" ").y}
}

fn (pushy: ^PushText) push*(txt: str, color: uint32 = 0xFFFFFFFF): rect.Rect {
  pushy.font.draw(txt, pushy.pos, color)
  size := pushy.font.measure(txt)
  if size.y > pushy.lineHeight {
    pushy.lineHeight = size.y
  }

  if len(mstrings.splitBy(txt, '\n')) > 1 {
    canvas.drawRect(color&0xFFFFFF7F, rect.mk(pushy.pos.x-1, pushy.pos.y, 1, size.y))
  }

  pushy.pos.x += size.x
  return rect.mk(pushy.pos.x-size.x, pushy.pos.y, size.x, size.y)
}


fn (pushy: ^PushText) shouldWrap*(): bool {
  return pushy.pos.x - pushy.initPos.x > 200
}

fn (pushy: ^PushText) newLine*() {
  pushy.pos.y += pushy.lineHeight
  pushy.lineHeight = pushy.font.measure(" ").y
  pushy.pos.x = pushy.indents*30+pushy.initPos.x
}

fn (pushy: ^PushText) indent*(by: int) {
  pushy.indents += by
}

fn valueTypeName*(value: interface{}): str {
  if ^[]interface{}(value) != null {
    return "array"
  } 
  if ^map[str]interface{}(value) != null {
    return "map"
  }
  if ^int(value) != null {
    return "int"
  }
  if ^str(value) != null {
    return "str"
  }
  if ^real(value) != null {
    return "real"
  }
  if ^bool(value) != null {
    return "bool"
  }
  return ""
}

fn representString*(s: str): str {
  result := ""
  split := mstrings.splitBy(s, '\n')
  for i, item in split {
    result += item
    if i != len(split)-1 {
      result += '\n'
    }
  }

  if len(split) == 1 {
    return "\""+result+"\""
  }

  return "\"\"\""+result+"\"\"\""
}

fn drawTree*(pushy: ^PushText, hover: ^str, env: interface{}) {
  if arrValue := ^[]interface{}(env); arrValue != null {
    pushy.push(sprintf("["))
    pushy.indent(1)
    pushy.newLine()

    for i in arrValue {
      drawTree(pushy, hover, arrValue[i])
      if i != len(arrValue^)-1 {
        pushy.push(", ")
        if pushy.shouldWrap() {
          pushy.newLine()
        }
      }
    }

    pushy.indent(-1)
    pushy.newLine()
    pushy.push("]")
  } else if mapValue := ^map[str]interface{}(env); mapValue != null {
    pushy.push(sprintf("{"))
    pushy.indent(1)
    pushy.newLine()

    i := 0
    keyCount := len(keys(mapValue^))
    for k in mapValue {
      if d_util.isMouseInRect(pushy.push(k, 0xFF007FFF)) {
        hover ^= valueTypeName(mapValue[k])
      }
      pushy.push(sprintf(" = "))
      drawTree(pushy, hover, mapValue[k])
      if i != keyCount-1 {
        pushy.push(", ")
        pushy.newLine()
      }
      i++
    }

    pushy.indent(-1)
    pushy.newLine()
    pushy.push("}")
  } else if boolValue := ^bool(env); boolValue != null {
    represented := repr(env)

    color := 0xFF0040FF
    if boolValue^ {
      color = 0x00FF40FF
    }

    if d_util.isMouseInRect(pushy.push(slice(represented, 0, len(represented)-1), color)) {
      hover ^= valueTypeName(env)
    }
  } else if strValue := ^str(env); strValue != null {

    if d_util.isMouseInRect(pushy.push(representString(strValue^), 0x007FFFFF)) {
      hover ^= valueTypeName(env)
    }
  } else {
    represented := repr(env)

    if d_util.isMouseInRect(pushy.push(slice(represented, 0, len(represented)-1), 0xFFFF00FF)) {
      hover ^= valueTypeName(env)
    }
  }
}

fn drawTooltip*(font: th_font.Font, pos: th.Vf2, tooltip: str) {
  size := font.measure(tooltip)
  r := rect.mk(pos.x, pos.y, size.x, size.y)

  canvas.drawRect(th.white, d_util.rectShrink(r, -1))
  canvas.drawRect(th.black, d_util.rectShrink(r, 0))
  font.draw(tooltip, pos, th.white)
}