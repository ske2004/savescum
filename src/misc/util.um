import (
  "std.um"
  "th.um"
  "rect.um"
  "canvas.um"
)

fn posTrans*(x, y: th::fu): th::Transform {
  return {p: {x, y}, s: {1, 1}}
}

fn readFileStr*(path: str): (str, std::Err) {
  file, err := std::fopen(path, "rb")
  if err.code != 0 {
    return "", err
  }

  s, err := std::freadall(file)
  if err.code != 0 {
    err2 := std::fclose(file)
    if err2.code != 0 {
      return "", err2
    }
    return "", err
  }

  return s, std::fclose(file)
}

fn writeFileStr*(path: str, dataStr: str): std::Err {
  file, err := std::fopen(path, "wb")
  if err.code != 0 {
    return err
  }

  _, err := std::fwrite(file, &[]char(dataStr))
  if err.code != 0 {
    std::fclose(file)
    return err
  }

  return std::fclose(file)
}

fn drawArrowHead*(p, p1: th::Vf2, color: uint32) {
  // draw arrowhead
  dir := p1.sub(p).norm()
  dir1 := dir.rotated({0, 0}, 45)
  dir2 := dir.rotated({0, 0}, -45)

  p2 := p1.sub(dir1.mulf(10))
  p3 := p1.sub(dir2.mulf(10))

  canvas::drawLine(color, p1, p2, 1)
  canvas::drawLine(color, p1, p3, 1)
}

fn drawArrow*(p: th::Vf2, p1: th::Vf2, color: uint32) {
  canvas::drawLine(color, p, p1, 1)
  drawArrowHead(p, p1, color)
}

fn drawArrow2*(p: th::Vf2, p1: th::Vf2, color: uint32) {
  canvas::drawLine(color, p, p1, 1)
  drawArrowHead(p, p1, color)
  drawArrowHead(p1, p, color)
}

// Returns rectangle shrinked by amount `by` from all left, right, top, bottom sides
fn rectShrink*(r: rect::Rect, by: real): rect::Rect {
  return {r.x+by, r.y+by, r.w-by*2, r.h-by*2}
}

// Pushes the child rect into the parent rect. 
// Won't work if child rectangle dimensions are bigger than parents rectangle. 
fn rectKeepInBounds*(child, parent: rect::Rect): rect::Rect {
  if child.x < parent.x {
    child.x = parent.x
  }
  if child.y < parent.y {
    child.y = parent.y
  }
  if (child.x+child.w) > (parent.x+parent.w) {
    child.x = parent.x+parent.w-child.w
  }
  if (child.y+child.h) > (parent.y+parent.h) {
    child.y = parent.y+parent.h-child.h
  }

  return child
} 

fn rectScale*(r: rect::Rect, by: real): rect::Rect {
  return {r.x*by, r.y*by, r.w*by, r.h*by}
}

fn min*(a, b: real): real {
  return a < b ? a : b
}

fn max*(a, b: real): real {
  return a > b ? a : b
}

fn clamp*(a, b, c: real): real {
  return a < b ? b :
         a > c ? c :
         a
}

fn rectSnap*(r, along: rect::Rect): th::Vf2 {
  x_left := r.x + r.w - along.x
  y_up := r.y + r.h - along.y

  x_right := along.x + along.w - r.x
  y_down := along.y + along.h - r.y

  var (min_x: real; min_y: real)

  if fabs(x_left) < fabs(x_right) {
    min_x = -x_left
  } else {
    min_x = x_right
  }

  if fabs(y_up) < fabs(y_down) {
    min_y = -y_up
  } else {
    min_y = y_down
  }

  if fabs(min_x) < fabs(min_y) {
    return th::Vf2{min_x, 0}
  }
  return th::Vf2{0, min_y}
}
