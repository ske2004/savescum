import (
  "rect.um"
  "image.um"
  "canvas.um"
  "th.um"
  "color.um"
  "../misc/util.um"
  "../shared/global.um"
  "../data/resources.um"
  "partition.um"
  "coll.um"

  "d3shapes.um"
  "d3.um"
)

type Background = enum {
  debug  
  clouds
  advent 
  jazz
  cave
  cube
  black
}

var (
  imgClouds: image::Image
  imgRocks: image::Image
  imgFadedLine: image::Image
  width: real
)

fn init*(rl: ^resources::ResourceLoader) {
  imgClouds = rl.loadImage("data/img/bg_sky.png")
  imgRocks = rl.loadImage("data/img/bg_pit.png")
  imgFadedLine = rl.loadImage("data/img/fadedline.png")

  width = imgClouds.getDims().x
}

fn drawCloudStrip(scroll: real, y: real, colorMod: uint32, scale: real) {
  scroll = scroll % -width

  times := trunc(global::screen.w/width)+2

  for i := 0; i < times; i++ {
    imgClouds.draw({p: {scroll+i*width, y}, s: {scale, scale}}, colorMod)
  }
}

fn drawClouds*(screen: rect::Rect, tint: uint32, bg: uint32, scale: real, time: real) {
  const (
    stripCount = 5
  )
  step := scale * 60

  origin := global::screen.h - 480 * scale - (stripCount - 1) * step

  width = imgClouds.getDims().x
  width *= scale

  canvas::drawRect(bg, global::screen)

  for i := 0; i < stripCount; i++ {
    yOffset := origin+i*step
    scroll := (i + 1) * (i + 1) * time * -120/stripCount
    color := tint | (trunc(((i + 1.0) / stripCount) * 0xFF) & 0xFF)

    drawCloudStrip(scroll, yOffset, color, scale)
  }
}

fn jazzColor(time: real): uint32 {
  phase := trunc(time)%6

  color := color::hsv(real(phase)/6.0, 1.0, 0.1, 1.0)

  return color
}

fn extrudeSquareFromCenter(center: th::Vf2, diameter: real): rect::Rect {
  radius := diameter/2
  return rect::Rect{center.x-radius, center.y-radius, diameter, diameter}
}

// Draws a background with a square extending from the center
fn drawBackgroundSquare*(bound: rect::Rect, time: real, color1, color2: uint32, scalexy: th::Vf2) {
  scale := scalexy.x
  // Amount of pixels to wait until a new rectangle appears
  frequency := trunc(64*scale)

  if frequency == 0 {
    return
  }

  rectCount := trunc(util::max(bound.w, bound.h)/frequency)+2
  cropBound := coll::rectIntersect(bound, global::screen)
  center := bound.center()

  canvas::beginScissorRect(cropBound)

  time *= frequency

  for i := 0; i < rectCount; i++ {
    color := color1
    if (i + (trunc(time) / frequency)) % 2 == 0 {
      color = color2
    }

    diameter := (rectCount-i) * frequency + (trunc(time) % frequency) - frequency
    rotation := diameter/bound.w*3
    square := extrudeSquareFromCenter(center, diameter)

    quad := square.transformed({s: {1, 1}, r: rotation, o: {square.x+square.w/2, square.y+square.h/2}})

    canvas::drawQuad(color, quad)
  }

  canvas::endScissor()
}

fn drawJazz*(screen: rect::Rect, time: real, position: th::Vf2, scale: th::Vf2) {
  color1 := jazzColor(time)
  color2 := color1 + 0x11111100

  drawBackgroundSquare(global::screen, time, color1, color2, scale)
}

fn drawCave*(screen: rect::Rect, position: th::Vf2, scale: th::Vf2) {
  tileSize := imgRocks.getDims()
  scr := rect::Rect{position.x, position.y, screen.w/scale.x, screen.h/scale.y}
  tileRepeat := partition::calculateTileSpanOnScreen(tileSize, scr)

  for x := 0; x < tileRepeat.w; x++ {
    for y := 0; y < tileRepeat.h; y++ {
      tilePos := th::Vf2{x*tileSize.x, y*tileSize.y}.add(tileRepeat.pos).mul(scale).add(screen.getPos())

      imgRocks.draw(th::Transform{p: tilePos, s: scale})
    }
  }
}

fn drawFadedLine*(p1, p2: th::Vf2, color: uint32, alpha1: real, alpha2: real, thickness: real) {
  ortho := p2.sub(p1).norm()
  ortho = {-ortho.y, ortho.x}
  ortho1 := ortho.mulf(thickness/2*alpha1)
  ortho2 := ortho.mulf(thickness/2*alpha2)

  line := th::Quad{p1.sub(ortho1), p1.add(ortho1), p2.add(ortho2), p2.sub(ortho2)}
  
  imgFadedLine.crop({0.5, 0}, {1.0, 1.0})
  imgFadedLine.drawOnQuad(line, color::alpha(color, alpha2))
  imgFadedLine.crop({0, 0}, {0.5, 1.0})
  imgFadedLine.drawOnQuad(line, color::alpha(color, alpha1))
}

fn drawCubeGeneric*(screen: rect::Rect, color: uint32, scale: real, rotate: [3]real) {
  cube := d3shapes::mkCube()
  cubeEdges := d3shapes::mkCubeEdges()
  camera := d3::mkCamera(screen.w, screen.h)
  camera.pos[2] = -2

  for i, point^ in cube {
    point^ = d3::rotatePoint(point.mul(scale), rotate).add({0, 0, 6})
  }

  for i, edge in cubeEdges {
    p1 := cube[edge[0]]
    p2 := cube[edge[1]]

    s1 := camera.project(p1)
    s2 := camera.project(p2)

    alpha := 1.0 - util::clamp((p1[2]-5.0)/2.0, 0.0, 1.0)
    alpha2 := 1.0 - util::clamp((p2[2]-5.0)/2.0, 0.0, 1.0)

    drawFadedLine(s1, s2, color, alpha, alpha2, 8)
  }
}

fn drawCube*(screen: rect::Rect, position: th::Vf2, scale: th::Vf2, time: real) {
  time /= 2.0
  canvas::drawRect(0x000022FF, screen)
  drawCubeGeneric(screen, 0x770000FF, 0.25, {time, 0, time})
  drawCubeGeneric(screen, 0x007700FF, 0.5, {time, time, 0})
  drawCubeGeneric(screen, 0x00FFFFFF, 1, {0, time, time})
}

fn drawBg*(screen: rect::Rect, which: Background, time: real) {
  screenScale := th::Vf2{global::screen.w/screen.w, global::screen.h/screen.h}

  switch which {
    case .black: drawBackgroundSquare(global::screen, time, 0x000000FF, 0x040408FF, screenScale)
    case .debug: drawClouds(screen, 0x99994400, 0xCCCCCCFF, global::screen.w/screen.w*0.5, time)
    case .clouds: drawClouds(screen, 0x7777FF00, 0xEEEEEEFF, global::screen.w/screen.w*0.5, time)
    case .advent: drawClouds(screen, 0x4444AA00, 0x000022FF, global::screen.w/screen.w*0.5, time);
    case .jazz: drawJazz(screen, time, {screen.x, screen.y}, screenScale)
    case .cave: drawCave(global::screen, {screen.x, screen.y}, screenScale)
    case .cube: drawCube(global::screen, {screen.x, screen.y}, screenScale, time)
  }
}

fn draw*(screen: rect::Rect, time: real) {
  drawBg(screen, .jazz, time)
}
