/*
 * Draw commands.
 * TODO: Check if callbacks/closures are faster than interfaces and use them instead.
 */

import (
  "th.um"
  "rect.um"
  "image.um"
  "coll.um"
  "font.um"
  "canvas.um"
  "std.um"
)

type (
  DrawProperties* = struct{}

  CustomCommand* = interface {
    draw(props: DrawProperties): void
  }

  ImageCmd = struct {
    image: image::Image
    transform: th::Transform
    quadCrop: th::Quad
    tint: uint32
  }

  BlitCmd = struct {
    image: image::Image
    src, dst: rect::Rect
    tint: uint32
    rot: real
  }

  NinepatchCmd = struct {
    image: image::Image
    outer, inner, dest: rect::Rect
    tint: uint32
  }

  TextCmd = struct {
    font: font::Font
    text: str
    pos: th::Vf2
    color: uint32
    size: real
  }

  RectCmd = struct {
    rect: rect::Rect
    color: uint32
  }

  RectLineCmd = struct {
    rect: rect::Rect
    color: uint32
    thickness: real
  }

  BeginScissorRectCmd = struct {
    rect: rect::Rect
  }

  EndScissorCmd = struct{}

  Layer = struct {
    commands: []CustomCommand
  }

  DrawContext* = struct {
    scissorRectStack: []rect::Rect
    currentLayerId: int
    currentLayer: ^Layer
    layerOrder: []int
    layers: map[int]Layer
    scissorCounter: int
  }
)

fn (l: ^Layer) appendCommand(cmd: CustomCommand) {
  l.commands = append(l.commands, cmd)
}

fn (ctx: ^DrawContext) acquireLayer(layer: int) {
  // Insert the layer ordering at the correct spot.

  if validkey(ctx.layers, layer) {
    return
  }

  insertIndex := 0
  for i in ctx.layerOrder {
    if ctx.layerOrder[i] > layer {
      insertIndex = i
      break
    } else {
      insertIndex = i+1
    }
  }

  ctx.layers[layer] = {}
  ctx.layerOrder = insert(ctx.layerOrder, insertIndex, layer)
}


fn mk*(): DrawContext {
  ctx := DrawContext{}
  ctx.acquireLayer(0)
  ctx.currentLayer = &ctx.layers[0]
  return ctx
}

fn (ctx: ^DrawContext) setLayer*(layer: int) {
  ctx.acquireLayer(layer)
  ctx.currentLayerId = layer
  ctx.currentLayer = &ctx.layers[layer]
}

fn (ctx: ^DrawContext) moveLayer*(layerBy: int) {
  ctx.setLayer(ctx.currentLayerId+layerBy)
}

fn (ctx: ^DrawContext) getCurrentScissorRect*(): (rect::Rect, bool) {
  if len(ctx.scissorRectStack) > 0 {
    return ctx.scissorRectStack[len(ctx.scissorRectStack)-1], true
  }
  return rect::Rect{}, false
}

fn (ctx: ^DrawContext) flush*() {
  if ctx.scissorCounter != 0 {
    std::assert(false, "Scissor mismatch.")
  }

  ctx.scissorCounter = 0

  for _, i in ctx.layerOrder {
    layer := ctx.layers[i]

    for j, command in layer.commands {
      command.draw(DrawProperties{})
    } 
  }

  ctx ^= mk()
}

// COMMAND IMPL ================================================================

fn (d: ^TextCmd) draw(props: DrawProperties) {
  d.font.draw(d.text, d.pos, d.color, d.size)
}

fn (d: ^ImageCmd) draw(props: DrawProperties) {
  d.image.cropQuad(d.quadCrop)
  d.image.draw(d.transform, d.tint)
}

fn (d: ^BlitCmd) draw(props: DrawProperties) {
  d.image.blit(d.src, d.dst, d.tint, d.rot)
}

fn (d: ^NinepatchCmd) draw(props: DrawProperties) {
  d.image.drawNinepatch(d.outer, d.inner, d.dest, d.tint)
}

fn (d: ^RectCmd) draw(props: DrawProperties) {
  canvas::drawRect(d.color, d.rect)
}

fn (d: ^RectLineCmd) draw(props: DrawProperties) {
  canvas::drawRectLines(d.color, d.rect, d.thickness)
}

fn (d: ^BeginScissorRectCmd) draw(props: DrawProperties) {
  canvas::beginScissorRect(d.rect)
}

fn (d: ^EndScissorCmd) draw(props: DrawProperties) {
  canvas::endScissor()
}

//==============================================================================

fn (ctx: ^DrawContext) drawText*(f: font::Font, text: str, position: th::Vf2, color: uint32, size: th::fu = 1.0) {
  ctx.currentLayer.appendCommand(TextCmd{f, text, position, color, size})
}

fn (ctx: ^DrawContext) drawRect*(color: uint32, r: rect::Rect) {
  ctx.currentLayer.appendCommand(RectCmd{color: color, rect: r})
}

fn (ctx: ^DrawContext) drawRectLines*(color: uint32, r: rect::Rect, thicc: real = 1.0) {
  ctx.currentLayer.appendCommand(RectLineCmd{color: color, rect: r, thickness: thicc})
}

fn (ctx: ^DrawContext) beginScissorRectRaw(r: rect::Rect) {
  ctx.scissorRectStack = append(ctx.scissorRectStack, r)
  ctx.currentLayer.appendCommand(BeginScissorRectCmd{rect: r})
  ctx.scissorCounter++
}

fn (ctx: ^DrawContext) drawImage*(img: image::Image, transform: th::Transform, color: uint32 = 0xFFFFFFFF) {
  ctx.currentLayer.appendCommand(ImageCmd{img, transform, img.getCropQuad(), color})
}

fn (ctx: ^DrawContext) drawImageRect*(img: image::Image, src: rect::Rect, dst: rect::Rect, rot: real = 0.0, color: uint32 = 0xFFFFFFFF) {
  ctx.currentLayer.appendCommand(BlitCmd{img, src, dst, color, rot})
}

fn (ctx: ^DrawContext) drawNinepatch*(img: image::Image, outer, inner, dest: rect::Rect, tint: uint32 = th::white) {
  ctx.currentLayer.appendCommand(NinepatchCmd{img, outer, inner, dest, tint})
}

fn (ctx: ^DrawContext) drawCustom*(custom: CustomCommand) {
  ctx.currentLayer.appendCommand(custom)
}

fn (ctx: ^DrawContext) endScissor*() {
  if len(ctx.scissorRectStack) == 0 {
    std::assert(false, "Mismatched beginScissor/endScissor")
  }

  ctx.scissorRectStack = delete(ctx.scissorRectStack, len(ctx.scissorRectStack)-1)

  ctx.currentLayer.appendCommand(EndScissorCmd{})
  ctx.scissorCounter--
}

fn mergeScissorRects(child, parent: rect::Rect): rect::Rect {
  if coll::rectToRect(child, parent) == false {
    // At this point we just need to disable rendering since child isn't even inside the parent,
    //  so it shouldn't be visible. 
    //
    // In this case I return a scissor rect that will remove all rendering for once.
    return {0, 0, 0, 0}
  }

  // Otherwise return the intersection rect.
  return coll::rectIntersect(child, parent)
}

fn (ctx: ^DrawContext) beginScissorRect*(r: rect::Rect) {
  // Merge scissor rects to make sure the rect `r` doesn't show content
  // outside of the parent scissor rect too. 
  // 
  // This is needed for cases like
  // scroll containers, where you don't want text to overflow outside of scroll buffer
  // AND the text box. 
  if len(ctx.scissorRectStack) > 0 {
    r = mergeScissorRects(r, ctx.scissorRectStack[len(ctx.scissorRectStack)-1])
  }

  ctx.beginScissorRectRaw(r)
}

