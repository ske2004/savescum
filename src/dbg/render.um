// TODO: Add raw tree view of any value

import (
  "canvas.um"
  "font.um"
  "rect.um"
  "coll.um"
  "th.um"
  "input.um"

  "info.um"
)

type DisplayToLayout = struct {
  newLine: bool
  color: uint32
  text: str
}

type RenderCommand = struct {
  text: str
  color: uint32
  position: th::Vf2
}

type WrapLayout = struct {
  box: rect::Rect
  position: th::Vf2
  maxY: real
}

fn (wl: ^WrapLayout) pushNode(size: th::Vf2): rect::Rect {
  r := rect::Rect{x: wl.position.x, y: wl.position.y, w: size.x, h: size.y}

  wl.position.x += size.x
  wl.maxY = size.y > wl.maxY ? size.y : wl.maxY
  wl.box.w = wl.position.x > wl.box.w ? wl.position.x : wl.box.w

  return r 
}

fn (wl: ^WrapLayout) newLine() {
  wl.position.x = wl.box.x
  wl.position.y += wl.maxY
  wl.box.h += wl.maxY
}

fn valueToDisplay*(value: any): DisplayToLayout {
  text := ""
  switch v := type(value) {
    case uint:   text = sprintf("x%llX", v)
    case uint8:  text = sprintf("x%hhX", v)
    case uint16: text = sprintf("x%hX", v)
    case uint32: text = sprintf("x%X", v)
    case str:    text = sprintf("%s", v)
    default:     text = sprintf("%v", value)
  }
  
  color := 0xFF99FFFF

  switch v := type(value) {
    case bool:   color = v ? 0x99FF99FF : 0xFF9999FF
    case int:    color = 0x9999FFFF
    case int8:   color = 0x9999FFFF
    case int16:  color = 0x9999FFFF
    case int32:  color = 0x9999FFFF
    case uint:   color = 0x9999FFFF
    case uint8:  color = 0x9999FFFF
    case uint16: color = 0x9999FFFF
    case uint32: color = 0x9999FFFF
    case real32: color = 0x9999FFFF
    case real:   color = 0x9999FFFF
    case str:    color = 0xFFFF99FF
  }

  return {text: text, color: color}
}

fn renderDebugInfo*(font: font::Font, debugInfo: info::DebugInfo, dim: bool, scale: real): bool {
  displaysToLayout := []DisplayToLayout{}

  and := dim ? 0xFFFFFF00 : 0xFFFFFFFF;

  for _, display in debugInfo.displays {
    val := valueToDisplay(display.value)

    val.color &= and

    elements := []DisplayToLayout{
      {text: display.name, color: 0xFFFFFFFF&and},
      val,
      {newLine: true}
    }

    displaysToLayout = append(displaysToLayout, elements)
  }

  wl := WrapLayout{box: rect::Rect{x: 0, y: 0}}
  renderCommands := []RenderCommand{}

  alignment := [32]real([]real{})
  column := 0

  for _, display in displaysToLayout {
    if display.newLine {
      column = 0
    } else {
      size := font.measure(display.text).mulf(scale)
      alignment[column] = size.x > alignment[column] ? size.x : alignment[column]
      column++
    }
  }

  column = 0
  for _, display in displaysToLayout {
    if display.newLine {
      wl.newLine()
      column = 0
    } else {
      text := display.text
      color := display.color
      size := font.measure(text).mulf(scale)
      size.x = alignment[column]+10

      textRect := wl.pushNode(size)
      renderCommands = append(renderCommands, RenderCommand{text: text, color: color, position: textRect.getPos()})

      column += 1
    }
  }

  canvas::drawRect(0x00000066&and, wl.box)

  for _, command in renderCommands {
    font.draw(command.text, command.position, command.color, scale)
  }

  return coll::vf2ToRect(input::getMousePos(), wl.box)
}
