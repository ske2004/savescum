import (
  "rect.um"
  "th.um"
  "canvas.um"
  "color.um"
  "../misc/util.um"
  "../gfx/rerp.um"
  "font.um"
)

type Console* = struct {
  blocks: []str
}

fn (con: ^Console) write*(block: str) {
  con.blocks = append(con.blocks, block)
  if len(con.blocks) > 10000 {
    con.blocks = slice(con.blocks, 1)
  }
}

type Scrolley* = struct {
  contentsz: real
  clientsz: real
  scroll: real
}

fn (s: ^Scrolley) scrollTo(scroll: real) {
  s.scroll = util::clamp(scroll, 0, util::max(s.contentsz-s.clientsz, 0))
}

type VisualConsole* = struct {
  // interpolated
  visualScroll: real
  scrolley: Scrolley
}

type RenderPass = struct {
  rect: rect::Rect
  pos: th::Vf2
  font: font::Font
}

fn blockRect*(pass: ^RenderPass, block: str, scale: real): rect::Rect {
  height := pass.font.measure(block).y*scale

  return rect::Rect{pass.rect.x, pass.pos.y-height, pass.rect.w, height}
}

// renders a single block and moves upwards
fn allocBlock*(pass: ^RenderPass, block: str, scale: real): rect::Rect {
  r := blockRect(pass, block, scale)
  pass.pos.y -= r.h
  return r
}

fn renderBlock*(pass: ^RenderPass, vc: ^VisualConsole, r: rect::Rect, block: str, bg, fg: uint32, scale: real) {
  pos := r.getPos().add(th::Vf2{0, vc.visualScroll})
  if pos.y > pass.rect.y-r.h && pos.y < pass.rect.y+pass.rect.h {
    canvas::drawRect(bg, {pos.x, pos.y, r.w, r.h})
    pass.font.draw(block, pos, fg, scale)
  }
}

fn (vc: ^VisualConsole) scrollBy*(delta: real) {
  vc.scrolley.scrollTo(vc.scrolley.scroll+delta)
}

fn render*(con: ^Console, vc: ^VisualConsole, font: font::Font, r: rect::Rect, scale: real) { 
  pass := RenderPass{r, th::Vf2{r.x, r.y+r.h}, font}
  startY := pass.pos.y

  canvas::beginScissorRect(r)
  canvas::drawRect(color::alpha(th::black, 0.70), r)
  
  blockRects := []rect::Rect{}
  cutoff := 10000

  for i in con.blocks {
    block := con.blocks[len(con.blocks)-i-1]
    if pass.pos.y < r.y && cutoff != 10000 {
      cutoff = i
    }
    blockRects = append(blockRects, allocBlock(&pass, block, scale))
  }

  for i in con.blocks {
    if i == cutoff {
      break
    }
    blockRect := blockRects[i]

    block := con.blocks[len(con.blocks)-i-1]

    alpha := (blockRect.y+vc.visualScroll)/r.h+0.4
    if alpha > 1.0 { alpha = 1.0 }

    bg := 0xFFFFFFFF
    if i % 2 == 0 {
      bg = 0x000000FF
    }

    
    renderBlock(&pass, vc, blockRect, block, color::alpha(bg, alpha*0.05), color::alpha(th::white, alpha), scale)
  }
  canvas::endScissor()

  vc.scrolley.clientsz = r.h
  vc.scrolley.contentsz = startY-pass.pos.y
  vc.visualScroll = rerp::iReal(vc.visualScroll, vc.scrolley.scroll, 0.2)
}
