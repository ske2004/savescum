import (
  "d_world.um"
  "d_csvutil.um"
  "rect.um"
  "std.um"
  "csv.um"
  "th.um"
  "d_assert.um"
)

type (
  EntityDesc* = struct {
    id: str
    name: str
    tags: str
    rect: rect.Rect
  }

  WorldData* = struct {
    world: d_world.World
    entities: []EntityDesc
  }
)

const (
  lastVersion* = "000"
)

fn saveEntityDesc(ent: EntityDesc): []str {
  return append([]str{ent.id, ent.name, ent.tags}, d_csvutil.saveRect(ent.rect))
} 

fn save*(wd: WorldData): str {
  world := wd.world
  entities := wd.entities

  data := make([][]str, 0)
  // ver
  data = append(data, []str{lastVersion})
  data = append(data, []str{sprintf("%d", len(entities))})
  for i, ent in entities {
    data = append(data, saveEntityDesc(ent))
  }

  // player pos
  data = append(data, []str{std.itoa(trunc(world.playerSpawnPos.x)), std.itoa(trunc(world.playerSpawnPos.y))})

  // Start from -1, because that's the background layer, which maps to index 0
  layerNo := -1
  for i in world.tilemap {
    layer := &world.tilemap[i]
    for pos, chunk in layer { 
      data = append(data, []str{std.itoa(pos.x), std.itoa(pos.y), std.itoa(layerNo)})
      
      grid := make([][]str, d_world.chunkH)
      for ty := 0; ty < d_world.chunkH; ty++ {
        grid[ty] = make([]str, d_world.chunkW)
        for tx := 0; tx < d_world.chunkW; tx++ {
          grid[ty][tx] = sprintf("%d", chunk[tx][ty])
        }
      }

      data = append(data, grid)
    }
    layerNo++
  }

  return csv.encode(data)
}

fn loadEntityDesc(s: []str): EntityDesc {
  return EntityDesc{id: s[0], name: s[1], tags: s[2], rect: d_csvutil.loadRect(slice(s, 3, 7))}
}

fn load*(world: d_world.World, data: str): WorldData {
  csvData := csv.parse(data)

  var (
    entities: []EntityDesc = make([]EntityDesc, 0)
  )

  world.tilemap = [3]map[d_world.ChunkPos]d_world.Chunk{map[d_world.ChunkPos]d_world.Chunk{}, map[d_world.ChunkPos]d_world.Chunk{}, map[d_world.ChunkPos]d_world.Chunk{}}

  d_assert.assert(csvData[0][0] == lastVersion, "Scene version mismatch.")

  row := 1
  entityCount := std.atoi(csvData[1][0])
  row += 1

  for i := 0; i < entityCount; i++ {
    entities = append(entities, loadEntityDesc(csvData[i+row]))
  }
  row += entityCount

  world.playerSpawnPos = th.Vf2{real(std.atoi(csvData[row][0])), real(std.atoi(csvData[row][1]))}

  row += 1

  length := len(csvData)
  // NOTE: I check first column of the csv data because csv parser adds bogus row with empty string
  for row < length && csvData[row][0] != "" {
    chunkPos := d_world.ChunkPos{std.atoi(csvData[row][0]), std.atoi(csvData[row][1])}
    layer := std.atoi(csvData[row][2]) + 1
    row += 1

    d_assert.assert(layer >= 0 && layer <= 2, "Bad layer number.")

    var chunk: d_world.Chunk
    for y := 0; y < d_world.chunkH; y++ {
      for x := 0; x < d_world.chunkW; x++ {
        tileId := std.atoi(csvData[row+y][x])
        chunk[x][y] = tileId        
      }
    }
    row += d_world.chunkH

    world.tilemap[layer][chunkPos] = chunk
  }

  return WorldData{world, entities}
}

